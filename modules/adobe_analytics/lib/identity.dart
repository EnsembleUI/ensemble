import 'package:flutter/foundation.dart';
import 'package:flutter_aepcore/flutter_aepcore.dart';
import 'package:flutter_aepedgeidentity/flutter_aepedgeidentity.dart';
import 'dart:async';

class AdobeAnalyticsIdentity {
  AdobeAnalyticsIdentity();

  // This API retrieves the Experience Cloud ID (ECID) that was generated when the app was initially launched. This ID is preserved between app upgrades, is saved and restored during the standard application backup process, and is removed at uninstall.
  Future<dynamic> getExperienceCloudId() async {
    try {
      return await Identity.experienceCloudId;
    } catch (e) {
      debugPrint('Error getting Adobe Analytics Experience Cloud ID: $e');
      throw StateError('Error getting Adobe Analytics Experience Cloud ID: $e');
    }
  }

  // Get all identities in the Identity for Edge Network extension, including customer identifiers which were previously added.
  Future<dynamic> getIdentities() async {
    try {
      return await Identity.identities;
    } catch (e) {
      debugPrint('Error getting Adobe Analytics Identities: $e');
      throw StateError('Error getting Adobe Analytics Identities: $e');
    }
  }

  /*
  Returns the identifiers in a URL's query parameters for consumption in hybrid mobile applications. The response will not return any leading & or ?, since the caller is responsible for placing the variables in the resulting URL in the correct locations. If an error occurs while retrieving the URL variables, the callback handler will return a null value. Otherwise, the encoded string is returned. An example of an encoded string is as follows: 'adobe_mc=TS%3DTIMESTAMP_VALUE%7CMCMID%3DYOUR_ECID%7CMCORGID%3D9YOUR_EXPERIENCE_CLOUD_ID'
    - MCID: This is also known as the Experience Cloud ID (ECID).
    - MCORGID: This is also known as the Experience Cloud Organization ID.
    - TS: The timestamp that is taken when the request was made.
  */

  Future<dynamic> getUrlVariables() async {
    try {
      return await Identity.urlVariables;
    } catch (e) {
      debugPrint('Error getting Adobe Analytics URL Variables: $e');
      throw StateError('Error getting Adobe Analytics URL Variables: $e');
    }
  }

  /*
  Remove the identity from the stored client-side IdentityMap. The Identity extension will stop sending the identifier to the Edge Network. Using this API does not remove the identifier from the server-side User Profile Graph or Identity Graph.
  Identities with an empty id or namespace are not allowed and are ignored.
  Removing identities using a reserved namespace is not allowed using this API. The reserved namespaces are:
  - ECID
  - IDFA
  - GAID
  */

  Future<dynamic> removeIdentity(Map<String, dynamic> parameters) async {
    final itemMap = parameters['item'] as Map<String, dynamic>;
    final namespace = parameters['namespace'] as String;

    try {
      AuthenticatedState authState;
      switch (itemMap['authenticatedState'] as String) {
        case 'authenticated':
          authState = AuthenticatedState.AUTHENTICATED;
          break;
        case 'ambiguous':
          authState = AuthenticatedState.AMBIGUOUS;
          break;
        case 'loggedOut':
          authState = AuthenticatedState.LOGGED_OUT;
          break;
        default:
          authState = AuthenticatedState.AMBIGUOUS;
      }

      final item = IdentityItem(
        itemMap['id'] as String,
        authState,
        itemMap['primary'] as bool? ?? false,
      );
      // Perform the removal with a timeout
      try {
        final removeFuture = Identity.removeIdentity(item, namespace);
        final timeoutFuture = Future.delayed(Duration(seconds: 1));
        await Future.any([removeFuture, timeoutFuture]);
        final afterRemovalIdentities = await Identity.identities;
        return afterRemovalIdentities;
      } catch (e) {
        print('Error during identity removal: $e');
        throw StateError('Failed to remove identity: $e');
      }
    } catch (e) {
      print('Error in removeIdentity: $e');
      debugPrint('Error in identity removal process: $e');
      throw StateError('Error in identity removal process: $e');
    }
  }

  /*
  Clears all identities stored in the Identity extension and generates a new Experience Cloud ID (ECID) . Using this API does not remove the identifiers from the server-side User Profile Graph or Identity Graph.
  This is a destructive action, since once an ECID is removed it cannot be reused. The new ECID generated by this API can increase metrics like unique visitors when a new user profile is created.
  
  Some example use cases for this API are:
  - During debugging, to see how new ECIDs (and other identifiers paired with it) behave with existing rules and metrics.
  - A last-resort reset for when an ECID should no longer be used.

  This API is not recommended for:
  - Resetting a user's consent and privacy settings.
  - Removing existing custom identifiers; use the `removeIdentity` API instead.
  - Removing a previously synced advertising identifier after the advertising tracking settings were changed by the user; use the `setAdvertisingIdentifier` API instead.

  ℹ️ The Identity for Edge Network extension does not read the Mobile SDK's privacy status and therefor setting the SDK's privacy status to opt-out will not clear the identities from the Identity for Edge Network extension.
  */

  Future<dynamic> resetIdentities() async {
    try {
      await MobileCore.resetIdentities();
      return await Identity.identities;
    } catch (e) {
      debugPrint('Error resetting Adobe Analytics Identity: $e');
      throw StateError('Error resetting Adobe Analytics Identity: $e');
    }
  }

  // When this API is called with a valid advertising identifier, the Identity for Edge Network extension includes the advertising identifier in the XDM Identity Map using the namespace GAID (Google Advertising ID) in Android and IDFA (Identifier for Advertisers) in iOS. If the API is called with the empty string (''), null/nil, or the all-zeros UUID string values, the advertising identifier is removed from the XDM Identity Map (if previously set). The advertising identifier is preserved between app upgrades, is saved and restored during the standard application backup process, and is removed at uninstall.
  Future<dynamic> setAdvertisingIdentifier(String advertisingIdentifier) async {
    try {
      return await MobileCore.setAdvertisingIdentifier(advertisingIdentifier);
    } catch (e) {
      debugPrint('Error setting Adobe Analytics Advertising Identifier: $e');
      throw StateError(
          'Error setting Adobe Analytics Advertising Identifier: $e');
    }
  }

  /*
  Update the currently known identities within the SDK. The Identity extension will merge the received identifiers with the previously saved ones in an additive manner, no identities are removed from this API.
  Identities with an empty id or namespace are not allowed and are ignored.
  
  Updating identities using a reserved namespace is not allowed using this API. The reserved namespaces are:
  - ECID
  - IDFA
  - GAID
  */
  Future<dynamic> updateIdentities(Map<String, dynamic> parameters) async {
    try {
      final identitiesMap = parameters['identities'] as Map<String, dynamic>;
      final identityMap = IdentityMap();

      // Process each namespace in the identities map
      identitiesMap.forEach((namespace, items) {
        if (items is List) {
          for (var item in items) {
            if (item is Map<String, dynamic>) {
              AuthenticatedState authState;
              switch (item['authenticatedState'] as String) {
                case 'authenticated':
                  authState = AuthenticatedState.AUTHENTICATED;
                  break;
                case 'ambiguous':
                  authState = AuthenticatedState.AMBIGUOUS;
                  break;
                case 'loggedOut':
                  authState = AuthenticatedState.LOGGED_OUT;
                  break;
                default:
                  authState = AuthenticatedState.AMBIGUOUS;
              }

              final identityItem = IdentityItem(
                item['id'] as String,
                authState,
                item['primary'] as bool? ?? false,
              );
              try {
                identityMap.addItem(identityItem, namespace);
              } catch (e) {
                throw StateError('Failed to add identity item: $e');
              }
            }
          }
        }
      });
      // Perform the update with a workaround for the hanging issue
      try {
        final updateFuture = Identity.updateIdentities(identityMap);
        final timeoutFuture = Future.delayed(Duration(seconds: 1));
        await Future.any([updateFuture, timeoutFuture]);
        final afterUpdateIdentities = await Identity.identities;

        return afterUpdateIdentities;
      } catch (e) {
        print('Error during identity update: $e');
        throw StateError('Failed to update identities: $e');
      }
    } catch (e) {
      debugPrint('Error updating Adobe Analytics Identities: $e');
      throw StateError('Error updating Adobe Analytics Identities: $e');
    }
  }
}
