{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$ref": "#/definitions/Screen",
  "definitions": {
    "Screen": {
      "type": "object",
      "properties": {
        "ViewGroup": {
          "$ref": "#/definitions/ViewGroup"
        }
      },
      "additionalProperties": false
    },
    "ViewGroup": {
      "type": "object",
      "properties": {
        "Column": {
          "$ref": "#/definitions/Column"
        },
        "menu": {
          "anyOf": [
            {
              "type": "object",
              "properties": {
                "BottomNavBar": {
                  "$ref": "#/definitions/BottomNavBar"
                }
              },
              "required": [
                "BottomNavBar"
              ],
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "SideBar": {
                  "$ref": "#/definitions/SideBar"
                }
              },
              "required": [
                "SideBar"
              ],
              "additionalProperties": false
            }
          ]
        },
        "header": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/Widgets"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Column": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "item-template": {
          "$ref": "#/definitions/ItemTemplate"
        },
        "id": {
          "type": "string"
        },
        "children": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Widgets"
          },
          "minItems": 1
        }
      }
    },
    "ItemTemplate": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "template": {
          "anyOf": [
            {
              "$ref": "#/definitions/Widgets"
            },
            {
              "type": "string"
            }
          ]
        }
      },
      "required": [
        "data",
        "name",
        "template"
      ],
      "additionalProperties": false
    },
    "Widgets": {
      "type": "object",
      "properties": {
        "Column": {
          "$ref": "#/definitions/Column"
        },
        "Row": {
          "$ref": "#/definitions/Row"
        },
        "Text": {
          "$ref": "#/definitions/Text"
        },
        "Markdown": {
          "$ref": "#/definitions/Markdown"
        },
        "Image": {
          "$ref": "#/definitions/Image"
        },
        "Lottie": {
          "$ref": "#/definitions/Lottie"
        },
        "Icon": {
          "$ref": "#/definitions/Icon"
        },
        "Button": {
          "$ref": "#/definitions/Button"
        },
        "Date": {
          "type": "string",
          "format": "date-time"
        },
        "Divider": {
          "$ref": "#/definitions/Divider"
        },
        "Html": {
          "$ref": "#/definitions/Html"
        },
        "OnOff": {
          "$ref": "#/definitions/OnOff"
        },
        "PasswordInput": {
          "$ref": "#/definitions/PasswordInput"
        },
        "TextInput": {
          "$ref": "#/definitions/TextInput"
        },
        "Progress": {
          "$ref": "#/definitions/Progress"
        },
        "QRCode": {
          "$ref": "#/definitions/QRCode"
        },
        "SelectOne": {
          "$ref": "#/definitions/SelectOne"
        },
        "Spacer": {
          "$ref": "#/definitions/Spacer"
        },
        "Time": {
          "$ref": "#/definitions/Time"
        }
      },
      "additionalProperties": false
    },
    "Row": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "item-template": {
          "$ref": "#/definitions/ItemTemplate"
        },
        "id": {
          "type": "string"
        },
        "children": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Widgets"
          },
          "minItems": 1
        }
      }
    },
    "Text": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "text": {
          "type": "string",
          "default": "add your text"
        },
        "styles": {
          "$ref": "#/definitions/TextStyles"
        }
      },
      "additionalProperties": false
    },
    "TextStyles": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "font": {
          "$ref": "#/definitions/fontName",
          "description": "Default built-in style for this text"
        },
        "fontSize": {
          "type": "number",
          "minimum": 6
        },
        "fontWeight": {
          "$ref": "#/definitions/fontWeight"
        },
        "color": {
          "$ref": "#/definitions/Colors"
        },
        "overflow": {
          "$ref": "#/definitions/overflow",
          "description": "Set treatment of text longer than available space"
        },
        "textAlign": {
          "$ref": "#/definitions/textAlign"
        },
        "textStyle": {
          "$ref": "#/definitions/textStyle"
        },
        "lineHeight": {
          "$ref": "#/definitions/lineHeight"
        },
        "expanded": {
          "type": "boolean",
          "description": "If the parent is a Row or Column, this flag will stretch this widget in the appropriate direction. (e.g stretch horizontally for parent of type Row)"
        },
        "shadowColor": {
          "type": [
            "number",
            "string"
          ],
          "description": "Box shadow color starting with '0xFF' for full opacity"
        },
        "shadowOffset": {
          "type": "array",
          "items": {
            "type": "number"
          }
        },
        "shadowRadius": {
          "type": "number",
          "minimum": 0
        },
        "shadowStyle": {
          "$ref": "#/definitions/shadowEnum",
          "description": "The blur style to apply on the shadow"
        },
        "borderRadius": {
          "type": [
            "number",
            "string"
          ],
          "description": "Border Radius with CSS-like notation (1 to 4 integers)",
          "minimum": 0
        },
        "borderColor": {
          "$ref": "#/definitions/Colors",
          "description": "Border color, starting with '0xFF' for full opacity"
        },
        "borderWidth": {
          "type": "number",
          "description": "The thickness of the border",
          "minimum": 0
        },
        "backgroundGradient": {
          "type": "object",
          "properties": {
            "colors": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Colors"
              },
              "description": "The list of colors used for the gradient"
            },
            "start": {
              "$ref": "#/definitions/alignment",
              "description": "The starting position of the gradient"
            },
            "end": {
              "$ref": "#/definitions/alignment",
              "description": "The ending position of the gradient"
            }
          },
          "additionalProperties": false
        },
        "backgroundColor": {
          "$ref": "#/definitions/Colors"
        },
        "backgroundImage": {
          "$ref": "#/definitions/backgroundImage"
        },
        "padding": {
          "type": [
            "number",
            "string"
          ],
          "description": "Padding with CSS-style value e.g. padding: 5 20 5"
        },
        "margin": {
          "type": [
            "number",
            "string"
          ],
          "description": "Margin with CSS-style notation e.g. margin: 5 20 5"
        },
        "width": {
          "type": "number",
          "minimum": 0
        },
        "height": {
          "type": "number",
          "minimum": 0
        }
      }
    },
    "fontName": {
      "type": "string",
      "enum": [
        "heading",
        "title",
        "subtitle"
      ]
    },
    "fontWeight": {
      "type": "string",
      "enum": [
        "light",
        "normal",
        "bold",
        "w100",
        "w200",
        "w300",
        "w400",
        "w500",
        "w600",
        "w700",
        "w800",
        "w900"
      ]
    },
    "Colors": {
      "anyOf": [
        {
          "type": "number"
        },
        {
          "$ref": "#/definitions/generalColors"
        },
        {
          "$ref": "#/definitions/colorPattern"
        }
      ],
      "default": "black"
    },
    "generalColors": {
      "type": "string",
      "enum": [
        "black",
        "red",
        "green"
      ]
    },
    "colorPattern": {
      "type": "string",
      "pattern": "^0x"
    },
    "overflow": {
      "type": "string",
      "enum": [
        "wrap",
        "visible",
        "clip",
        "ellipsis"
      ]
    },
    "textAlign": {
      "type": "string",
      "enum": [
        "start",
        "end",
        "center",
        "justify"
      ]
    },
    "textStyle": {
      "type": "string",
      "enum": [
        "normal",
        "italic",
        "underline",
        "strikethrough",
        "italic_underline",
        "italic_strikethrough"
      ]
    },
    "lineHeight": {
      "type": "string",
      "enum": [
        "default",
        "1.0",
        "1.15",
        "1.25",
        "1.5",
        "2.0",
        "2.5"
      ]
    },
    "shadowEnum": {
      "type": "string",
      "enum": [
        "normal",
        "solid"
      ]
    },
    "alignment": {
      "type": "string",
      "enum": [
        "topLeft",
        "topCenter",
        "topRight",
        "centerLeft",
        "center",
        "centerRight",
        "bottomLeft",
        "bottomCenter",
        "bottomRight"
      ]
    },
    "backgroundImage": {
      "type": "object",
      "properties": {
        "backgroundGradient": {
          "type": "object",
          "properties": {
            "source": {
              "type": "string",
              "description": "The Image URL to fill the background"
            },
            "fit": {
              "$ref": "#/definitions/fitEnum",
              "description": "How to fit the image within our width/height or our parent (if dimension is not specified)"
            },
            "alignment": {
              "$ref": "#/definitions/alignment"
            }
          },
          "additionalProperties": false
        }
      },
      "required": [
        "backgroundGradient"
      ],
      "additionalProperties": false
    },
    "fitEnum": {
      "type": "string",
      "enum": [
        "fill",
        "contain",
        "cover",
        "fitWidth",
        "fitHeight",
        "none",
        "scaleDown"
      ]
    },
    "Markdown": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "text": {
          "type": "string",
          "description": "Your text in markdown format"
        },
        "styles": {
          "$ref": "#/definitions/MarkdownStyles"
        }
      },
      "additionalProperties": false
    },
    "MarkdownStyles": {
      "type": "object",
      "properties": {
        "expanded": {
          "type": "boolean",
          "description": "If the parent is a Row or Column, this flag will stretch this widget in the appropriate direction. (e.g stretch horizontally for parent of type Row)"
        },
        "textStyle": {
          "$ref": "#/definitions/styleText",
          "description": "Styling for regular text. Default to theme's bodyMedium styling"
        },
        "linkStyle": {
          "$ref": "#/definitions/styleText",
          "description": "Styling for URL"
        }
      },
      "additionalProperties": false
    },
    "styleText": {
      "type": "object",
      "properties": {
        "fontSize": {
          "$ref": "#/definitions/integer"
        },
        "color": {
          "$ref": "#/definitions/Colors"
        },
        "decoration": {
          "$ref": "#/definitions/decoration"
        }
      },
      "additionalProperties": false
    },
    "integer": {
      "type": "number"
    },
    "decoration": {
      "type": "string",
      "enum": [
        "none",
        "lineThrough",
        "underline",
        "overline"
      ]
    },
    "Image": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "source": {
          "type": "string",
          "description": "URL to or asset name of the image. If the URL is used, it is highly recommended that the dimensions is set (either with width/height or other means) to prevent the UI jerkiness while loading"
        },
        "onTap": {
          "$ref": "#/definitions/Action",
          "description": "Call Ensemble's built-in functions or execute code"
        },
        "styles": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "placeholderColor": {
              "$ref": "#/definitions/Colors",
              "description": "The placeholder color while the image is loading."
            },
            "fit": {
              "$ref": "#/definitions/fitEnum",
              "description": "How to fit the image within our width/height or our parent (if dimension is not specified)"
            },
            "resizedWidth": {
              "type": "number",
              "description": "Images will be automatically resized (default to 800 width with no height set) before rendering. If you know the rough image width, set this number to be the same or a slightly larger width to optimize the loading time. To maintain the original aspect ratio, set either resizedWidth or resizedHeight, but not both. This setting is not supported on Web.",
              "minimum": 0,
              "maximum": 2000
            },
            "resizedHeight": {
              "type": "number",
              "description": "Images will be automatically resized (default to 800 width with no height set) before rendering. If you know the rough image height, set this number to be the same or a slightly larger height to optimize the loading time. To maintain the original aspect ratio, set either resizedWidth or resizedHeight, but not both. This setting is not supported on Web.",
              "minimum": 0,
              "maximum": 2000
            },
            "shadowColor": {
              "type": [
                "number",
                "string"
              ],
              "description": "Box shadow color starting with '0xFF' for full opacity"
            },
            "shadowOffset": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "shadowRadius": {
              "type": "number",
              "minimum": 0
            },
            "shadowStyle": {
              "$ref": "#/definitions/shadowEnum",
              "description": "The blur style to apply on the shadow"
            },
            "borderRadius": {
              "type": [
                "number",
                "string"
              ],
              "description": "Border Radius with CSS-like notation (1 to 4 integers)",
              "minimum": 0
            },
            "borderColor": {
              "$ref": "#/definitions/Colors",
              "description": "Border color, starting with '0xFF' for full opacity"
            },
            "borderWidth": {
              "type": "number",
              "description": "The thickness of the border",
              "minimum": 0
            },
            "backgroundGradient": {
              "type": "object",
              "properties": {
                "colors": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Colors"
                  },
                  "description": "The list of colors used for the gradient"
                },
                "start": {
                  "$ref": "#/definitions/alignment",
                  "description": "The starting position of the gradient"
                },
                "end": {
                  "$ref": "#/definitions/alignment",
                  "description": "The ending position of the gradient"
                }
              },
              "additionalProperties": false
            },
            "backgroundColor": {
              "$ref": "#/definitions/Colors"
            },
            "backgroundImage": {
              "$ref": "#/definitions/backgroundImage"
            },
            "padding": {
              "type": [
                "number",
                "string"
              ],
              "description": "Padding with CSS-style value e.g. padding: 5 20 5"
            },
            "margin": {
              "type": [
                "number",
                "string"
              ],
              "description": "Margin with CSS-style notation e.g. margin: 5 20 5"
            },
            "width": {
              "type": "number",
              "minimum": 0
            },
            "height": {
              "type": "number",
              "minimum": 0
            },
            "expanded": {
              "type": "boolean",
              "description": "If the parent is a Row or Column, this flag will stretch this widget in the appropriate direction. (e.g stretch horizontally for parent of type Row)"
            }
          }
        }
      },
      "required": [
        "source"
      ],
      "additionalProperties": false
    },
    "Action": {
      "anyOf": [
        {
          "type": "object",
          "properties": {
            "invokeAPIAction": {
              "$ref": "#/definitions/InvokeAPIAction"
            }
          },
          "required": [
            "invokeAPIAction"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "executeCodeAction": {
              "$ref": "#/definitions/ExecuteCodeAction"
            }
          },
          "required": [
            "executeCodeAction"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "navigateScreenAction": {
              "$ref": "#/definitions/NavigateScreenAction"
            }
          },
          "required": [
            "navigateScreenAction"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "navigateModalScreenAction": {
              "$ref": "#/definitions/NavigateModalScreenAction"
            }
          },
          "required": [
            "navigateModalScreenAction"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "navigateBackAction": {
              "$ref": "#/definitions/NavigateBackAction"
            }
          },
          "required": [
            "navigateBackAction"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "openCameraAction": {
              "$ref": "#/definitions/OpenCameraAction"
            }
          },
          "required": [
            "openCameraAction"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "showDialogAction": {
              "$ref": "#/definitions/ShowDialogAction"
            }
          },
          "required": [
            "showDialogAction"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "closeAllDialogsAction": {
              "$ref": "#/definitions/CloseAllDialogsAction"
            }
          },
          "required": [
            "closeAllDialogsAction"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "startTimerAction": {
              "$ref": "#/definitions/StartTimerAction"
            }
          },
          "required": [
            "startTimerAction"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "stopTimerAction": {
              "$ref": "#/definitions/StopTimerAction"
            }
          },
          "required": [
            "stopTimerAction"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "showToastAction": {
              "$ref": "#/definitions/ShowToastAction"
            }
          },
          "required": [
            "showToastAction"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "getLocationActionAction": {
              "$ref": "#/definitions/GetLocationActionAction"
            }
          },
          "required": [
            "getLocationActionAction"
          ],
          "additionalProperties": false
        }
      ]
    },
    "InvokeAPIAction": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "inputs": {
          "type": "object",
          "additionalProperties": false
        },
        "onResponse": {
          "$ref": "#/definitions/Action"
        },
        "onError": {
          "$ref": "#/definitions/Action"
        }
      },
      "required": [
        "name"
      ],
      "additionalProperties": false
    },
    "ExecuteCodeAction": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string"
        },
        "onComplete": {
          "$ref": "#/definitions/Action"
        }
      },
      "required": [
        "body"
      ],
      "additionalProperties": false
    },
    "NavigateScreenAction": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "inputs": {
          "type": "object",
          "additionalProperties": false
        },
        "options": {
          "type": "object",
          "properties": {
            "replaceCurrentScreen": {
              "type": "boolean"
            },
            "clearAllScreens": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      },
      "required": [
        "name"
      ],
      "additionalProperties": false
    },
    "NavigateModalScreenAction": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "inputs": {
          "type": "object",
          "additionalProperties": false
        },
        "onModalDismiss": {
          "$ref": "#/definitions/Action"
        }
      },
      "required": [
        "name"
      ],
      "additionalProperties": false
    },
    "NavigateBackAction": {
      "type": "object",
      "additionalProperties": false
    },
    "OpenCameraAction": {
      "type": "object",
      "additionalProperties": false
    },
    "ShowDialogAction": {
      "type": "object",
      "properties": {
        "widget": {
          "$ref": "#/definitions/Widgets"
        },
        "options": {
          "$ref": "#/definitions/DialogOptions"
        },
        "onDialogDismiss": {
          "$ref": "#/definitions/Action"
        }
      },
      "required": [
        "widget"
      ],
      "additionalProperties": false
    },
    "DialogOptions": {
      "type": "object",
      "properties": {
        "minWidth": {
          "$ref": "#/definitions/integer",
          "minimum": 0
        },
        "maxWidth": {
          "$ref": "#/definitions/integer"
        },
        "minHeight": {
          "$ref": "#/definitions/integer",
          "minimum": 0
        },
        "maxHeight": {
          "$ref": "#/definitions/integer"
        },
        "horizontalOffset": {
          "type": "number",
          "description": "Offset the dialog's position horizontally, with -1.0 for the screen's left and 1.0 for the screen's right. (default is 0 for centering horizontally)",
          "minimum": -1,
          "maximum": 1
        },
        "verticalOffset": {
          "type": "number",
          "description": "Offset the dialog's position vertically, with -1.0 for the screen's top and 1.0 for the screen's bottom. (default is 0 for centering vertically)",
          "minimum": -1,
          "maximum": 1
        },
        "style": {
          "$ref": "#/definitions/styleSelection"
        }
      },
      "additionalProperties": false
    },
    "styleSelection": {
      "type": "string",
      "enum": [
        "default",
        "none"
      ]
    },
    "CloseAllDialogsAction": {
      "type": "object",
      "additionalProperties": false
    },
    "StartTimerAction": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "onTimer": {
          "$ref": "#/definitions/Action"
        },
        "onTimerComplete": {
          "$ref": "#/definitions/Action"
        },
        "options": {
          "$ref": "#/definitions/TimerOptions"
        }
      },
      "required": [
        "onTimer"
      ],
      "additionalProperties": false
    },
    "TimerOptions": {
      "type": "object",
      "properties": {
        "isGlobal": {
          "type": "boolean"
        },
        "startAfter": {
          "$ref": "#/definitions/integer",
          "description": "Delay the timer's start by this number of seconds. If not specified and repeat is true, repeatInterval will be used. If none is specified, there will be no initial delay",
          "minimum": 0
        },
        "repeat": {
          "type": "boolean"
        },
        "repeatInterval": {
          "$ref": "#/definitions/integer",
          "description": "Trigger the timer periodically at this repeatInterval (in seconds)",
          "minimum": 1
        },
        "maxNumberOfTimes": {
          "$ref": "#/definitions/integer",
          "description": "Set the max number of times the timer will triggers, if repeat is true",
          "minimum": 1
        }
      },
      "additionalProperties": false
    },
    "StopTimerAction": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "additionalProperties": false
    },
    "ShowToastAction": {
      "type": "object",
      "properties": {
        "value": {
          "anyOf": [
            {
              "$ref": "#/definitions/Widgets"
            },
            {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "message"
              ],
              "additionalProperties": false
            }
          ]
        },
        "message": {
          "type": "string"
        },
        "widget": {
          "$ref": "#/definitions/Widgets"
        },
        "options": {
          "$ref": "#/definitions/ShowToastOptions"
        },
        "styles": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "shadowColor": {
              "type": [
                "number",
                "string"
              ],
              "description": "Box shadow color starting with '0xFF' for full opacity"
            },
            "shadowRadius": {
              "type": "number",
              "minimum": 0
            },
            "shadowOffset": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "borderRadius": {
              "type": [
                "number",
                "string"
              ],
              "description": "Border Radius with CSS-like notation (1 to 4 integers)",
              "minimum": 0
            },
            "padding": {
              "type": [
                "number",
                "string"
              ],
              "description": "Padding with CSS-style value e.g. padding: 5 20 5"
            },
            "backgroundColor": {
              "$ref": "#/definitions/Colors"
            }
          }
        }
      },
      "required": [
        "value"
      ],
      "additionalProperties": false
    },
    "ShowToastOptions": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/toastStyle"
        },
        "dismissible": {
          "type": "boolean"
        },
        "position": {
          "$ref": "#/definitions/toastPosition"
        },
        "duration": {
          "$ref": "#/definitions/integer",
          "description": "The number of seconds after the toast is dismissed",
          "minimum": 1
        }
      },
      "additionalProperties": false
    },
    "toastStyle": {
      "type": "string",
      "enum": [
        "success",
        "error",
        "warning",
        "info"
      ]
    },
    "toastPosition": {
      "type": "string",
      "enum": [
        "top",
        "topLeft",
        "topRight",
        "center",
        "centerLeft",
        "centerRight",
        "bottom",
        "bottomLeft",
        "bottomRight"
      ]
    },
    "GetLocationActionAction": {
      "type": "object",
      "properties": {
        "options": {
          "type": "object",
          "properties": {
            "recurring": {
              "type": "boolean"
            },
            "recurringDistanceFilter": {
              "type": "number",
              "description": "If recurring, the minimum distance (in meters) the device has moved before new location is returned. (default: 1000 meters, minimum: 50 meters)",
              "minimum": 50
            }
          },
          "additionalProperties": false
        },
        "onLocationReceived": {
          "$ref": "#/definitions/Action"
        },
        "onError": {
          "$ref": "#/definitions/Action"
        }
      },
      "additionalProperties": false
    },
    "Lottie": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "source": {
          "type": "string",
          "description": "URL or asset name of the Lottie json file"
        },
        "styles": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "repeat": {
              "type": "boolean",
              "description": "Whether we should repeat the animation (default true)"
            },
            "fit": {
              "$ref": "#/definitions/fitEnum",
              "description": "How to fit the Lottie animation within our width/height or our parent (if dimension is not specified)"
            },
            "width": {
              "type": "number",
              "minimum": 0
            },
            "height": {
              "type": "number",
              "minimum": 0
            },
            "shadowColor": {
              "type": [
                "number",
                "string"
              ],
              "description": "Box shadow color starting with '0xFF' for full opacity"
            },
            "shadowOffset": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "shadowRadius": {
              "type": "number",
              "minimum": 0
            },
            "shadowStyle": {
              "$ref": "#/definitions/shadowEnum",
              "description": "The blur style to apply on the shadow"
            },
            "borderRadius": {
              "type": [
                "number",
                "string"
              ],
              "description": "Border Radius with CSS-like notation (1 to 4 integers)",
              "minimum": 0
            },
            "borderColor": {
              "$ref": "#/definitions/Colors",
              "description": "Border color, starting with '0xFF' for full opacity"
            },
            "borderWidth": {
              "type": "number",
              "description": "The thickness of the border",
              "minimum": 0
            },
            "backgroundGradient": {
              "type": "object",
              "properties": {
                "colors": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Colors"
                  },
                  "description": "The list of colors used for the gradient"
                },
                "start": {
                  "$ref": "#/definitions/alignment",
                  "description": "The starting position of the gradient"
                },
                "end": {
                  "$ref": "#/definitions/alignment",
                  "description": "The ending position of the gradient"
                }
              },
              "additionalProperties": false
            },
            "backgroundColor": {
              "$ref": "#/definitions/Colors"
            },
            "backgroundImage": {
              "$ref": "#/definitions/backgroundImage"
            },
            "padding": {
              "type": [
                "number",
                "string"
              ],
              "description": "Padding with CSS-style value e.g. padding: 5 20 5"
            },
            "margin": {
              "type": [
                "number",
                "string"
              ],
              "description": "Margin with CSS-style notation e.g. margin: 5 20 5"
            },
            "expanded": {
              "type": "boolean",
              "description": "If the parent is a Row or Column, this flag will stretch this widget in the appropriate direction. (e.g stretch horizontally for parent of type Row)"
            }
          }
        }
      },
      "required": [
        "source"
      ],
      "additionalProperties": false
    },
    "Icon": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "icon": {
          "type": "string",
          "description": "Icon name from Material Icons or Font Awesome"
        },
        "library": {
          "$ref": "#/definitions/iconLibrary"
        },
        "onTap": {
          "$ref": "#/definitions/Action",
          "description": "Call Ensemble's built-in functions or execute code"
        },
        "styles": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "size": {
              "type": "number"
            },
            "color": {
              "$ref": "#/definitions/Colors",
              "description": "The color of the icon"
            },
            "splashColor": {
              "$ref": "#/definitions/Colors",
              "description": "If onTap is defined, this color will show up as a splash effect upon tapping the icon. Note that the effect only  happens if backgroundColor is not set."
            },
            "shadowColor": {
              "type": [
                "number",
                "string"
              ],
              "description": "Box shadow color starting with '0xFF' for full opacity"
            },
            "shadowOffset": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "shadowRadius": {
              "type": "number",
              "minimum": 0
            },
            "shadowStyle": {
              "$ref": "#/definitions/shadowEnum",
              "description": "The blur style to apply on the shadow"
            },
            "borderRadius": {
              "type": [
                "number",
                "string"
              ],
              "description": "Border Radius with CSS-like notation (1 to 4 integers)",
              "minimum": 0
            },
            "borderColor": {
              "$ref": "#/definitions/Colors",
              "description": "Border color, starting with '0xFF' for full opacity"
            },
            "borderWidth": {
              "type": "number",
              "description": "The thickness of the border",
              "minimum": 0
            },
            "backgroundGradient": {
              "type": "object",
              "properties": {
                "colors": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Colors"
                  },
                  "description": "The list of colors used for the gradient"
                },
                "start": {
                  "$ref": "#/definitions/alignment",
                  "description": "The starting position of the gradient"
                },
                "end": {
                  "$ref": "#/definitions/alignment",
                  "description": "The ending position of the gradient"
                }
              },
              "additionalProperties": false
            },
            "backgroundColor": {
              "$ref": "#/definitions/Colors"
            },
            "backgroundImage": {
              "$ref": "#/definitions/backgroundImage"
            },
            "padding": {
              "type": [
                "number",
                "string"
              ],
              "description": "Padding with CSS-style value e.g. padding: 5 20 5"
            },
            "margin": {
              "type": [
                "number",
                "string"
              ],
              "description": "Margin with CSS-style notation e.g. margin: 5 20 5"
            },
            "expanded": {
              "type": "boolean",
              "description": "If the parent is a Row or Column, this flag will stretch this widget in the appropriate direction. (e.g stretch horizontally for parent of type Row)"
            }
          }
        }
      },
      "required": [
        "icon"
      ],
      "additionalProperties": false
    },
    "iconLibrary": {
      "type": "string",
      "enum": [
        "default",
        "fontAwesome"
      ]
    },
    "Button": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "label": {
          "type": "string",
          "description": "The button label"
        },
        "enabled": {
          "type": "boolean"
        },
        "submitForm": {
          "type": "boolean",
          "description": "If the button is inside a Form and upon on tap, it will execute the form's onSubmit action if this property is TRUE"
        },
        "onTap": {
          "$ref": "#/definitions/Action",
          "description": "Call Ensemble's built-in functions or execute code"
        },
        "styles": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "outline": {
              "type": "boolean",
              "description": "Whether the button should have an outline border instead of filled background"
            },
            "color": {
              "type": [
                "number",
                "string"
              ],
              "description": "Set the color for the button label starting with '0xFF' for full opacity"
            },
            "fontSize": {
              "type": "number",
              "minimum": 6
            },
            "fontWeight": {
              "$ref": "#/definitions/fontWeight"
            },
            "shadowColor": {
              "type": [
                "number",
                "string"
              ],
              "description": "Box shadow color starting with '0xFF' for full opacity"
            },
            "shadowOffset": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "shadowRadius": {
              "type": "number",
              "minimum": 0
            },
            "shadowStyle": {
              "$ref": "#/definitions/shadowEnum",
              "description": "The blur style to apply on the shadow"
            },
            "borderRadius": {
              "type": [
                "number",
                "string"
              ],
              "description": "Border Radius with CSS-like notation (1 to 4 integers)",
              "minimum": 0
            },
            "borderColor": {
              "$ref": "#/definitions/Colors",
              "description": "Border color, starting with '0xFF' for full opacity"
            },
            "borderWidth": {
              "type": "number",
              "description": "The thickness of the border",
              "minimum": 0
            },
            "backgroundGradient": {
              "type": "object",
              "properties": {
                "colors": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Colors"
                  },
                  "description": "The list of colors used for the gradient"
                },
                "start": {
                  "$ref": "#/definitions/alignment",
                  "description": "The starting position of the gradient"
                },
                "end": {
                  "$ref": "#/definitions/alignment",
                  "description": "The ending position of the gradient"
                }
              },
              "additionalProperties": false
            },
            "backgroundColor": {
              "$ref": "#/definitions/Colors"
            },
            "backgroundImage": {
              "$ref": "#/definitions/backgroundImage"
            },
            "padding": {
              "type": [
                "number",
                "string"
              ],
              "description": "Padding with CSS-style value e.g. padding: 5 20 5"
            },
            "margin": {
              "type": [
                "number",
                "string"
              ],
              "description": "Margin with CSS-style notation e.g. margin: 5 20 5"
            },
            "width": {
              "type": "number",
              "minimum": 0
            },
            "height": {
              "type": "number",
              "minimum": 0
            },
            "expanded": {
              "type": "boolean",
              "description": "If the parent is a Row or Column, this flag will stretch this widget in the appropriate direction. (e.g stretch horizontally for parent of type Row)"
            }
          }
        }
      },
      "required": [
        "label"
      ],
      "additionalProperties": false
    },
    "Divider": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "styles": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "direction": {
              "$ref": "#/definitions/directionEnum",
              "description": "Whether to display a horizontal divider (default) or vertical divider."
            },
            "thickness": {
              "type": "number"
            },
            "color": {
              "type": [
                "number",
                "string"
              ],
              "description": "The line color starting with '0xFF' for full opacity"
            },
            "indent": {
              "type": "number",
              "description": "The leading gap before the line starts"
            },
            "endIndent": {
              "type": "number",
              "description": "The ending gap after the line ends"
            },
            "margin": {
              "type": [
                "number",
                "string"
              ],
              "description": "Margin with CSS-style notation e.g. margin: 5 20 5"
            },
            "expanded": {
              "type": "boolean",
              "description": "If the parent is a Row or Column, this flag will stretch this widget in the appropriate direction. (e.g stretch horizontally for parent of type Row)"
            }
          }
        }
      },
      "additionalProperties": false
    },
    "directionEnum": {
      "type": "string",
      "enum": [
        "horizontal",
        "vertical"
      ]
    },
    "Html": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "text": {
          "type": "string",
          "description": "Enter the HTML text"
        }
      },
      "additionalProperties": false
    },
    "OnOff": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "maxWidth": {
          "$ref": "#/definitions/integer",
          "description": "The max width of this Input widget (default 700)",
          "minimum": 0,
          "maximum": 5000
        },
        "label": {
          "type": "string",
          "description": "Label for your widget"
        },
        "labelHint": {
          "type": "string",
          "description": "Hint text on your label"
        },
        "hintText": {
          "type": "string",
          "description": "Hint text explaining your widget"
        },
        "required": {
          "type": "boolean"
        },
        "enabled": {
          "type": "boolean"
        },
        "icon": {
          "$ref": "#/definitions/HasIcon",
          "description": "The icon to show before the Input field"
        },
        "onChange": {
          "$ref": "#/definitions/Action",
          "description": "Call Ensemble's built-in functions or execute code when the input changes. Note for free-form text input, this event only dispatches if the text changes AND the focus is lost (e.g. clicking on button)"
        },
        "styles": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "variant": {
              "$ref": "#/definitions/inputVariant",
              "description": "Select a pre-defined look and feel for this Input widget. This property can be defined in the theme to apply to all Input widgets."
            },
            "contentPadding": {
              "anyOf": [
                {
                  "$ref": "#/definitions/integer"
                },
                {
                  "type": "string"
                }
              ],
              "description": "Padding around your input content with CSS-style notation e.g. margin: 5 20 5"
            },
            "fillColor": {
              "$ref": "#/definitions/Colors",
              "description": "The fill color for this input fields. This property can be defined in the theme to apply to all Input widgets."
            },
            "borderRadius": {
              "$ref": "#/definitions/integer",
              "description": "The border radius for this Input widget. This property can be defined in the theme to apply to all Input widgets.",
              "minimum": 0
            },
            "borderWidth": {
              "$ref": "#/definitions/integer",
              "description": "The border width for this Input widget. This property can be defined in the theme to apply to all Input widgets.",
              "minimum": 0
            },
            "borderColor": {
              "$ref": "#/definitions/Colors",
              "description": "The base border color for this input widget. This border color determines the look and feel of your input, while the other colors are overrides for different states. This property can be defined in the theme to apply to all Input widgets."
            },
            "enabledBorderColor": {
              "$ref": "#/definitions/Colors",
              "description": "The border color for this input field if enabled. This property can be defined in the theme to apply to all Input widgets."
            },
            "disabledBorderColor": {
              "$ref": "#/definitions/Colors",
              "description": "The border color for this input field if disabled. This property can be defined in the theme to apply to all Input widgets."
            },
            "errorBorderColor": {
              "$ref": "#/definitions/Colors",
              "description": "The border color  when there are errors on this input field. This property can be defined in the theme to apply to all Input widgets."
            },
            "focusedBorderColor": {
              "$ref": "#/definitions/Colors",
              "description": "The border color when this input field is receiving focus. This property can be defined in the theme to apply to all Input widgets."
            },
            "focusedErrorBorderColor": {
              "$ref": "#/definitions/Colors"
            },
            "fontSize": {
              "type": "number",
              "minimum": 6
            },
            "expanded": {
              "type": "boolean",
              "description": "If the parent is a Row or Column, this flag will stretch this widget in the appropriate direction. (e.g stretch horizontally for parent of type Row)"
            }
          }
        },
        "value": {
          "type": "boolean"
        },
        "leadingText": {
          "type": "string"
        },
        "trailingText": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "HasIcon": {
      "type": "object",
      "properties": {
        "name": {
          "type": [
            "string",
            "number"
          ],
          "description": "The name of the icon"
        },
        "library": {
          "$ref": "#/definitions/iconLibrary",
          "description": "Which icon library to use."
        },
        "color": {
          "$ref": "#/definitions/Colors"
        },
        "size": {
          "type": "number",
          "minimum": 0
        }
      },
      "additionalProperties": false,
      "description": "Specifies the icon to use. You can also use the short-handed syntax 'iconName iconLibrary')"
    },
    "inputVariant": {
      "type": "string",
      "enum": [
        "underline",
        "box"
      ]
    },
    "PasswordInput": {
      "type": "object",
      "properties": {
        "validator": {
          "type": "object",
          "properties": {
            "minLength": {
              "$ref": "#/definitions/integer",
              "description": "The minimum number of characters",
              "minimum": 0
            },
            "maxLength": {
              "$ref": "#/definitions/integer",
              "description": "The maximum number of characters",
              "minimum": 0
            },
            "regex": {
              "type": "string",
              "description": "The Regular Expression the input will need to match"
            },
            "regexError": {
              "type": "string",
              "description": "The customized error message to show when the input does not match the provided regex."
            }
          },
          "additionalProperties": false
        },
        "id": {
          "type": "string"
        },
        "maxWidth": {
          "$ref": "#/definitions/integer",
          "description": "The max width of this Input widget (default 700)",
          "minimum": 0,
          "maximum": 5000
        },
        "label": {
          "type": "string",
          "description": "Label for your widget"
        },
        "labelHint": {
          "type": "string",
          "description": "Hint text on your label"
        },
        "hintText": {
          "type": "string",
          "description": "Hint text explaining your widget"
        },
        "required": {
          "type": "boolean"
        },
        "enabled": {
          "type": "boolean"
        },
        "icon": {
          "$ref": "#/definitions/HasIcon",
          "description": "The icon to show before the Input field"
        },
        "onChange": {
          "$ref": "#/definitions/Action",
          "description": "Call Ensemble's built-in functions or execute code when the input changes. Note for free-form text input, this event only dispatches if the text changes AND the focus is lost (e.g. clicking on button)"
        },
        "styles": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "variant": {
              "$ref": "#/definitions/inputVariant",
              "description": "Select a pre-defined look and feel for this Input widget. This property can be defined in the theme to apply to all Input widgets."
            },
            "contentPadding": {
              "anyOf": [
                {
                  "$ref": "#/definitions/integer"
                },
                {
                  "type": "string"
                }
              ],
              "description": "Padding around your input content with CSS-style notation e.g. margin: 5 20 5"
            },
            "fillColor": {
              "$ref": "#/definitions/Colors",
              "description": "The fill color for this input fields. This property can be defined in the theme to apply to all Input widgets."
            },
            "borderRadius": {
              "$ref": "#/definitions/integer",
              "description": "The border radius for this Input widget. This property can be defined in the theme to apply to all Input widgets.",
              "minimum": 0
            },
            "borderWidth": {
              "$ref": "#/definitions/integer",
              "description": "The border width for this Input widget. This property can be defined in the theme to apply to all Input widgets.",
              "minimum": 0
            },
            "borderColor": {
              "$ref": "#/definitions/Colors",
              "description": "The base border color for this input widget. This border color determines the look and feel of your input, while the other colors are overrides for different states. This property can be defined in the theme to apply to all Input widgets."
            },
            "enabledBorderColor": {
              "$ref": "#/definitions/Colors",
              "description": "The border color for this input field if enabled. This property can be defined in the theme to apply to all Input widgets."
            },
            "disabledBorderColor": {
              "$ref": "#/definitions/Colors",
              "description": "The border color for this input field if disabled. This property can be defined in the theme to apply to all Input widgets."
            },
            "errorBorderColor": {
              "$ref": "#/definitions/Colors",
              "description": "The border color  when there are errors on this input field. This property can be defined in the theme to apply to all Input widgets."
            },
            "focusedBorderColor": {
              "$ref": "#/definitions/Colors",
              "description": "The border color when this input field is receiving focus. This property can be defined in the theme to apply to all Input widgets."
            },
            "focusedErrorBorderColor": {
              "$ref": "#/definitions/Colors"
            },
            "fontSize": {
              "type": "number",
              "minimum": 6
            },
            "expanded": {
              "type": "boolean",
              "description": "If the parent is a Row or Column, this flag will stretch this widget in the appropriate direction. (e.g stretch horizontally for parent of type Row)"
            }
          }
        },
        "onKeyPress": {
          "$ref": "#/definitions/Action",
          "description": "On every keystroke, call Ensemble's built-in functions or execute code"
        },
        "keyboardAction": {
          "$ref": "#/definitions/keyboardAction"
        },
        "obscureToggle": {
          "type": "boolean",
          "description": "enable the toggling between plain and obscure text."
        }
      },
      "additionalProperties": false
    },
    "keyboardAction": {
      "type": "string",
      "enum": [
        "done",
        "go",
        "search",
        "send",
        "next",
        "previous"
      ],
      "description": "Specify the action key on native device's soft keyboard"
    },
    "TextInput": {
      "type": "object",
      "properties": {
        "validator": {
          "type": "object",
          "properties": {
            "minLength": {
              "$ref": "#/definitions/integer",
              "description": "The minimum number of characters",
              "minimum": 0
            },
            "maxLength": {
              "$ref": "#/definitions/integer",
              "description": "The maximum number of characters",
              "minimum": 0
            },
            "regex": {
              "type": "string",
              "description": "The Regular Expression the input will need to match"
            },
            "regexError": {
              "type": "string",
              "description": "The customized error message to show when the input does not match the provided regex."
            }
          },
          "additionalProperties": false
        },
        "id": {
          "type": "string"
        },
        "maxWidth": {
          "$ref": "#/definitions/integer",
          "description": "The max width of this Input widget (default 700)",
          "minimum": 0,
          "maximum": 5000
        },
        "label": {
          "type": "string",
          "description": "Label for your widget"
        },
        "labelHint": {
          "type": "string",
          "description": "Hint text on your label"
        },
        "hintText": {
          "type": "string",
          "description": "Hint text explaining your widget"
        },
        "required": {
          "type": "boolean"
        },
        "enabled": {
          "type": "boolean"
        },
        "icon": {
          "$ref": "#/definitions/HasIcon",
          "description": "The icon to show before the Input field"
        },
        "onChange": {
          "$ref": "#/definitions/Action",
          "description": "Call Ensemble's built-in functions or execute code when the input changes. Note for free-form text input, this event only dispatches if the text changes AND the focus is lost (e.g. clicking on button)"
        },
        "styles": {
          "type": "object",
          "properties": {
            "fontSize": {
              "type": "number",
              "minimum": 6
            }
          },
          "additionalProperties": false
        },
        "onKeyPress": {
          "$ref": "#/definitions/Action",
          "description": "On every keystroke, call Ensemble's built-in functions or execute code"
        },
        "value": {
          "type": "string",
          "description": "Specifying the value of your Text Input"
        },
        "inputType": {
          "$ref": "#/definitions/inputType",
          "description": "Pick a predefined input type"
        },
        "keyboardAction": {
          "$ref": "#/definitions/keyboardAction"
        },
        "obscureText": {
          "type": "boolean"
        },
        "obscureToggle": {
          "type": "boolean",
          "description": "enable the toggling between plain and obscure text."
        }
      },
      "additionalProperties": false
    },
    "inputType": {
      "type": "string",
      "enum": [
        "default",
        "email",
        "phone",
        "ipAddress"
      ]
    },
    "Progress": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "display": {
          "$ref": "#/definitions/progressEnum"
        },
        "countdown": {
          "type": "number",
          "description": "Show the progress percentage based on the number of seconds specified here",
          "minimum": 0
        },
        "onCountdownComplete": {
          "$ref": "#/definitions/Action",
          "description": "Execute this Action when the countdown comes to 0"
        },
        "styles": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "backgroundColor": {
              "$ref": "#/definitions/Colors"
            },
            "size": {
              "type": "number",
              "description": "Specifies the width (progress bar) or the diameter (circular progress indicator)",
              "minimum": 10
            },
            "thickness": {
              "type": "number",
              "description": "Specifies the thickness of the indicator (for progress bar this is the height)",
              "minimum": 1
            },
            "color": {
              "$ref": "#/definitions/Colors"
            },
            "expanded": {
              "type": "boolean",
              "description": "If the parent is a Row or Column, this flag will stretch this widget in the appropriate direction. (e.g stretch horizontally for parent of type Row)"
            }
          }
        }
      },
      "additionalProperties": false
    },
    "progressEnum": {
      "type": "string",
      "enum": [
        "linear",
        "circular"
      ]
    },
    "QRCode": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "description": "The data to generate the QR code"
        },
        "styles": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "size": {
              "type": "number",
              "description": "Specify the width/height of the QR Code. Default: 160"
            },
            "color": {
              "$ref": "#/definitions/Colors",
              "description": "Set the color for the QR code drawing"
            },
            "shadowColor": {
              "type": [
                "number",
                "string"
              ],
              "description": "Box shadow color starting with '0xFF' for full opacity"
            },
            "shadowOffset": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "shadowRadius": {
              "type": "number",
              "minimum": 0
            },
            "shadowStyle": {
              "$ref": "#/definitions/shadowEnum",
              "description": "The blur style to apply on the shadow"
            },
            "borderRadius": {
              "type": [
                "number",
                "string"
              ],
              "description": "Border Radius with CSS-like notation (1 to 4 integers)",
              "minimum": 0
            },
            "borderColor": {
              "$ref": "#/definitions/Colors",
              "description": "Border color, starting with '0xFF' for full opacity"
            },
            "borderWidth": {
              "type": "number",
              "description": "The thickness of the border",
              "minimum": 0
            },
            "backgroundGradient": {
              "type": "object",
              "properties": {
                "colors": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Colors"
                  },
                  "description": "The list of colors used for the gradient"
                },
                "start": {
                  "$ref": "#/definitions/alignment",
                  "description": "The starting position of the gradient"
                },
                "end": {
                  "$ref": "#/definitions/alignment",
                  "description": "The ending position of the gradient"
                }
              },
              "additionalProperties": false
            },
            "backgroundColor": {
              "$ref": "#/definitions/Colors"
            },
            "backgroundImage": {
              "$ref": "#/definitions/backgroundImage"
            },
            "padding": {
              "type": [
                "number",
                "string"
              ],
              "description": "Padding with CSS-style value e.g. padding: 5 20 5"
            },
            "margin": {
              "type": [
                "number",
                "string"
              ],
              "description": "Margin with CSS-style notation e.g. margin: 5 20 5"
            },
            "expanded": {
              "type": "boolean",
              "description": "If the parent is a Row or Column, this flag will stretch this widget in the appropriate direction. (e.g stretch horizontally for parent of type Row)"
            }
          }
        }
      },
      "required": [
        "value"
      ],
      "additionalProperties": false
    },
    "SelectOne": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "maxWidth": {
          "$ref": "#/definitions/integer",
          "description": "The max width of this Input widget (default 700)",
          "minimum": 0,
          "maximum": 5000
        },
        "label": {
          "type": "string",
          "description": "Label for your widget"
        },
        "labelHint": {
          "type": "string",
          "description": "Hint text on your label"
        },
        "hintText": {
          "type": "string",
          "description": "Hint text explaining your widget"
        },
        "required": {
          "type": "boolean"
        },
        "enabled": {
          "type": "boolean"
        },
        "icon": {
          "$ref": "#/definitions/HasIcon",
          "description": "The icon to show before the Input field"
        },
        "onChange": {
          "$ref": "#/definitions/Action",
          "description": "Call Ensemble's built-in functions or execute code when the input changes. Note for free-form text input, this event only dispatches if the text changes AND the focus is lost (e.g. clicking on button)"
        },
        "styles": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "variant": {
              "$ref": "#/definitions/inputVariant",
              "description": "Select a pre-defined look and feel for this Input widget. This property can be defined in the theme to apply to all Input widgets."
            },
            "contentPadding": {
              "anyOf": [
                {
                  "$ref": "#/definitions/integer"
                },
                {
                  "type": "string"
                }
              ],
              "description": "Padding around your input content with CSS-style notation e.g. margin: 5 20 5"
            },
            "fillColor": {
              "$ref": "#/definitions/Colors",
              "description": "The fill color for this input fields. This property can be defined in the theme to apply to all Input widgets."
            },
            "borderRadius": {
              "$ref": "#/definitions/integer",
              "description": "The border radius for this Input widget. This property can be defined in the theme to apply to all Input widgets.",
              "minimum": 0
            },
            "borderWidth": {
              "$ref": "#/definitions/integer",
              "description": "The border width for this Input widget. This property can be defined in the theme to apply to all Input widgets.",
              "minimum": 0
            },
            "borderColor": {
              "$ref": "#/definitions/Colors",
              "description": "The base border color for this input widget. This border color determines the look and feel of your input, while the other colors are overrides for different states. This property can be defined in the theme to apply to all Input widgets."
            },
            "enabledBorderColor": {
              "$ref": "#/definitions/Colors",
              "description": "The border color for this input field if enabled. This property can be defined in the theme to apply to all Input widgets."
            },
            "disabledBorderColor": {
              "$ref": "#/definitions/Colors",
              "description": "The border color for this input field if disabled. This property can be defined in the theme to apply to all Input widgets."
            },
            "errorBorderColor": {
              "$ref": "#/definitions/Colors",
              "description": "The border color  when there are errors on this input field. This property can be defined in the theme to apply to all Input widgets."
            },
            "focusedBorderColor": {
              "$ref": "#/definitions/Colors",
              "description": "The border color when this input field is receiving focus. This property can be defined in the theme to apply to all Input widgets."
            },
            "focusedErrorBorderColor": {
              "$ref": "#/definitions/Colors"
            },
            "fontSize": {
              "type": "number",
              "minimum": 6
            },
            "expanded": {
              "type": "boolean",
              "description": "If the parent is a Row or Column, this flag will stretch this widget in the appropriate direction. (e.g stretch horizontally for parent of type Row)"
            }
          }
        },
        "value": {
          "description": "Select a value that matches one of the items. If Items are Objects, it should match the value key"
        },
        "items": {
          "type": "array",
          "items": {},
          "description": "List of values, or Objects with value/label pairs"
        }
      },
      "additionalProperties": false
    },
    "Spacer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "styles": {
          "type": "object",
          "properties": {
            "size": {
              "type": "number"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "Time": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "maxWidth": {
          "$ref": "#/definitions/integer",
          "description": "The max width of this Input widget (default 700)",
          "minimum": 0,
          "maximum": 5000
        },
        "label": {
          "type": "string",
          "description": "Label for your widget"
        },
        "labelHint": {
          "type": "string",
          "description": "Hint text on your label"
        },
        "hintText": {
          "type": "string",
          "description": "Hint text explaining your widget"
        },
        "required": {
          "type": "boolean"
        },
        "enabled": {
          "type": "boolean"
        },
        "icon": {
          "$ref": "#/definitions/HasIcon",
          "description": "The icon to show before the Input field"
        },
        "onChange": {
          "$ref": "#/definitions/Action",
          "description": "Call Ensemble's built-in functions or execute code when the input changes. Note for free-form text input, this event only dispatches if the text changes AND the focus is lost (e.g. clicking on button)"
        },
        "styles": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "variant": {
              "$ref": "#/definitions/inputVariant",
              "description": "Select a pre-defined look and feel for this Input widget. This property can be defined in the theme to apply to all Input widgets."
            },
            "contentPadding": {
              "anyOf": [
                {
                  "$ref": "#/definitions/integer"
                },
                {
                  "type": "string"
                }
              ],
              "description": "Padding around your input content with CSS-style notation e.g. margin: 5 20 5"
            },
            "fillColor": {
              "$ref": "#/definitions/Colors",
              "description": "The fill color for this input fields. This property can be defined in the theme to apply to all Input widgets."
            },
            "borderRadius": {
              "$ref": "#/definitions/integer",
              "description": "The border radius for this Input widget. This property can be defined in the theme to apply to all Input widgets.",
              "minimum": 0
            },
            "borderWidth": {
              "$ref": "#/definitions/integer",
              "description": "The border width for this Input widget. This property can be defined in the theme to apply to all Input widgets.",
              "minimum": 0
            },
            "borderColor": {
              "$ref": "#/definitions/Colors",
              "description": "The base border color for this input widget. This border color determines the look and feel of your input, while the other colors are overrides for different states. This property can be defined in the theme to apply to all Input widgets."
            },
            "enabledBorderColor": {
              "$ref": "#/definitions/Colors",
              "description": "The border color for this input field if enabled. This property can be defined in the theme to apply to all Input widgets."
            },
            "disabledBorderColor": {
              "$ref": "#/definitions/Colors",
              "description": "The border color for this input field if disabled. This property can be defined in the theme to apply to all Input widgets."
            },
            "errorBorderColor": {
              "$ref": "#/definitions/Colors",
              "description": "The border color  when there are errors on this input field. This property can be defined in the theme to apply to all Input widgets."
            },
            "focusedBorderColor": {
              "$ref": "#/definitions/Colors",
              "description": "The border color when this input field is receiving focus. This property can be defined in the theme to apply to all Input widgets."
            },
            "focusedErrorBorderColor": {
              "$ref": "#/definitions/Colors"
            },
            "fontSize": {
              "type": "number",
              "minimum": 6
            },
            "expanded": {
              "type": "boolean",
              "description": "If the parent is a Row or Column, this flag will stretch this widget in the appropriate direction. (e.g stretch horizontally for parent of type Row)"
            }
          }
        },
        "initialValue": {
          "type": "string",
          "description": "The highlighted initial time in the time picker. Use format HH:MM"
        }
      },
      "additionalProperties": false
    },
    "BottomNavBar": {
      "type": "object",
      "properties": {
        "icon": {
          "type": "string"
        },
        "iconLibrary": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "page": {
          "type": "string"
        },
        "selected": {
          "type": "boolean"
        },
        "onTap": {
          "$ref": "#/definitions/Action"
        }
      },
      "required": [
        "icon",
        "label",
        "page",
        "selected",
        "onTap"
      ],
      "additionalProperties": false,
      "description": "Use the bottom navigation bar (default)"
    },
    "SideBar": {
      "type": "object",
      "properties": {
        "icon": {
          "type": "string"
        },
        "iconLibrary": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "page": {
          "type": "string"
        },
        "selected": {
          "type": "boolean"
        },
        "onTap": {
          "$ref": "#/definitions/Action"
        }
      },
      "required": [
        "icon",
        "label",
        "page",
        "selected",
        "onTap"
      ],
      "additionalProperties": false
    }
  }
}