{
  "$id": "https://ensembleui.com/language.schema.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Ensemble",
  "type": "object",
  "properties": {
    "Import": {

    },
    "View": {
      "type": "object",
      "description": "This is your root View",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "description": "Specifies the root widget i.e. Column, Row, Stack.",
          "enum": [
            "Column",
            "Row"
          ]
        },
        "menu": {
          "$ref": "#/$defs/Menu"
        },
        "children": {
          "$ref": "#/$defs/Widgets"
        }
      },
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Column"
              }
            }
          },
          "then": {
            "properties": {
              "styles": {
                "allOf": [
                  { "$ref": "#/$defs/rootViewStyles" },
                  { "$ref": "#/$defs/columnStyles" }
                ]
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Row"
              }
            }
          },
          "then": {
            "properties": {
              "styles": {
                "allOf": [
                  { "$ref": "#/$defs/rootViewStyles" },
                  { "$ref": "#/$defs/rowStyles" }
                ]
              }
            }
          }
        }
      ]
    },
    "Action": {

    },
    "Model": {

    },
    "Functions": {

    },
    "API": {

    }

  },
  "additionalProperties": {
    "type": "object",
    "required": ["type"],
    "properties": {
      "params": {
        "type": "array"
      },
      "type": {
        "type": "string",
        "description": "The root widget of your Sub View"
      }
    }

  },


  "$defs": {

    "Text-payload": {
      "type": "object",
      "required": [],
      "properties": {
        "text": {
          "type": "string",
          "description": "Your text content"
        },
        "styles": {
          "allOf": [
            {
              "$ref": "#/$defs/baseStyles"
            },
            {
              "type": "object",
              "properties": {
                "font": {
                  "type": "string",
                  "description": "Default built-in style for this text",
                  "enum": [
                    "heading",
                    "title",
                    "subtitle"
                  ]
                },
                "fontSize": {
                  "type": "integer",
                  "minimum": 6
                },
                "fontWeight": {
                  "type": "string",
                  "enum": [
                    "light", "normal", "bold", "w100", "w200", "w300", "w400", "w500", "w600", "w700", "w800", "w900"
                  ]
                },
                "color": {
                  "type": ["number", "string"],
                  "description": "Text color starting with '0xFF' for full opacity"
                },
                "overflow": {
                  "type": "string",
                  "description": "how to handle text longer than available space",
                  "enum": [
                    "wrap", "visible", "clip", "fade", "ellipsis", "dotdotdot"
                  ]
                },
                "textAlign": {
                  "type": "string",
                  "enum": [
                    "start", "end", "center", "justify"
                  ]
                },
                "textStyle": {
                  "type": "string",
                  "enum": [
                    "normal", "italic", "underline", "strikethrough", "italic_underline", "italic_strikethrough"
                  ]
                },
                "lineHeight": {
                  "type": ["number", "string"],
                  "enum": [
                    "default", "1.0", "1.15", "1.25", "1.5", "2.0", "2.5"
                  ]
                }
              }
            }
          ]
        }
      }
    },
    "Icon-payload": {
      "type": "object",
      "required": ["icon"],
      "properties": {
        "icon": {
          "type": "string",
          "description": "Icon name from Material Icons or Font Awesome"
        },
        "library": {
          "type": "string",
          "enum": [
            "default",
            "fontAwesome"
          ]
        },
        "styles": {
          "allOf": [
            {
              "$ref": "#/$defs/baseStyles"
            },
            {
              "type": "object",
              "properties": {
                "size": {
                  "type": "integer"
                },
                "color": {
                  "type": ["number", "string"]
                }
              }
            }
          ]
        }
      }
    },
    "Image-payload": {
      "type": "object",
      "required": ["source"],
      "properties": {
        "source": {
          "type": "string",
          "description": "URL to the image"
        },
        "styles": {
          "type": "object",
          "properties": {
            "width": {
              "type": "integer"
            },
            "height": {
              "type": "integer"
            },
            "fit": {
              "type": "string",
              "description": "How to fit the image within our width/height or our parent (if dimension is not specified)",
              "oneOf": [
                {
                  "const": "fill",
                  "description": "Stretch our image to fill the dimension, and distorting the aspect ratio if needed"
                },
                {
                  "const": "contain",
                  "description": "Scale the image such that the entire image is contained within our dimension"
                },
                {
                  "const": "cover",
                  "description": "Scale the image to fill our dimension, clipping the image as needed"
                },
                {
                  "const": "fitWidth",
                  "description": "Scale the image to fit the width, and clipping the height if needed"
                },
                {
                  "const": "fitHeight",
                  "description": "Scale the image to fit the height, and clipping the width if needed"
                },
                {
                  "const": "none",
                  "description": "Center-Align the original image size, clipping the content if needed"
                },
                {
                  "const": "scaleDown",
                  "description": "Center-Align the image and only scale down to fit. Image will not be scaled up to bigger dimension."
                }
              ]
            }
          }
        }
      }
    },
    "TextInput-payload": {
      "allOf": [
        { "$ref": "#/$defs/FormInput-payload" },
        {
          "type": "object",
          "properties": {
            "value": {
              "type": "string",
              "description": "Specifying the value of your Text Input"
            },
            "styles": {
              "type": "object",
              "properties": {
                "fontSize": {
                  "type": "integer",
                  "minimum": 6
                }
              }
            }
          }
        }
      ]
    },
    "Password-payload": {
      "allOf": [
        { "$ref": "#/$defs/FormInput-payload" },
        {
          "type": "object",
          "properties": {
            "styles": {
              "type": "object",
              "properties": {
                "fontSize": {
                  "type": "integer",
                  "minimum": 6
                }
              }
            }
          }
        }
      ]
    },
    "OnOff-payload": {
      "allOf": [
        {
          "$ref": "#/$defs/FormInput-payload"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "type": "boolean"
            },
            "leadingText": {
              "type": "string"
            },
            "trailingText": {
              "type": "string"
            }
          }
        }
      ]
    },
    "SelectOne-payload": {
      "allOf": [
        {
          "$ref": "#/$defs/FormInput-payload"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "description": "Select a value that matches one of the items. If Items are Objects, it should match the value key"
            },
            "items": {
              "type": "array",
              "description": "List of values, or Objects with value/label pairs"
            }
          }
        }
      ]
    },
    "Button-payload": {
      "type": "object",
      "required": ["label"],
      "properties": {
        "label": {
          "type": "string",
          "description": "Your button label"
        },
        "styles": {
          "type": "object",
          "properties": {
            "outline": {
              "type": "boolean",
              "description": "Whether the button should have an outline border instead of filled background"
            },
            "backgroundColor": {
              "type": ["number", "string"],
              "description": "Button background color starting with '0xFF' for full opacity"
            },
            "color": {
              "type": ["number", "string"],
              "description": "Set the color for the button label starting with '0xFF' for full opacity"
            },
            "borderRadius": {
              "type": "integer"
            },
            "padding": {
              "type": "integer"
            }
          }
        }
      }
    },
    "Column-payload": {
      "allOf": [
        {
          "type": "object",
          "properties": {
            "styles": { "$ref": "#/$defs/columnStyles" },
            "children": { "$ref": "#/$defs/Widgets" }
          }
        },
        { "$ref": "#/$defs/Templated-payload" }
      ]
    },
    "Row-payload": {
      "allOf": [
        {
          "type": "object",
          "properties": {
            "styles": { "$ref": "#/$defs/rowStyles" },
            "children": { "$ref": "#/$defs/Widgets" }
          }
        },
        { "$ref": "#/$defs/Templated-payload" }
      ]
    },
    "Templated-payload": {
      "type": "object",
      "properties": {
        "item-template": {
          "type": "object",
          "properties": {
            "data": { "type": "string" },
            "name": { "type": "string" },
            "template": { "$ref": "#/$defs/Widget" }
          }
        }
      }
    },
    "FormInput-payload": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "ID to be referenced later"
        },
        "label": {
          "type": "string",
          "description": "Label for your widget"
        },
        "hintText": {
          "type": "string",
          "description": "Hint text explaining your widget"
        },
        "required": {
          "type": "boolean"
        },
        "enabled": {
          "type": "boolean"
        },
        "icon": {
          "type": "string",
          "description": "Icon name from Material Icons or Font Awesome"
        },
        "iconLibrary": {
          "type": "string",
          "enum": ["default", "fontAwesome"]
        },
        "styles": {
          "type": "object",
          "properties": {
            "iconSize": {
              "type": "integer"
            },
            "iconColor": {
              "type": ["number", "string"]
            }
          }
        }
      }
    },


    "Widgets": {
      "type": "array",
      "description": "List of child widgets",
      "items": { "$ref": "#/$defs/Widget" }
    },
    "Widget": {
      "type": "object",
      "properties": {
        "Text": { "$ref": "#/$defs/Text-payload" },
        "Icon": { "$ref": "#/$defs/Icon-payload" },
        "Image": { "$ref": "#/$defs/Image-payload" },
        "TextInput": { "$ref": "#/$defs/TextInput-payload" },
        "Password": { "$ref": "#/$defs/Password-payload" },
        "Checkbox": { "$ref": "#/$defs/OnOff-payload" },
        "Switch": { "$ref": "#/$defs/OnOff-payload" },
        "Dropdown": { "$ref": "#/$defs/SelectOne-payload" },
        "Button": { "$ref": "#/$defs/Button-payload" },
        "Column": { "$ref": "#/$defs/Column-payload" },
        "Row": { "$ref": "#/$defs/Row-payload" }
      }
    },
    "Menu": {
      "type": "object",
      "properties": {
        "display": {
          "type": "string",
          "description": "how to render the App Menu (e.g bottom navigation bar, drawer, ...)",
          "enum": [
            "navBar", "navBar_left", "drawer"
          ]
        },
        "header": { "$ref": "#/$defs/Widget" },
        "items": {
          "type": "array",
          "description": "Define your menu items here (minimum 2)",
          "items": {
            "type": "object",
            "required": ["icon", "label", "page"],
            "properties": {
              "icon": {
                "type": "string",
                "description": "Icon name from Material Icons or Font Awesome"
              },
              "iconLibrary": {
                "type": "string",
                "enum": ["default", "fontAwesome"]
              },
              "label": {
                "type": "string"
              },
              "page": {
                "type": "string",
                "description": "The new page to navigate to on click"
              }
            }
          }
        }
      }
    },



    "rootViewStyles": {
      "type": "object",
      "properties": {
        "backgroundImage": {
          "type": "string",
          "description": "The Image URL to fill the entire background"
        }
      }
    },
    "baseStyles": {
      "type": "object",
      "properties": {
        "expanded": {
          "type": "boolean",
          "description": "If our parent is a Row or Column, this flag will stretch our widget in the appropriate direction. (e.g stretch horizontally for parent of type Row)"
        }
      }
    },
    "boxLayoutStyles": {
      "type": "object",
      "properties": {
        "width": {
          "type": "integer",
          "minimum": 0
        },
        "height": {
          "type": "integer",
          "minimum": 0
        },
        "margin": {
          "type": "integer",
          "minimum": 0
        },
        "padding": {
          "type": "integer",
          "minimum": 0
        },
        "gap": {
          "type": "integer",
          "minimum": 0
        },
        "backgroundColor": {
          "type": ["number", "string"],
          "description": "background color starting with '0xFF' for full opacity e.g 0xFFCCCCCC"
        },
        "borderColor": {
          "type": ["number", "string"],
          "description": "border color starting with '0xFF' for full opacity"
        },
        "borderRadius": {
          "type": "integer"
        },
        "fontFamily": {
          "type": "string",
          "description": "specify the font family applicable for all widgets inside this container"
        },
        "fontSize": {
          "type": "integer",
          "minimum": 0
        },
        "shadowColor": {
          "type": ["number", "string"],
          "description": "box shadow color starting with '0xFF' for full opacity"
        },
        "shadowRadius": {
          "type": "integer",
          "minimum": 0
        },
        "shadowOffset": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      }
    },
    "columnStyles": {
      "allOf": [
        {
          "$ref": "#/$defs/baseStyles"
        },
        {
          "$ref": "#/$defs/boxLayoutStyles"
        },
        {
          "type": "object",
          "properties": {
            "mainAxis": {
              "type": "string",
              "enum": ["top", "bottom", "middle", "space-between"]
            },
            "crossAxis": {
              "type": "string",
              "enum": ["start", "end", "center", "stretch"]
            },
            "mainAxisSize": {
              "type": "string",
              "description": "stretch to the max vertically or only fit the vertical space",
              "enum": ["min", "max"]
            },
            "scrollable": {
              "type": "boolean",
              "description": "content can scroll vertically as needed"
            },
            "autoFit": {
              "type": "boolean",
              "description": "Explicitly make our column's width as wide as the largest child, but only if our column's parent does not already assign us a width. This attribute is useful for sizing children who don't have a width (e.g Divider)"
            }
          }
        }
      ]
    },
    "rowStyles": {
      "allOf": [
        {
          "$ref": "#/$defs/baseStyles"
        },
        {
          "$ref": "#/$defs/boxLayoutStyles"
        },
        {
          "type": "object",
          "properties": {
            "mainAxis": {
              "type": "string",
              "enum": ["start", "end", "center", "space-between"]
            },
            "crossAxis": {
              "type": "string",
              "enum": ["top", "bottom", "middle", "stretch"]
            },
            "mainAxisSize": {
              "type": "string",
              "description": "stretch to the max horizontally or only fit the horizontal space",
              "enum": ["min", "max"]
            },
            "scrollable": {
              "type": "boolean",
              "description": "content can scroll horizontally as needed"
            },
            "autoFit": {
              "type": "boolean",
              "description": "Explicitly make our row's height as tall as the largest child, but only if our row's parent does not already assign us a height. This attribute is useful for sizing children who don't have a width (e.g vertical Divider)"
            }
          }
        }
      ]
    }







  }
}