{
  "$id": "https://ensembleui.com/language.schema.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Ensemble",
  "type": "object",
  "properties": {
    "Import": {

    },
    "View": {
      "type": "object",
      "description": "This is your root View",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "description": "Specifies the root widget i.e. Column, Row, Flex, Stack.",
          "enum": [
            "Column",
            "Row",
            "Flex"
          ]
        },
        "onLoad": {
          "$ref": "#/$defs/Action-payload",
          "description": "Execute an Action when this View loads"
        },
        "menu": {
          "$ref": "#/$defs/Menu"
        },
        "children": {
          "$ref": "#/$defs/Widgets"
        }
      },
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Column"
              }
            }
          },
          "then": {
            "properties": {
              "styles": {
                "allOf": [
                  { "$ref": "#/$defs/rootViewStyles" },
                  { "$ref": "#/$defs/columnStyles" }
                ]
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Row"
              }
            }
          },
          "then": {
            "properties": {
              "styles": {
                "allOf": [
                  { "$ref": "#/$defs/rootViewStyles" },
                  { "$ref": "#/$defs/rowStyles" }
                ]
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Flex"
              }
            }
          },
          "then": {
            "properties": {
              "styles": {
                "allOf": [
                  { "$ref": "#/$defs/rootViewStyles" },
                  { "$ref": "#/$defs/flexStyles" }
                ]
              }
            }
          }
        }
      ]
    },
    "Action": {

    },
    "Model": {

    },
    "App": {

    },
    "Variable": {

    },
    "Functions": {

    },
    "API": {
      "additionalProperties": {
        "type": "object",
        "required": ["uri", "method"],
        "properties": {
          "inputs": {
            "type": "array",
            "description": "The Input Parameters to pass into this API invocation"
          },
          "uri": {
            "type": "string"
          },
          "method":{
            "type": "string",
            "description": "Set the HTTP Method",
            "enum": ["GET", "PUT", "POST", "PATCH", "DELETE"]
          },
          "parameters": {
            "type": "object",
            "description": "Set URL Params for this API as key/value pairs"
          }
        }
      }
    }

  },
  "additionalProperties": {
    "type": "object",
    "required": ["type"],
    "properties": {
      "inputs": {
        "type": "array",
        "description": "The Input Parameters to pass into this Custom View"
      },
      "type": {
        "type": "string",
        "description": "The root widget of your Custom View"
      },
      "onLoad": {
        "$ref": "#/$defs/Action-payload",
        "description": "Execute an Action when this View loads"
      }
    }

  },


  "$defs": {

    "Text-payload": {
      "type": "object",
      "required": [],
      "properties": {
        "text": {
          "type": "string",
          "description": "Your text content"
        },
        "styles": {
          "allOf": [
            {
              "$ref": "#/$defs/baseStyles"
            },
            {
              "type": "object",
              "properties": {
                "font": {
                  "type": "string",
                  "description": "Default built-in style for this text",
                  "enum": [
                    "heading",
                    "title",
                    "subtitle"
                  ]
                },
                "fontSize": {
                  "type": "integer",
                  "minimum": 6
                },
                "fontWeight": {
                  "$ref": "#/$defs/type-fontWeight"
                },
                "color": {
                  "$ref": "#/$defs/typeColors"
                },
                "overflow": {
                  "type": "string",
                  "description": "how to handle text longer than available space",
                  "enum": [
                    "wrap", "visible", "clip", "fade", "ellipsis"
                  ]
                },
                "textAlign": {
                  "type": "string",
                  "enum": [
                    "start", "end", "center", "justify"
                  ]
                },
                "textStyle": {
                  "type": "string",
                  "enum": [
                    "normal", "italic", "underline", "strikethrough", "italic_underline", "italic_strikethrough"
                  ]
                },
                "lineHeight": {
                  "type": ["number", "string"],
                  "enum": [
                    "default", "1.0", "1.15", "1.25", "1.5", "2.0", "2.5"
                  ]
                }
              }
            }
          ]
        }
      }
    },
    "Icon-payload": {
      "type": "object",
      "required": ["icon"],
      "properties": {
        "icon": {
          "type": "string",
          "description": "Icon name from Material Icons or Font Awesome"
        },
        "library": {
          "type": "string",
          "enum": [
            "default",
            "fontAwesome"
          ]
        },
        "onTap": { "$ref": "#/$defs/Action-payload" },
        "styles": {
          "allOf": [
            {
              "$ref": "#/$defs/baseStyles"
            },
            {
              "type": "object",
              "properties": {
                "size": {
                  "type": "integer"
                },
                "color": {
                  "type": ["number", "string"]
                }
              }
            }
          ]
        }
      }
    },
    "Image-payload": {
      "type": "object",
      "required": ["source"],
      "properties": {
        "source": {
          "type": "string",
          "description": "URL to the image"
        },
        "styles": {
          "allOf": [
            {
              "$ref": "#/$defs/baseStyles"
            },
            {
              "$ref": "#/$defs/boxStyles"
            },
            {
              "type": "object",
              "properties": {
                "width": {
                  "type": "integer"
                },
                "height": {
                  "type": "integer"
                },
                "fit": {
                  "type": "string",
                  "description": "How to fit the image within our width/height or our parent (if dimension is not specified)",
                  "oneOf": [
                    {
                      "const": "fill",
                      "description": "Stretch our image to fill the dimension, and distorting the aspect ratio if needed"
                    },
                    {
                      "const": "contain",
                      "description": "Scale the image such that the entire image is contained within our dimension"
                    },
                    {
                      "const": "cover",
                      "description": "Scale the image to fill our dimension, clipping the image as needed"
                    },
                    {
                      "const": "fitWidth",
                      "description": "Scale the image to fit the width, and clipping the height if needed"
                    },
                    {
                      "const": "fitHeight",
                      "description": "Scale the image to fit the height, and clipping the width if needed"
                    },
                    {
                      "const": "none",
                      "description": "Center-Align the original image size, clipping the content if needed"
                    },
                    {
                      "const": "scaleDown",
                      "description": "Center-Align the image and only scale down to fit. Image will not be scaled up to bigger dimension."
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    },
    "QRCode-payload": {
      "type": "object",
      "required": ["value"],
      "properties": {
        "value": {
          "type": "string",
          "description": "The data to generate the QR code"
        },
        "styles": {
          "allOf": [
            {
              "$ref": "#/$defs/baseStyles"
            },
            {
              "$ref": "#/$defs/boxStyles"
            },
            {
              "type": "object",
              "properties": {
                "size": {
                  "type": "integer",
                  "description": "Specify the width/height of the QR Code. Default: 160"
                },
                "backgroundColor": {
                  "$ref": "#/$defs/typeColors"
                },
                "color": {
                  "$ref": "#/$defs/typeColors",
                  "description": "Set the color for the QR code drawing"
                }
              }
            }
          ]
        }
      }
    },
    "Progress-payload": {
      "type": "object",
      "properties": {
        "display": {
          "type": "string",
          "enum": ["linear", "circular"]
        },
        "countdown": {
          "type": "integer",
          "minimum": 0,
          "description": "Show the progress percentage based on the number of seconds specified here"
        },
        "onCountdownComplete": {
          "$ref": "#/$defs/Action-payload",
          "description": "Execute this Action when the countdown comes to 0"
        },
        "styles": {
          "allOf": [
            {
              "$ref": "#/$defs/baseStyles"
            },
            {
              "type": "object",
              "properties": {
                "size": {
                  "type": "integer",
                  "minimum": 10,
                  "description": "Specifies the width (progress bar) or the diameter (circular progress indicator)"
                },
                "thickness": {
                  "type": "integer",
                  "minimum": 1,
                  "description": "Specifies the thickness of the indicator (for progress bar this is the height)"
                },
                "color": {
                  "$ref": "#/$defs/typeColors"
                },
                "backgroundColor": {
                  "$ref": "#/$defs/typeColors"
                }
              }
            }
          ]
        }
      }
    },
    "Divider-payload": {
      "type": "object",
      "properties": {
        "styles": {
          "allOf": [
            {
              "$ref": "#/$defs/baseStyles"
            },
            {
              "type": "object",
              "properties": {
                "thickness": {
                  "type": "integer"
                },
                "color": {
                  "type": [
                    "number",
                    "string"
                  ],
                  "description": "The line color starting with '0xFF' for full opacity"
                },
                "indent": {
                  "type": "integer",
                  "description": "The leading gap before the line starts"
                },
                "endIndent": {
                  "type": "integer",
                  "description": "The ending gap after the line ends"
                }
              }
            }
          ]
        }
      }
    },
    "Spacer-payload": {
      "type": "object",
      "properties": {
        "styles": {
          "type": "object",
          "properties": {
            "size": {
              "type": "integer"
            }
          }
        }
      }
    },
    "TextInput-payload": {
      "allOf": [
        { "$ref": "#/$defs/FormInput-payload" },
        {
          "type": "object",
          "properties": {
            "value": {
              "type": "string",
              "description": "Specifying the value of your Text Input"
            },
            "inputType": {
              "type": "string",
              "description": "Pick a predefined input type",
              "enum": [ "default" ,"email", "phone", "ipAddress"]
            },
            "obscureText": {
              "type": "boolean",
              "description": "whether we should obscure the typed-in text (e.g Social Security)"
            },
            "styles": {
              "type": "object",
              "properties": {
                "fontSize": {
                  "type": "integer",
                  "minimum": 6
                }
              }
            }
          }
        }
      ]
    },
    "PasswordInput-payload": {
      "allOf": [
        { "$ref": "#/$defs/FormInput-payload" },
        {
          "type": "object",
          "properties": {
            "styles": {
              "type": "object",
              "properties": {
                "fontSize": {
                  "type": "integer",
                  "minimum": 6
                }
              }
            }
          }
        }
      ]
    },
    "OnOff-payload": {
      "allOf": [
        {
          "$ref": "#/$defs/FormInput-payload"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "type": "boolean"
            },
            "leadingText": {
              "type": "string"
            },
            "trailingText": {
              "type": "string"
            }
          }
        }
      ]
    },
    "SelectOne-payload": {
      "allOf": [
        {
          "$ref": "#/$defs/FormInput-payload"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "description": "Select a value that matches one of the items. If Items are Objects, it should match the value key"
            },
            "items": {
              "type": "array",
              "description": "List of values, or Objects with value/label pairs"
            }
          }
        }
      ]
    },
    "Date-payload": {
      "allOf": [
        {
          "$ref": "#/$defs/FormInput-payload"
        },
        {
          "type": "object",
          "properties": {
            "initialValue": {
              "type": "string",
              "description": "The highlighted initial date in the calendar picker (default is Today). Use format YYYY-MM-DD."
            },
            "firstDate": {
              "type": "string",
              "description": "The first selectable date in the calendar. Use format YYYY-MM-DD"
            },
            "lastDate": {
              "type": "string",
              "description": "The last selectable date in the calendar. Use format YYYY-MM-DD"
            }
          }
        }
      ]
    },
    "Time-payload": {
      "allOf": [
        {
          "$ref": "#/$defs/FormInput-payload"
        },
        {
          "type": "object",
          "properties": {
            "initialValue": {
              "type": "string",
              "description": "The highlighted initial time in the time picker. Use format HH:MM"
            }
          }
        }
      ]
    },
    "Button-payload": {
      "type": "object",
      "required": ["label"],
      "properties": {
        "label": {
          "type": "string",
          "description": "Your button label"
        },
        "enabled": {
          "type": "boolean"
        },
        "validateForm": {
          "type": "boolean",
          "description": "If our button is inside a Form, setting this to TRUE will validate all fields within this form upon button tap"
        },
        "onTap": { "$ref": "#/$defs/Action-payload" },
        "styles": {
          "allOf": [
            { "$ref": "#/$defs/baseStyles" },
            { "$ref": "#/$defs/boxStyles" },
            {
              "type": "object",
              "properties": {
                "outline": {
                  "type": "boolean",
                  "description": "Whether the button should have an outline border instead of filled background"
                },
                "backgroundColor": {
                  "type": ["number", "string"],
                  "description": "Button background color starting with '0xFF' for full opacity"
                },
                "color": {
                  "type": ["number", "string"],
                  "description": "Set the color for the button label starting with '0xFF' for full opacity"
                }
              }
            }
          ]
        }
      }
    },
    "Form-payload": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "children": { "$ref": "#/$defs/Widgets" },
        "styles": {
          "type": "object",
          "properties": {
            "labelPosition": {
              "type": "string",
              "description": "Where the position the FormField's label",
              "enum": [ "top", "start", "none" ]
            },
            "labelOverflow": {
              "type": "string",
              "description": "how to handle text longer than available space",
              "enum": [
                "wrap", "visible", "clip", "fade", "ellipsis"
              ]
            },
            "width": {
              "type": "integer",
              "minimum": 0
            },
            "height": {
              "type": "integer",
              "minimum": 0
            },
            "gap": {
              "type": "integer",
              "description": "vertical gap to insert between the children (default is 10)",
              "minimum": 0
            }
          }
        }
      }
    },
    "Column-payload": {
      "allOf": [
        {
          "type": "object",
          "properties": {
            "styles": { "$ref": "#/$defs/columnStyles" },
            "children": { "$ref": "#/$defs/Widgets" }
          }
        },
        { "$ref": "#/$defs/Templated-payload" }
      ]
    },
    "Row-payload": {
      "allOf": [
        {
          "type": "object",
          "properties": {
            "styles": { "$ref": "#/$defs/rowStyles" },
            "children": { "$ref": "#/$defs/Widgets" }
          }
        },
        { "$ref": "#/$defs/Templated-payload" }
      ]
    },
    "Flex-payload": {
      "allOf": [
        {
          "type": "object",
          "properties": {
            "styles": { "$ref": "#/$defs/flexStyles" },
            "children": { "$ref": "#/$defs/Widgets" }
          }
        },
        { "$ref": "#/$defs/Templated-payload" }
      ]
    },
    "Carousel-payload": {
      "allOf": [
        {
          "type": "object",
          "properties": {
            "children": { "$ref": "#/$defs/Widgets" },
            "styles": {
              "allOf": [
                {
                  "$ref": "#/$defs/boxStyles"
                },
                {
                  "type": "object",
                  "properties": {
                    "layout": {
                      "type": "string",
                      "description": "Show a single view, multiple views, or automatically switch between the views with autoLayoutBreakpoint",
                      "enum": ["auto" ,"single", "multiple"]
                    },
                    "autoLayoutBreakpoint": {
                      "type": "integer",
                      "description": "Show multiple views on the carousel if the breakpoint is equal or larger than this threshold, otherwise show single view. (default 768)"
                    },
                    "height": {
                      "type": "integer",
                      "description": "The height of each view"
                    },
                    "gap": {
                      "type": "integer",
                      "description": "The gap between each views, but also act as a left-right margin in a single view"
                    },
                    "indicatorType": {
                      "type": "string",
                      "description": "How the view indicator should be displayed",
                      "enum": [ "none", "circle", "rectangle" ]
                    },
                    "indicatorPosition": {
                      "type": "string",
                      "description": "Where to display the indicator if specified",
                      "enum": ["bottom", "top"]
                    },
                    "indicatorWidth": {
                      "type": "integer"
                    },
                    "indicatorHeight": {
                      "type": "integer"
                    },
                    "indicatorMargin": {
                      "type": ["integer", "string"],
                      "description": "The margin around each indicator"
                    }
                  }
                }
              ]
            }
          }
        },
        { "$ref": "#/$defs/Templated-payload" }
      ]
    },
    "Templated-payload": {
      "type": "object",
      "properties": {
        "item-template": {
          "type": "object",
          "properties": {
            "data": { "type": "string" },
            "name": { "type": "string" },
            "template": { "$ref": "#/$defs/Widget" }
          }
        }
      }
    },
    "FormInput-payload": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "ID to be referenced later"
        },
        "label": {
          "type": "string",
          "description": "Label for your widget"
        },
        "hintText": {
          "type": "string",
          "description": "Hint text explaining your widget"
        },
        "required": {
          "type": "boolean"
        },
        "enabled": {
          "type": "boolean"
        },
        "icon": {
          "type": "string",
          "description": "Icon name from Material Icons or Font Awesome"
        },
        "iconLibrary": {
          "type": "string",
          "enum": ["default", "fontAwesome"]
        },
        "onChange": { "$ref": "#/$defs/Action-payload" },
        "styles": {
          "allOf": [
            { "$ref": "#/$defs/baseStyles" },
            {
              "type": "object",
              "properties": {
                "iconSize": {
                  "type": "integer"
                },
                "iconColor": {
                  "type": ["number", "string"]
                }
              }
            }
          ]
        }
      }
    },
    "Action-payload": {
      "type": ["string", "object"],
      "description": "Call Ensemble's built-in functions or execute code",
      "required": ["action"],
      "allOf": [
        {
          "properties": {
            "action": {
              "type": "string",
              "description": "invoke an Ensemble's built-in functions",
              "enum": ["invokeAPI" ,"navigateScreen", "navigateModalScreen", "showDialog", "closeAllDialogs", "startTimer", "showToast", "executeCode"]
            }
          }
        },
        {
          "if": {
            "properties": {
              "action": {
                "const": "invokeAPI"
              }
            }
          },
          "then": {
            "properties": {
              "name": {
                "type": "string",
                "description": "Enter the name of your defined API"
              },
              "inputs": {
                "type": "object",
                "description": "Specify the key/value pairs to pass to the API"
              },
              "onResponse": {
                "$ref": "#/$defs/Action-payload",
                "description": "Execute another Action upon API's successful response"
              },
              "onError": {
                "$ref": "#/$defs/Action-payload",
                "description": "Execute an Action when the API completes with error(s)"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "action": {
                "const": "navigateScreen"
              }
            }
          },
          "then": {
            "properties": {
              "name": {
                "type": "string",
                "description": "Enter the Name or ID of your Screen"
              },
              "inputs": {
                "type": "object",
                "description": "Specify the key/value pairs to pass into the next Screen"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "action": {
                "const": "navigateModalScreen"
              }
            }
          },
          "then": {
            "properties": {
              "name": {
                "type": "string",
                "description": "Enter the Name or ID of your screen"
              },
              "inputs": {
                "type": "object",
                "description": "Specify the key/value pairs to pass into the next Screen"
              },
              "onModalDismiss": {
                "$ref": "#/$defs/Action-payload",
                "description": "Execute an Action when the modal screen is dismissed"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "action": {
                "const": "showDialog"
              }
            }
          },
          "then": {
            "properties": {
              "name": {
                "$ref": "#/$defs/Widget",
                "description": "Specifies a widget name or declare a widget to render inside the Dialog"
              },
              "options": {
                "type": "object",
                "properties": {
                  "minWidth": {
                    "type": "integer",
                    "minimum": 0
                  },
                  "maxWidth": {
                    "type": "integer"
                  },
                  "minHeight": {
                    "type": "integer",
                    "minimum": 0
                  },
                  "maxHeight": {
                    "type": "integer"
                  },
                  "horizontalOffset": {
                    "description": "Offset the dialog's position horizontally, with -1.0 for the screen's left and 1.0 for the screen's right. (default is 0 for centering horizontally)",
                    "type": "number",
                    "minimum": -1.0,
                    "maximum": 1.0
                  },
                  "verticalOffset": {
                    "description": "Offset the dialog's position vertically, with -1.0 for the screen's top and 1.0 for the screen's bottom. (default is 0 for centering vertically)",
                    "type": "number",
                    "minimum": -1.0,
                    "maximum": 1.0
                  }
                }
              },
              "onDialogDismiss": {
                "$ref": "#/$defs/Action-payload",
                "description": "Execute an Action when the Dialog is dismissed"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "action": {
                "const": "startTimer"
              }
            }
          },
          "then": {
            "properties": {
              "options": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Give this timer an ID so you can cancel it at will"
                  },
                  "startAfter": {
                    "type": "integer",
                    "minimum": 0,
                    "description": "Delay the timer's start by this number of seconds. If not specified and repeat is true, repeatInterval will be used. If none is specified, there will be no initial delay"
                  },
                  "repeat": {
                    "type": "boolean",
                    "description": "Whether the time should repeat and trigger at every repeatInterval seconds. This Timer will run continuously unless a maxNumberOfTimes is specified"
                  },
                  "repeatInterval": {
                    "type": "integer",
                    "minimum": 1,
                    "description": "Trigger the timer periodically at this repeatInterval (in seconds)"
                  },
                  "maxNumberOfTimes": {
                    "type": "integer",
                    "minimum": 1,
                    "description": "Specified the max number of times the timer will triggers, if repeat is true"
                  }
                }
              },
              "onTimer": {
                "$ref": "#/$defs/Action-payload",
                "description": "Execute an Action every time the timer triggers"
              },
              "onTimerComplete": {
                "$ref": "#/$defs/Action-payload",
                "description": "Execute an Action when the timer has completed and will terminate"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "action": {
                "const": "executeCode"
              }
            }
          },
          "then": {
            "properties": {
              "body": {
                "type": "string",
                "description": "Define your code block here, starting with //@code"
              },
              "onComplete": {
                "$ref": "#/$defs/Action-payload",
                "description": "Execute another Action when the code body finishes executing"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "action": {
                "const": "showToast"
              }
            }
          },
          "then": {
            "properties": {
              "options": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "Select a built-in toast or a your own custom toast widget",
                    "enum": [ "success", "error", "warning", "info" ]
                  },
                  "message": {
                    "type": "string",
                    "description": "The toast message (required for non-custom toast type)"
                  },
                  "dismissible": {
                    "type": "boolean",
                    "description": "Whether to show a dismiss button (default is True)"
                  },
                  "position": {
                    "type": "string",
                    "enum": [ "top", "topLeft", "topRight", "center", "centerLeft", "centerRight", "bottom", "bottomLeft", "bottomRight" ]
                  },
                  "duration": {
                    "type": "integer",
                    "description": "The number of seconds before the toast is dismissed",
                    "minimum": 1
                  }
                }
              },
              "styles": {
                "type": "object",
                "allOf": [
                  {
                    "properties": {
                      "backgroundColor": {
                        "$ref": "#/$defs/typeColors",
                        "description": "Toast's background color"
                      },
                      "borderRadius": {
                        "type": "integer",
                        "minimum": 0
                      },
                      "shadowColor": {
                        "type": ["number", "string"],
                        "description": "box shadow color starting with '0xFF' for full opacity"
                      },
                      "shadowRadius": {
                        "type": "integer",
                        "minimum": 0
                      },
                      "shadowOffset": {
                        "type": "array",
                        "items": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "$ref": "#/$defs/stylePadding"
                  }
                ]
              }
            }
          }
        }
      ]
    },


    "Widgets": {
      "type": "array",
      "description": "List of child widgets",
      "items": { "$ref": "#/$defs/Widget" }
    },
    "Widget": {
      "type": ["object", "string"],
      "properties": {
        "Text": { "$ref": "#/$defs/Text-payload" },
        "Icon": { "$ref": "#/$defs/Icon-payload" },
        "Image": { "$ref": "#/$defs/Image-payload" },
        "QRCode": { "$ref": "#/$defs/QRCode-payload" },
        "Progress": { "$ref": "#/$defs/Progress-payload" },
        "Divider": { "$ref": "#/$defs/Divider-payload" },
        "Spacer": { "$ref": "#/$defs/Spacer-payload" },
        "TextInput": { "$ref": "#/$defs/TextInput-payload" },
        "PasswordInput": { "$ref": "#/$defs/PasswordInput-payload" },
        "Checkbox": { "$ref": "#/$defs/OnOff-payload" },
        "Switch": { "$ref": "#/$defs/OnOff-payload" },
        "Dropdown": { "$ref": "#/$defs/SelectOne-payload" },
        "Date": { "$ref": "#/$defs/Date-payload" },
        "Time": { "$ref": "#/$defs/Time-payload" },
        "Button": { "$ref": "#/$defs/Button-payload" },
        "Form": { "$ref": "#/$defs/Form-payload" },
        "Column": { "$ref": "#/$defs/Column-payload" },
        "Row": { "$ref": "#/$defs/Row-payload" },
        "Flex": { "$ref": "#/$defs/Flex-payload" },
        "Carousel": { "$ref": "#/$defs/Carousel-payload" },
        "TabBar": { "$ref": "#/$defs/TabBar-payload" },
        "Map": { "$ref": "#/$defs/Map-payload" },
        "Video": { "$ref": "#/$defs/Video-payload" }
      }
    },
    "Menu": {
      "type": "object",
      "allOf": [
        {
          "properties": {
            "display": {
              "type": "string",
              "description": "how to render the App Menu (e.g bottom navigation bar, drawer, ...)",
              "enum": [
                "navBar", "navBar_left", "drawer"
              ]
            },
            "header": { "$ref": "#/$defs/Widget" },
            "footer": { "$ref": "#/$defs/Widget" },
            "items": {
              "type": "array",
              "description": "Define your menu items here (minimum 2)",
              "items": {
                "type": "object",
                "required": ["icon", "label", "page"],
                "properties": {
                  "icon": {
                    "type": "string",
                    "description": "Icon name from Material Icons or Font Awesome"
                  },
                  "iconLibrary": {
                    "type": "string",
                    "enum": ["default", "fontAwesome"]
                  },
                  "label": {
                    "type": "string"
                  },
                  "page": {
                    "type": "string",
                    "description": "The new page to navigate to on click"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "display": {
                "const": "navBar_left"
              }
            }
          },
          "then": {
            "properties": {
              "styles": {
                "properties": {
                  "borderColor": {
                    "$ref": "#/$defs/typeColors"
                  },
                  "borderWidth": {
                    "type": "integer"
                  },
                  "backgroundColor": {
                    "$ref": "#/$defs/typeColors",
                    "description": "Background color for our menu starting with '0xFF' for full opacity e.g 0xFFCCCCCC"
                  },
                  "itemDisplay": {
                    "type": "string",
                    "description": "How to render each navigation item",
                    "enum": ["stacked", "sideBySide"]
                  },
                  "itemPadding": {
                    "type": ["integer", "string"],
                    "description": "Padding for each navigation item with CSS-style value"
                  },
                  "minWidth": {
                    "type": "integer",
                    "description": "The minimum width for the menu (default 200)"
                  }
                }
              }
            }
          }
        }
      ]
    },
    "TabBar-payload": {
      "type": "object",
      "properties": {
        "styles": {
          "type": "object",
          "properties": {
            "tabFontSize": {
              "type": "integer",
              "description": "Font size for the tab text"
            },
            "tabFontWeight": {
              "$ref": "#/$defs/type-fontWeight",
              "description": "Font weight for the tab text"
            },
            "tabBackgroundColor": {
              "$ref": "#/$defs/typeColors",
              "description": "The background color of the tab's navigation bar"
            },
            "activeTabColor": {
              "$ref": "#/$defs/typeColors",
              "description": "The color of the selected tab's text"
            },
            "inactiveTabColor": {
              "$ref": "#/$defs/typeColors",
              "description": "The color of the un-selected tabs' text"
            },
            "indicatorColor": {
              "$ref": "#/$defs/typeColors",
              "description": "The color of the selected tab's indicator"
            },
            "indicatorThickness": {
              "type": "integer",
              "description": "The thickness of the selected tab's indicator"
            }
          }

        },
        "selectedIndex": {
          "type": "integer",
          "minimum": 0,
          "description": "Selecting a Tab based on its index order"
        },
        "items": {
          "type": "array",
          "description": "Define each of your Tab here",
          "items": {
            "type": "object",
            "required": ["label", "body"],
            "properties": {
              "label": {
                "type": "string",
                "description": "Setting the tab label"
              },
              "body": {
                "$ref": "#/$defs/Widget",
                "description": "Including a widget to be rendered as this tab's content"
              }
            }
          }
        }
      }
    },
    "Map-payload": {
      "type": "object",
      "properties": {
        "styles": {
          "allOf": [
            {
              "$ref": "#/$defs/baseStyles"
            },
            {
              "type": "object",
              "properties": {
                "markerWidth": {
                  "type": "integer",
                  "description": "The width of each marker. (default 60)"
                },
                "markerHeight": {
                  "type": "integer",
                  "description": "The height of each marker. (default 30)"
                }
              }
            }
          ]
        },
        "markers": {
          "type": "object",
          "required": ["data", "name", "location", "marker"],
          "properties": {
            "data": { "type": "string" },
            "name": { "type": "string" },
            "marker": {
              "$ref": "#/$defs/Widget",
              "description": "The widget to render as each marker"
            },
            "selectedMarker": {
              "$ref": "#/$defs/Widget",
              "description": "The widget to render at the bottom of the map when a marker is selected"
            },
            "location": {
              "type": "object",
              "properties": {
                "lat": {
                  "type": "number",
                  "description": "The latitude of the marker"
                },
                "lng": {
                  "type": "number",
                  "description": "The longitude of the marker"
                }
              }
            }

          }
        }
      }
    },
    "Video-payload": {
      "type": "object",
      "properties": {
        "source": {
          "type": "string",
          "description": "The URL source to the media file"
        }
      }
    },

    "rootViewStyles": {
      "type": "object",
      "properties": {
        "backgroundImage": {
          "type": "string",
          "description": "The Image URL to fill the entire background"
        }
      }
    },
    "baseStyles": {
      "type": "object",
      "properties": {
        "expanded": {
          "type": "boolean",
          "description": "If our parent is a Row or Column, this flag will stretch our widget in the appropriate direction. (e.g stretch horizontally for parent of type Row)"
        }
      }
    },
    "stylePadding": {
      "type": "object",
      "properties": {
        "padding": {
          "type": ["integer", "string"],
          "description": "Padding with CSS-style value"
        }
      }
    },
    "styleMargin": {
      "type": "object",
      "properties": {
        "margin": {
          "type": ["integer", "string"],
          "description": "Margin with CSS-style notation e.g padding: 5 20 5"
        }
      }
    },

    "typeColors": {
      "oneOf": [
        {
          "type": "integer"
        },
        {
          "type": "string",
          "enum": ["transparent", "black", "blue", "white", "red", "grey", "teal", "amber", "pink", "purple", "yellow", "green", "brown", "cyan", "indigo", "lime", "orange"]
        },
        {
          "type": "string",
          "pattern": "^0x"
        }
      ]
    },
    "type-fontWeight": {
      "type": "string",
      "enum": [
        "light", "normal", "bold", "w100", "w200", "w300", "w400", "w500", "w600", "w700", "w800", "w900"
      ]
    },

    "borderStyles": {
      "type": "object",
      "properties": {
        "borderRadius": {
          "type": "integer"
        },
        "borderColor": {
          "type": [
            "number",
            "string"
          ],
          "description": "border color starting with '0xFF' for full opacity"
        },
        "borderWidth": {
          "type": "integer"
        }
      }
    },
    "boxStyles": {
      "allOf": [
        {
          "$ref": "#/$defs/styleMargin"
        },
        {
          "$ref": "#/$defs/stylePadding"
        },
        {
          "$ref": "#/$defs/borderStyles"
        }
      ]
    },
    "boxLayoutStyles": {
      "allOf": [
        {
          "$ref": "#/$defs/boxStyles"
        },
        {
          "type": "object",
          "properties": {
            "width": {
              "type": "integer",
              "minimum": 0
            },
            "height": {
              "type": "integer",
              "minimum": 0
            },
            "gap": {
              "type": "integer",
              "minimum": 0
            },
            "backgroundColor": {
              "$ref": "#/$defs/typeColors",
              "description": "backgroundColor starting with '0xFF' for full opacity e.g 0xFFCCCCCC"
            },
            "fontFamily": {
              "type": "string",
              "description": "specify the font family applicable for all widgets inside this container"
            },
            "fontSize": {
              "type": "integer",
              "minimum": 0
            },
            "shadowColor": {
              "type": ["number", "string"],
              "description": "box shadow color starting with '0xFF' for full opacity"
            },
            "shadowRadius": {
              "type": "integer",
              "minimum": 0
            },
            "shadowOffset": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          }
        }
      ]
    },
    "columnStyles": {
      "allOf": [
        {
          "$ref": "#/$defs/baseStyles"
        },
        {
          "$ref": "#/$defs/boxLayoutStyles"
        },
        {
          "type": "object",
          "properties": {
            "mainAxis": {
              "type": "string",
              "description": "Control our children's layout vertically",
              "enum": ["start", "center", "end", "spaceBetween", "spaceAround", "spaceEvenly"]
            },
            "crossAxis": {
              "type": "string",
              "description": "Control the horizontal alignment of the children",
              "enum": ["start", "center", "end", "stretch", "baseline"]
            },
            "mainAxisSize": {
              "type": "string",
              "description": "stretch to the max vertically or only fit the vertical space",
              "enum": ["min", "max"]
            },
            "scrollable": {
              "type": "boolean",
              "description": "content can scroll vertically as needed"
            },
            "autoFit": {
              "type": "boolean",
              "description": "Explicitly make our column's width as wide as the largest child, but only if our column's parent does not already assign us a width. This attribute is useful for sizing children who don't have a width (e.g Divider)"
            }
          }
        }
      ]
    },
    "rowStyles": {
      "allOf": [
        {
          "$ref": "#/$defs/baseStyles"
        },
        {
          "$ref": "#/$defs/boxLayoutStyles"
        },
        {
          "type": "object",
          "properties": {
            "mainAxis": {
              "type": "string",
              "description": "Control our children's layout horizontally",
              "enum": ["start", "center", "end", "spaceBetween", "spaceAround", "spaceEvenly"]
            },
            "crossAxis": {
              "type": "string",
              "description": "Control the vertical alignment of the children",
              "enum": ["start", "center", "end", "stretch", "baseline"]
            },
            "mainAxisSize": {
              "type": "string",
              "description": "stretch to the max horizontally or only fit the horizontal space",
              "enum": ["min", "max"]
            },
            "scrollable": {
              "type": "boolean",
              "description": "content can scroll horizontally as needed"
            },
            "autoFit": {
              "type": "boolean",
              "description": "Explicitly make our row's height as tall as the largest child, but only if our row's parent does not already assign us a height. This attribute is useful for sizing children who don't have a width (e.g vertical Divider)"
            }
          }
        }
      ]
    },
    "flexStyles": {
      "allOf": [
        {
          "$ref": "#/$defs/baseStyles"
        },
        {
          "$ref": "#/$defs/boxLayoutStyles"
        },
        {
          "type": "object",
          "required": [ "direction" ],
          "properties": {
            "direction": {
              "type": "string",
              "description": "Lay out the children vertically or horizontally",
              "enum": ["vertical", "horizontal"]
            },
            "mainAxis": {
              "type": "string",
              "description": "Control how to lay out the children, in the direction specified by the 'direction' attribute",
              "enum": ["start", "center", "end", "spaceBetween", "spaceAround", "spaceEvenly"]
            },
            "crossAxis": {
              "type": "string",
              "description": "Control the alignment of the children on the secondary axis (depending on the 'direction' attribute)",
              "enum": ["start", "center", "end", "stretch", "baseline"]
            },
            "mainAxisSize": {
              "type": "string",
              "description": "stretch to the max or only fit the available space of the main axis (depending on the 'direction' attribute)",
              "enum": ["min", "max"]
            },
            "scrollable": {
              "type": "boolean",
              "description": "content can scroll vertically or horizontally as needed"
            },
            "autoFit": {
              "type": "boolean",
              "description": "Explicitly match our width or height to the largest child's size, but only if our parent does not already assign us a width or height. This attribute is useful for sizing children who don't have a width or height (e.g Divider)"
            }
          }
        }
      ]
    }
  }
}