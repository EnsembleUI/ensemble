{
  "$id": "https://raw.githubusercontent.com/EnsembleUI/ensemble/cb2653724e2a01320377743a3e939ea497db5a9d/assets/schema/ensemble_schema.json",
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "title": "Ensemble",
  "type": "object",
  "properties": {
    "Import": {},
    "ViewGroup": {
      "$ref": "#/$defs/Menu",
      "description": "Group multiple Views together and put them behind a menu."
    },
    "View": {
      "type": "object",
      "description": "This is your root View. It requires a body widget.",
      "required": [
        "body"
      ],
      "properties": {
        "header": {
          "type": "object",
          "description": "Configure the application header",
          "properties": {
            "title": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/Widget"
                }
              ],
              "description": "A simple text or a custom widget for the App's title"
            },
            "flexibleBackground": {
              "$ref": "#/$defs/Widget",
              "description": "This widget (typically used as an background image) acts as the header's background, with the title bar and the bottom widget overlaid on top. On non-scrollable screen, its dimensions is dictated by the header's width and height."
            },
            "styles": {
              "type": "object",
              "properties": {
                "backgroundColor": {
                  "$ref": "#/$defs/type-color",
                  "description": "By default the background color uses the theme's 'primary' color. You can override the header's background color here."
                },
                "surfaceTintColor": {
                  "$ref": "#/$defs/type-color",
                  "description": "By default the background color will be generate based on 'primary' color. You can override the header's background color when scrolled over here."
                },
                "color": {
                  "$ref": "#/$defs/type-color",
                  "description": "By default the navigation icon, title, and action icons uses the theme's 'onPrimary' color. You can override their colors here."
                },
                "elevation": {
                  "type": "integer",
                  "description": "Raise the header on its z-coordinates relative to the body. This effectively creates a drop shadow on the header's bottom edge.",
                  "minimum": 0
                },
                "shadowColor": {
                  "$ref": "#/$defs/type-color",
                  "description": "If elevation is non-zero, this will override the drop shadow color of the header's bottom edge."
                },
                "centerTitle": {
                  "type": "boolean",
                  "description": "Whether to align the title in the title bar's center horizontally (default: true)"
                },
                "titleBarHeight": {
                  "type": "integer",
                  "description": "For consistency, the header's title bar has the default fixed height of 56 regardless of its content. You may adjust its height here.",
                  "minimum": 0
                },
                "flexibleMinHeight": {
                  "type": "integer",
                  "description": "Applicable only if scrollableView is enabled. This attribute effectively sets the header's min height on scrolling (header's height will varies between the flexibleMinHeight and flexibleMaxHeight). Note that this attribute will be ignored if smaller than the titleBarHeight"
                },
                "flexibleMaxHeight": {
                  "type": "integer",
                  "description": "Applicable only if scrollableView is enabled. This attribute effectively sets the header's max height on scrolling (header's height will varies between the flexibleMinHeight and flexibleMaxHeight). This attribute will be ignored if smaller than the flexibleMinHeight"
                }
              }
            }
          }
        },
        "footer": {
          "type": "object",
          "properties": {
            "style": {
              "$ref": "#/$defs/boxStyles"
            },
            "dragOptions": {
              "type": "object",
              "properties": {
                "enable": {
                  "type": "boolean"
                },
                "initialSize": {
                  "type": "number",
                  "description": "Default it 0.5 i.e 50% of screen"
                },
                "minSize": {
                  "type": "number",
                  "description": "Minimum size of till sheet can go. Default is 0.25 i.e 25% of screen."
                },
                "maxSize": {
                  "type": "number",
                  "description": "Maximum size of till sheet can go. Default is 1 i.e 100% of screen."
                },
                "span": {
                  "type": "boolean",
                  "description": "Whether the widget should snap between [snapSizes] when the user lifts their finger during a drag."
                },
                "spanSizes": {
                  "type": "array",
                  "description": "The list of number each ranging from minSize to maxSize.",
                  "items": {
                    "type": "number"
                  }
                },
                "onMinSize": {
                  "$ref": "#/$defs/Action-payload",
                  "description": "Execute an Action when the drag hits minimum size"
                },
                "onMaxSize": {
                  "$ref": "#/$defs/Action-payload",
                  "description": "Execute an Action when the drag hits maximum size"        
                }
              }
            },
            "children": {
              "$ref": "#/$defs/Widgets"
            }
          }
        },
        "body": {
          "$ref": "#/$defs/Widget"
        },
        "onLoad": {
          "$ref": "#/$defs/Action-payload",
          "description": "Execute an Action when the screen loads"
        },
        "options": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "Specify if this is a regular (default) or modal screen",
              "enum": [
                "regular",
                "modal"
              ]
            }
          }
        },
        "styles": {
          "allOf": [
            {
              "$ref": "#/$defs/HasBackground"
            },
            {
              "properties": {
                "useSafeArea": {
                  "type": "boolean",
                  "description": "Applicable only when we don't have a header. If true, insert paddings around the body content to account for the the devices' Safe Area (e.g. iPhone notch). Default is false."
                },
                "scrollableView": {
                  "type": "boolean",
                  "description": "Specify if the content of this screen is scrollable with a global scrollbar. Using this also allow you to customize the scrolling experience of the header."
                },
                "showNavigationIcon": {
                  "type": "boolean",
                  "description": "For a screen with header, the App will automatically show the Menu, Back, or Close icon (for modal screen) before the title. On modal screen without the header, the Close icon will be shown. Set this flag to false if you wish to hide the icons and handle the navigation yourself."
                },
                "navigationIconPosition": {
                  "type": "string",
                  "description": "On modal screen without a header, you can position the close button at the start or end of the screen. For left-to-right languages like English, start is on the left and end is on the right. This property has no effect on a screen with header.",
                  "enum": [
                    "start",
                    "end"
                  ]
                }
              }
            }
          ]
        }
      }
    },
    "Action": {},
    "Model": {},
    "App": {},
    "Variable": {},
    "Functions": {
      "type": "string",
      "description": "Javascript snippet for declaring variables and reusable functions, visible anywhere within this screen"
    },
    "Global": {
      "type": "string",
      "label": "Enter code snippet",
      "defaultSnippets": [
        {
          "label": "Define variables and functions in Javascript",
          "body": "|-\n\t//@code\n\t"
        }
      ],
      "markdownDescription": "Declare Javascript variables and functions that are visible globally within this screen.  \n//@code  \n var myGlobalVar = 'hello';  \nfunction myGlobalFunc() {  \n  }",
      "description": "Declare Javascript variables and functions that are visible globally within this screen.  \n//@code  \n var myGlobalVar = 'hello';  \nfunction myGlobalFunc() {  \n  }"
    },
    "API": {
      "additionalProperties": {
        "type": "object",
        "required": [
          "uri",
          "method"
        ],
        "properties": {
          "inputs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Define the list of input names that this API accepts"
          },
          "uri": {
            "type": "string",
            "description": "The URL for this API"
          },
          "method": {
            "type": "string",
            "description": "Set the HTTP Method",
            "enum": [
              "GET",
              "PUT",
              "POST",
              "PATCH",
              "DELETE"
            ]
          },
          "headers": {
            "type": "object",
            "description": "Pass the headers' key/value pairs to your service"
          },
          "parameters": {
            "type": "object",
            "description": "Specify the key/value pairs to pass along with the URL",
            "additionalProperties": {
              "type": "string"
            }
          },
          "body": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ],
            "description": "The request body to pass along with the URL",
            "additionalProperties": {
              "type": "string"
            }
          },
          "onResponse": {
            "$ref": "#/$defs/Action-payload",
            "description": "Execute this callback upon a successful return of the API (http code 200-299)."
          },
          "onError": {
            "$ref": "#/$defs/Action-payload",
            "description": "Execute this callback when the API returns an error."
          }
        }
      }
    },
    "Socket": {
      "additionalProperties": {
        "type": "object",
        "required": [
          "uri"
        ],
        "properties": {
          "inputs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Define the list of inputs that ths socket accepts"
          },
          "uri": {
            "type": "string",
            "description": "The URL of this socket"
          },
          "onSuccess": {
            "$ref": "#/$defs/Action-payload",
            "description": "Execute this callback upon a successful connection of socket with server"
          },
          "onError": {
            "$ref": "#/$defs/Action-payload",
            "description": "Execute this callback upon a encountering error while trying to do socket connection."
          },
          "onDisconnect": {
            "$ref": "#/$defs/Action-payload",
            "description": "Execute this callback upon a successful disconnect of socket with server"
          },
          "onReconnectAttempt": {
            "$ref": "#/$defs/Action-payload",
            "description": "Execute this callback upon auto reconnect is attempted"
          },
          "onReceive": {
            "$ref": "#/$defs/Action-payload",
            "description": "Execute this callback upon a message from socket is received. Use socketName.data to access the"
          },
          "options": {
            "type": "object",
            "properties": {
              "disconnectOnPageClose": {
                "type": "boolean",
                "description": "Whether to disconnect socket on page pop. Default true."
              },
              "autoReconnect": {
                "type": "boolean",
                "description": "Whether to attempt socket connection on interrupted. Default true."
              },
              "reconnectOptions": {
                "type": "object",
                "properties": {
                  "initial": {
                    "type": "integer",
                    "description": "Initial wait to do reconnect attempt. "
                  },
                  "maxStep": {
                    "type": "integer",
                    "description": "When to stop increasing wait time e.g initial 1 and maxStep 3 wait time is as follows [1, 2, 4, 4, 4, ...]."
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "additionalProperties": {
    "type": "object",
    "description": "Defining a Custom Widget",
    "required": [
      "body"
    ],
    "properties": {
      "inputs": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Define the list of input names that this Custom Widget accepts."
      },
      "onLoad": {
        "$ref": "#/$defs/Action-payload",
        "description": "Execute an Action when this Custom Widget loads"
      },
      "body": {
        "$ref": "#/$defs/Widget",
        "description": "Specify a widget to render."
      }
    }
  },
  "$defs": {
    "Text-payload": {
      "type": "object",
      "required": [],
      "properties": {
        "id": {
          "type": "string",
          "description": "A unique identifier for this widget"
        },
        "text": {
          "type": "string",
          "description": "Your text content"
        },
        "styles": {
          "allOf": [
            {
              "$ref": "#/$defs/baseStyles"
            },
            {
              "$ref": "#/$defs/boxStyles"
            },
            {
              "type": "object",
              "properties": {
                "textStyle": {
                  "$ref": "#/$defs/TextStyle"
                },
                "maxLines": {
                  "type": "integer",
                  "minimum": 1
                },
                "textAlign": {
                  "type": "string",
                  "enum": [
                    "start",
                    "end",
                    "center",
                    "justify"
                  ]
                }
              }
            }
          ]
        }
      }
    },
    "Markdown-payload": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "A unique identifier for this widget"
        },
        "text": {
          "type": "string",
          "description": "Your text in markdown format"
        },
        "styles": {
          "allOf": [
            {
              "type": "object",
              "properties": {
                "textStyle": {
                  "type": "object",
                  "description": "Styling for regular text. Default to theme's bodyMedium styling",
                  "$ref": "#/$defs/OldTextStyle"
                },
                "linkStyle": {
                  "type": "object",
                  "description": "Styling for URL",
                  "$ref": "#/$defs/OldTextStyle"
                }
              }
            },
            {
              "$ref": "#/$defs/baseStyles"
            }
          ]
        }
      }
    },
    "Html-payload": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "A unique identifier for this widget"
        },
        "text": {
          "type": "string",
          "description": "Enter the HTML text"
        },
        "onLinkTap": {
          "$ref": "#/$defs/Action-payload",
          "description": "Call Ensemble's built-in functions to handle the case when a link within the HTML is tapped. When specified, the default behavior of opening the url will not be invoked."
        }
      }
    },
    "BaseIcon-payload": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The icon name"
        },
        "library": {
          "type": "string",
          "enum": [
            "default",
            "fontAwesome",
            "remix"
          ]
        },
        "styles": {
          "size": {
            "type": "integer"
          },
          "color": {
            "$ref": "#/$defs/type-color",
            "description": "The color of the icon"
          }
        }
      }
    },
    "Icon-payload": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseIcon-payload"
        },
        {
          "properties": {
            "id": {
              "type": "string",
              "description": "A unique identifier for this widget"
            },
            "onTap": {
              "$ref": "#/$defs/Action-payload",
              "description": "Call Ensemble's built-in functions or execute code"
            },
            "styles": {
              "allOf": [
                {
                  "$ref": "#/$defs/baseStyles"
                },
                {
                  "$ref": "#/$defs/boxStylesWithoutDimension"
                },
                {
                  "type": "object",
                  "properties": {
                    "splashColor": {
                      "$ref": "#/$defs/type-color",
                      "description": "If onTap is defined, this color will show up as a splash effect upon tapping the icon. Note that the effect only happens if backgroundColor is not set."
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "Image-payload": {
      "type": "object",
      "required": [
        "source"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "A unique identifier for this widget"
        },
        "source": {
          "type": "string",
          "description": "URL to or asset name of the image. If the URL is used, it is highly recommended that the dimensions is set (either with width/height or other means) to prevent the UI jerkiness while loading."
        },
        "fallback": {
          "$ref": "#/$defs/Widget",
          "description": "Return an inline widget or specify a custom widget to be rendered when the image failed to load the image"
        },
        "onTap": {
          "$ref": "#/$defs/Action-payload",
          "description": "Call Ensemble's built-in functions or execute code"
        },
        "styles": {
          "allOf": [
            {
              "$ref": "#/$defs/baseStyles"
            },
            {
              "$ref": "#/$defs/boxStyles"
            },
            {
              "type": "object",
              "properties": {
                "placeholderColor": {
                  "$ref": "#/$defs/type-color",
                  "description": "The placeholder color while the image is loading."
                },
                "fit": {
                  "type": "string",
                  "description": "How to fit the image within our width/height or our parent (if dimension is not specified)",
                  "oneOf": [
                    {
                      "const": "fill",
                      "description": "Stretch our image to fill the dimension, and distorting the aspect ratio if needed"
                    },
                    {
                      "const": "contain",
                      "description": "Scale the image such that the entire image is contained within our dimension"
                    },
                    {
                      "const": "cover",
                      "description": "Scale the image to fill our dimension, clipping the image as needed"
                    },
                    {
                      "const": "fitWidth",
                      "description": "Scale the image to fit the width, and clipping the height if needed"
                    },
                    {
                      "const": "fitHeight",
                      "description": "Scale the image to fit the height, and clipping the width if needed"
                    },
                    {
                      "const": "none",
                      "description": "Center-Align the original image size, clipping the content if needed"
                    },
                    {
                      "const": "scaleDown",
                      "description": "Center-Align the image and only scale down to fit. Image will not be scaled up to bigger dimension."
                    }
                  ]
                },
                "resizedWidth": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 2000,
                  "description": "Images will be automatically resized (default to 800 width with no height set) before rendering. If you know the rough image width, set this number to be the same or a slightly larger width to optimize the loading time. To maintain the original aspect ratio, set either resizedWidth or resizedHeight, but not both. This setting is not supported on Web."
                },
                "resizedHeight": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 2000,
                  "description": "Images will be automatically resized (default to 800 width with no height set) before rendering. If you know the rough image height, set this number to be the same or a slightly larger height to optimize the loading time. To maintain the original aspect ratio, set either resizedWidth or resizedHeight, but not both. This setting is not supported on Web."
                }
              }
            }
          ]
        }
      }
    },
    "Avatar-payload": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "A unique identifier for this widget"
        },
        "source": {
          "type": "string",
          "description": "URL to or asset name of the image. If the URL is used, it is highly recommended that the dimensions is set (either with width/height or other means) to prevent the UI jerkiness while loading."
        },
        "variant": {
          "type": "string",
          "description": "Specify the Avatar's shape: circle (default), square, or rounded.",
          "enum": ["circle", "square", "rounded"]
        },
        "name": {
          "type": "string",
          "description": "If the image source is not specified or failed to load, this name's initials will be displayed"
        },
        "nameTextStyle": {
          "description": "Adjust the text styling for the name",
          "$ref": "#/$defs/TextStyle"
        },
        "onTap": {
          "$ref": "#/$defs/Action-payload",
          "description": "Call Ensemble's built-in functions or execute code"
        },
        "styles": {
          "allOf": [
            {
              "$ref": "#/$defs/baseStyles"
            },
            {
              "$ref": "#/$defs/boxStyles"
            },
            {
              "type": "object",
              "properties": {
                "placeholderColor": {
                  "$ref": "#/$defs/type-color",
                  "description": "The placeholder color while the image is loading."
                },
                "fit": {
                  "type": "string",
                  "description": "How to fit the image within our width/height or our parent (if dimension is not specified)",
                  "oneOf": [
                    {
                      "const": "fill",
                      "description": "Stretch our image to fill the dimension, and distorting the aspect ratio if needed"
                    },
                    {
                      "const": "contain",
                      "description": "Scale the image such that the entire image is contained within our dimension"
                    },
                    {
                      "const": "cover",
                      "description": "Scale the image to fill our dimension, clipping the image as needed"
                    },
                    {
                      "const": "fitWidth",
                      "description": "Scale the image to fit the width, and clipping the height if needed"
                    },
                    {
                      "const": "fitHeight",
                      "description": "Scale the image to fit the height, and clipping the width if needed"
                    },
                    {
                      "const": "none",
                      "description": "Center-Align the original image size, clipping the content if needed"
                    },
                    {
                      "const": "scaleDown",
                      "description": "Center-Align the image and only scale down to fit. Image will not be scaled up to bigger dimension."
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    },
    "ImageCropper-payload": {
      "type": "object",
      "required": [
        "source"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "A unique identifier for this widget"
        },
        "source": {
          "type": "string",
          "description": "URL to or asset name of the image. If the URL is used, it is highly recommended that the dimensions is set (either with width/height or other means) to prevent the UI jerkiness while loading."
        },
        "onTap": {
          "$ref": "#/$defs/Action-payload",
          "description": "Call Ensemble's built-in functions or execute code"
        },
        "onCropped": {
          "$ref": "#/$defs/Action-payload",
          "description": "Call Ensemble's built-in functions or execute code"
        },
        "styles": {
          "allOf": [
            {
              "$ref": "#/$defs/baseStyles"
            },
            {
              "$ref": "#/$defs/boxStyles"
            },
            {
              "type": "object",
              "properties": {
                "placeholderColor": {
                  "$ref": "#/$defs/type-color",
                  "description": "The placeholder color while the image is loading."
                },
                "fit": {
                  "type": "string",
                  "description": "How to fit the image within our width/height or our parent (if dimension is not specified)",
                  "oneOf": [
                    {
                      "const": "fill",
                      "description": "Stretch our image to fill the dimension, and distorting the aspect ratio if needed"
                    },
                    {
                      "const": "contain",
                      "description": "Scale the image such that the entire image is contained within our dimension"
                    },
                    {
                      "const": "cover",
                      "description": "Scale the image to fill our dimension, clipping the image as needed"
                    },
                    {
                      "const": "fitWidth",
                      "description": "Scale the image to fit the width, and clipping the height if needed"
                    },
                    {
                      "const": "fitHeight",
                      "description": "Scale the image to fit the height, and clipping the width if needed"
                    },
                    {
                      "const": "none",
                      "description": "Center-Align the original image size, clipping the content if needed"
                    },
                    {
                      "const": "scaleDown",
                      "description": "Center-Align the image and only scale down to fit. Image will not be scaled up to bigger dimension."
                    }
                  ]
                },
                "width": {
                  "type": "integer",
                  "description": "Set the width of the ImageCropper."
                },
                "height": {
                  "type": "integer",
                  "description": "Set the height of the ImageCropper."
                },
                "cropPercentage": {
                  "type": "number",
                  "minimum": 0.0,
                  "maximum": 1.0,
                  "description": "How big the crop should be in regards to the width and height available to the cropping widget."
                },
                "strokeWidth": {
                  "type": "integer",
                  "description": "The stroke width of the dotted path."
                },
                "strokeColor": {
                  "$ref": "#/$defs/type-color",
                  "description": "The stroke color of the dotted path."
                },
                "isRotate": {
                  "type": "boolean",
                  "description": "Whether to allow the image to be rotated. Defaults to true."
                },
                "isMove": {
                  "type": "boolean",
                  "description": "Determines whether moving gesture overlay is disabled. Defaults to true."
                },
                "isScale": {
                  "type": "boolean",
                  "description": "Determines whether scaling gesture is disabled. Defaults to true."
                },
                "shape": {
                  "type": "string",
                  "description": "The shape of the cropping path.",
                  "oneOf": [
                    {
                      "const": "circle",
                      "description": "Sets the cropper in circle shape."
                    },
                    {
                      "const": "square",
                      "description": "Sets the cropper in square shape."
                    },
                    {
                      "const": "rectangle",
                      "description": "Sets the cropper in rectangle shape."
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    },
    "Lottie-payload": {
      "type": "object",
      "required": [
        "source"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "A unique identifier for this widget"
        },
        "source": {
          "type": "string",
          "description": "URL or asset name of the Lottie json file"
        },
        "styles": {
          "allOf": [
            {
              "$ref": "#/$defs/baseStyles"
            },
            {
              "$ref": "#/$defs/boxStyles"
            },
            {
              "type": "object",
              "properties": {
                "width": {
                  "type": "integer"
                },
                "height": {
                  "type": "integer"
                },
                "repeat": {
                  "type": "boolean",
                  "description": "Whether we should repeat the animation (default true)"
                },
                "fit": {
                  "type": "string",
                  "description": "How to fit the Lottie animation within our width/height or our parent (if dimension is not specified)",
                  "oneOf": [
                    {
                      "const": "fill",
                      "description": "Stretch our Lottie to fill the dimension, and distorting the aspect ratio if needed"
                    },
                    {
                      "const": "contain",
                      "description": "Scale the Lottie such that the entire Lottie is contained within our dimension"
                    },
                    {
                      "const": "cover",
                      "description": "Scale the Lottie to fill our dimension, clipping the Lottie as needed"
                    },
                    {
                      "const": "fitWidth",
                      "description": "Scale the Lottie to fit the width, and clipping the height if needed"
                    },
                    {
                      "const": "fitHeight",
                      "description": "Scale the Lottie to fit the height, and clipping the width if needed"
                    },
                    {
                      "const": "none",
                      "description": "Center-Align the original Lottie size, clipping the content if needed"
                    },
                    {
                      "const": "scaleDown",
                      "description": "Center-Align the Lottie and only scale down to fit. Lottie will not be scaled up to bigger dimension."
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    },
    "QRCode-payload": {
      "type": "object",
      "required": [
        "value"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "A unique identifier for this widget"
        },
        "value": {
          "type": "string",
          "description": "The data to generate the QR code"
        },
        "styles": {
          "allOf": [
            {
              "$ref": "#/$defs/baseStyles"
            },
            {
              "$ref": "#/$defs/boxStylesWithoutDimension"
            },
            {
              "type": "object",
              "properties": {
                "size": {
                  "type": "integer",
                  "description": "Specify the width/height of the QR Code. Default: 160"
                },
                "color": {
                  "$ref": "#/$defs/type-color",
                  "description": "Set the color for the QR code drawing"
                }
              }
            }
          ]
        }
      }
    },
    "Progress-payload": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "A unique identifier for this widget"
        },
        "display": {
          "type": "string",
          "enum": [
            "linear",
            "circular"
          ]
        },
        "countdown": {
          "type": "integer",
          "minimum": 0,
          "description": "Show the progress percentage based on the number of seconds specified here"
        },
        "onCountdownComplete": {
          "$ref": "#/$defs/Action-payload",
          "description": "Execute this Action when the countdown comes to 0"
        },
        "styles": {
          "allOf": [
            {
              "$ref": "#/$defs/baseStyles"
            },
            {
              "$ref": "#/$defs/backgroundColor"
            },
            {
              "type": "object",
              "properties": {
                "size": {
                  "type": "integer",
                  "minimum": 10,
                  "description": "Specifies the width (progress bar) or the diameter (circular progress indicator)"
                },
                "thickness": {
                  "type": "integer",
                  "minimum": 1,
                  "description": "Specifies the thickness of the indicator (for progress bar this is the height)"
                },
                "color": {
                  "$ref": "#/$defs/type-color"
                }
              }
            }
          ]
        }
      }
    },
    "Divider-payload": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "A unique identifier for this widget"
        },
        "styles": {
          "allOf": [
            {
              "$ref": "#/$defs/baseStyles"
            },
            {
              "$ref": "#/$defs/styleMargin"
            },
            {
              "type": "object",
              "properties": {
                "direction": {
                  "type": "string",
                  "description": "Whether to display a horizontal divider (default) or vertical divider.",
                  "enum": [
                    "horizontal",
                    "vertical"
                  ]
                },
                "thickness": {
                  "type": "integer"
                },
                "color": {
                  "oneOf": [
                    {
                      "title": "string",
                      "type": "string"
                    },
                    {
                      "title": "number",
                      "type": "number"
                    }
                  ],
                  "description": "The line color starting with '0xFF' for full opacity"
                },
                "indent": {
                  "type": "integer",
                  "description": "The leading gap before the line starts"
                },
                "endIndent": {
                  "type": "integer",
                  "description": "The ending gap after the line ends"
                }
              }
            }
          ]
        }
      }
    },
    "Spacer-payload": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "A unique identifier for this widget"
        },
        "styles": {
          "type": "object",
          "properties": {
            "size": {
              "type": "integer"
            }
          }
        }
      }
    },
    "Toggle-payload": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "A unique identifier for this widget"
        },
        "value": {
          "type": "boolean",
          "description": "Whether the toggle is On or Off (true or false)"
        },
        "inactiveWidget": {
          "$ref": "#/$defs/Widget",
          "description": "The widget to render when the toggle is Off"
        },
        "activeWidget": {
          "$ref": "#/$defs/Widget",
          "description": "The widget to render when the toggle is On"
        },
        "onChange": {
          "$ref": "#/$defs/Action-payload",
          "description": "Action to execute when the toggle's value has changed"
        },
        "styles": {
          "allOf": [
            {
              "$ref": "#/$defs/baseStyles"
            },
            {
              "type": "object",
              "properties": {
                "transitionDuration": {
                  "type": "integer",
                  "description": "The duration in milliseconds when transitioning between the active and inactive widgets"
                }
              }
            }
          ]
        }
      }
    },
    "ToggleContainer-payload": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "A unique identifier for this widget"
        },
        "isFirst": {
          "type": "boolean",
          "description": "Whether to display the firstWidget or secondWidget"
        },
        "firstWidget": {
          "$ref": "#/$defs/Widget",
          "description": "The first widget"
        },
        "secondWidget": {
          "$ref": "#/$defs/Widget",
          "description": "The second widget"
        },
        "onToggle": {
          "$ref": "#/$defs/Action-payload",
          "description": "Action to execute when the widget being displayed has changed"
        },
        "styles": {
          "allOf": [
            {
              "$ref": "#/$defs/baseStyles"
            },
            {
              "type": "object",
              "properties": {
                "transitionDuration": {
                  "type": "integer",
                  "description": "The duration in milliseconds when transitioning between the firstWidget and secondWidget (default 500ms)"
                }
              }
            }
          ]
        }
      }
    },
    "LoadingContainer-payload": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "A unique identifier for this widget"
        },
        "isLoading": {
          "type": "boolean",
          "description": "Whether to display a loading widget. The default will be empty (without shimmer) or a default loading shimmer, unless a loadingWidget is specified."
        },
        "useShimmer": {
          "type": "boolean",
          "description": "a shining animation to designate that the content is loading. The animation can be over a defaults shimmer or the loadingWidget if specified."
        },
        "baseColor": {
          "$ref": "#/$defs/type-color",
          "description": "The base color of the Shimmer."
        },
        "highlightColor": {
          "$ref": "#/$defs/type-color",
          "description": "The highlight color of the Shimmer."
        },
        "widget": {
          "$ref": "#/$defs/Widget",
          "description": "The main widget to show in non-loading state"
        },
        "loadingWidget": {
          "$ref": "#/$defs/Widget",
          "description": "The widget to display in loading state. When enabling shimmer, ensure your widget has a background color for the animation to shine through."
        },
        "styles": {
          "allOf": [
            {
              "$ref": "#/$defs/baseStyles"
            },
            {
              "properties": {
                "defaultShimmerPadding": {
                  "type": "object",
                  "description": "Specified the padding for the default shimmer widget (not applicable if loadingWidget is specified or useShimmer is not enabled).",
                  "$ref": "#/$defs/Padding-payload"
                }
              }
            }
          ]
        }
      }
    },
    "PopupMenu-payload": {
      "type": "object",
      "properties": {
        "widget": {
          "$ref": "#/$defs/Widget",
          "description": "The widget to be rendered as the menu anchor. Note that any tap event (if specified) will be ignored and automatically intercepted to open/close the menu."
        },
        "onItemSelect": {
          "$ref": "#/$defs/Action-payload",
          "description": "Invoke an Action when a menu item is selected"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "label"
            ],
            "properties": {
              "label": {
                "type": "string",
                "description": "The menu item's label"
              },
              "value": {
                "type": "string",
                "description": "The value returned when a menu item is selected. If not specified, the label will be return instead."
              }
            }
          }
        }
      }
    },
    "TextInput-payload": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseTextInput-payload"
        },
        {
          "$ref": "#/$defs/FormInput-payload"
        },
        {
          "$ref": "#/$defs/inputValidator"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "A unique identifier for this widget"
            },
            "value": {
              "type": "string",
              "description": "Specifying the value of your Text Input"
            },
            "inputType": {
              "type": "string",
              "description": "Pick a predefined input type",
              "enum": [
                "default",
                "email",
                "phone",
                "ipAddress",
                "number",
                "text",
                "url",
                "datetime"
              ]
            },
            "mask": {
              "type": "string",
              "description": "It formats the input by a given mask. Ex: +# (###) ###-##-##"
            },
            "keyboardAction": {
              "$ref": "#/$defs/keyboardAction"
            },
            "obscureText": {
              "type": "boolean",
              "description": "whether we should obscure the typed-in text (e.g Social Security)"
            },
            "obscureToggle": {
              "type": "boolean",
              "description": "enable the toggling between plain and obscure text."
            },
            "enableClearText": {
              "type": "boolean",
              "description": "It enables the default suffix clear icon button for the text input field to clear the values. Default (false)"
            },
            "onDelayedKeyPress": {
              "$ref": "#/$defs/Action-payload",
              "description": "Execute an Action after a brief delay specified by delayedKeyPressDuration (default: 300 ms). Consecutive calls within this delay will reset the timer, useful for minimizing server calls for type-ahead scenarios."
            },
            "delayedKeyPressDuration": {
              "type": "integer",
              "minimum": 0,
              "description": "The delay in milliseconds to trigger onDelayedKeyPress"
            },
            "styles": {
              "type": "object",
              "properties": {
                "fontSize": {
                  "type": "integer",
                  "minimum": 6
                }
              }
            },
            "textStyle": {
              "type": "object",
              "description": "Styling the input text. Default to theme's bodyMedium styling",
              "$ref": "#/$defs/TextStyle"
            },
            "hintStyle": {
              "type": "object",
              "description": "Styling the hint text. Default to theme's bodyMedium styling",
              "$ref": "#/$defs/TextStyle"
            },
            "maxLines": {
              "type": "integer",
              "description": "max number of lines allowed in a textinput"
            }            
          }
        }
      ]
    },
    "PasswordInput-payload": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/BaseTextInput-payload"
        },
        {
          "$ref": "#/$defs/FormInput-payload"
        },
        {
          "$ref": "#/$defs/inputValidator"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "A unique identifier for this widget"
            },
            "keyboardAction": {
              "$ref": "#/$defs/keyboardAction"
            },
            "obscureToggle": {
              "type": "boolean",
              "description": "enable the toggling between plain and obscure text."
            },
            "styles": {
              "type": "object",
              "properties": {
                "fontSize": {
                  "type": "integer",
                  "minimum": 6
                }
              }
            }
          }
        }
      ]
    },
    "ConfirmationInput-payload": {
      "type": "object",
      "properties": {
        "length": {
          "type": "integer",
          "description": "The number of the text fields"
        },
        "onChange": {
          "$ref": "#/$defs/Action-payload",
          "description": "It is called when a change is detected to the text field"
        },
        "onComplete": {
          "$ref": "#/$defs/Action-payload",
          "description": "It is called when the text field is completed"
        },
        "styles": {
          "allOf": [
            {
              "$ref": "#/$defs/baseStyles"
            },
            {
              "$ref": "#/$defs/boxStyles"
            },
            {
              "type": "object",
              "properties": {
                "textStyle": {
                  "$ref": "#/$defs/TextStyle"
                },
                "fieldType": {
                  "type": "string",
                  "description": "How the input field should be displayed",
                  "enum": [
                    "default",
                    "underline",
                    "rounded",
                    "custom"
                  ]
                },
                "inputType": {
                  "type": "string",
                  "description": "Pick a predefined input type",
                  "enum": [
                    "default",
                    "email",
                    "phone",
                    "ipAddress",
                    "number",
                    "text",
                    "url",
                    "datetime"
                  ]
                },
                "length": {
                  "type": "integer",
                  "description": "The length of the Confirmation Input Field (default is 4)"
                },
                "fieldWidth": {
                  "type": "integer",
                  "description": "The width of the text field"
                },
                "fieldHeight": {
                  "type": "integer",
                  "description": "The height of the text field"
                },
                "gap": {
                  "type": "integer",
                  "description": "Horizontal gap to insert between the children (default is 10)"
                },
                "autoComplete": {
                  "type": "boolean",
                  "description": "If it is True, then it will trigger onComplete when the user specified length and has typed the full length, False will trigger onComplete when the user hit Enter. Defaults (True)"
                },
                "spaceEvenly": {
                  "type": "boolean",
                  "description": "If it is True, then it will arrange all the textfields eqaully based on the remaining space in the horizontal axis. Defaults (True)"
                },
                "enableCursor": {
                  "type": "boolean",
                  "description": "If the button is inside a Form and upon on tap, it will execute the form's onSubmit action if this property is TRUE"
                },
                "defaultFieldBorderColor": {
                  "$ref": "#/$defs/type-color",
                  "description": "Set the border color for inactive/unfocused state of text field"
                },
                "activeFieldBorderColor": {
                  "$ref": "#/$defs/type-color",
                  "description": "Set the border color for active/focused state of text field"
                },
                "filledFieldBorderColor": {
                  "$ref": "#/$defs/type-color",
                  "description": "Set the border color for filled state of text field"
                },
                "defaultFieldBackgroundColor": {
                  "$ref": "#/$defs/type-color",
                  "description": "Set the background Color for inactive/unfocused state of text field"
                },
                "activeFieldBackgroundColor": {
                  "$ref": "#/$defs/type-color",
                  "description": "Set the ackground Color for active/focused state of text field"
                },
                "filledFieldBackgroundColor": {
                  "$ref": "#/$defs/type-color",
                  "description": "Set the ackground Color for filled field state of text field"
                },
                "cursorColor": {
                  "$ref": "#/$defs/type-color",
                  "description": "Set the color for the cursor"
                }
              }
            }
          ]
        }
      }
    },
    "DateRange-payload": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "ID to be referenced later"
        },
        "label": {
          "type": "string",
          "description": "Label for your widget"
        },
        "hintText": {
          "type": "string",
          "description": "Hint text explaining your widget"
        },
        "required": {
          "type": "boolean"
        },
        "enabled": {
          "type": "boolean"
        },
        "icon": {
          "$ref": "#/$defs/HasIcon",
          "description": "The icon to show before the Date Range field"
        },
        "suffixIcon": {
          "$ref": "#/$defs/HasIcon",
          "description": "The icon to show after the Date Range field"
        },
        "onChange": {
          "$ref": "#/$defs/Action-payload",
          "description": "Call Ensemble's built-in functions or execute code when the input changes. Note for free-form text input, this event only dispatches if the text changes AND the focus is lost (e.g. clicking on button)"
        },
        "styles": {
          "allOf": [
            {
              "$ref": "#/$defs/baseStyles"
            }
          ]
        }
      }
    },
    "Slider-payload": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/FormInput-payload"
        },
        {
          "type": "object",
          "properties": {
            "initialValue": {
              "type": "integer",
              "description": "Initial value where the slider thumb will start"
            },
            "min": {
              "type": "integer",
              "description": "Minimum value the user can pick"
            },
            "max": {
              "type": "integer",
              "description": "Maximum value the user can pick"
            },
            "divisions": {
              "type": "integer",
              "description": "If set slider will be divided into number passed to divisions else it will be continuous"
            },
            "onChange": {
              "$ref": "#/$defs/Action-payload",
              "description": "Dispatch an action whenever slider is updated"
            }
          }
        }
      ]
    },
    "OnOff-payload": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/FormInput-payload"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "type": "boolean"
            },
            "leadingText": {
              "type": "string"
            },
            "trailingText": {
              "type": "string"
            }
          }
        }
      ]
    },
    "SelectOne-payload": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/FormInput-payload"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "description": "Select a value that matches one of the items. If Items are Objects, it should match the value key",
              "type": "string"
            },
            "items": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "value": {
                        "type": "string"
                      },
                      "label": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "description": "List of values, or Objects with value/label pairs"
            },
            "autoComplete": {
              "type": "boolean",
              "description": "Enable the Input search suggestion option"
            }
          }
        }
      ]
    },
    "Date-payload": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/FormInput-payload"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "A unique identifier for this widget"
            },
            "initialValue": {
              "type": "string",
              "description": "The highlighted initial date in the calendar picker (default is Today). Use format YYYY-MM-DD."
            },
            "firstDate": {
              "type": "string",
              "description": "The first selectable date in the calendar. Use format YYYY-MM-DD"
            },
            "lastDate": {
              "type": "string",
              "description": "The last selectable date in the calendar. Use format YYYY-MM-DD"
            },
            "showCalendarIcon": {
              "type": "boolean",
              "description": "Whether we should show (default) or hide the calendar icon. Selecting the text will still open the calendar picker"
            }
          }
        }
      ]
    },
    "Time-payload": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/FormInput-payload"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "A unique identifier for this widget"
            },
            "initialValue": {
              "type": "string",
              "description": "The highlighted initial time in the time picker. Use format HH:MM"
            }
          }
        }
      ]
    },
    "Shape-payload": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "square",
            "rectangle",
            "circle",
            "oval"
          ]
        },
        "styles": {
          "allOf": [
            {
              "$ref": "#/$defs/baseStyles"
            },
            {
              "$ref": "#/$defs/HasBorder"
            },
            {
              "properties": {
                "width": {
                  "type": "integer"
                },
                "height": {
                  "type": "integer"
                },
                "backgroundColor": {
                  "$ref": "#/$defs/type-color"
                }
              }
            }
          ]
        }
      }
    },
    "SignInWithGoogle-payload": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/SignIn-payload"
        },
        {
          "properties": {
            "id": {
              "type": "string",
              "description": "A unique identifier for this widget"
            },
            "widget": {
              "$ref": "#/$defs/Widget",
              "description": "The widget to be rendered as the placeholder (not applicable on Web). Note that any tap event (if specified) will be ignored and automatically intercepted to trigger a Google Sign-In process."
            },
            "scopes": {
              "type": "array",
              "description": "A list of additional scopes to request permissions from the user",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "SignInWithApple-payload": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/SignIn-payload"
        },
        {
          "properties": {
            "id": {
              "type": "string",
              "description": "A unique identifier for this widget"
            },
            "styles": {
              "type": "object",
              "properties": {
                "buttonStyle": {
                  "type": "string",
                  "description": "Select an Apple's pre-defined button style (default whiteOutlined)",
                  "enum": [
                    "black",
                    "white",
                    "whiteOutlined"
                  ]
                }
              }
            }
          }
        }
      ]
    },
    "SignIn-payload": {
      "properties": {
        "provider": {
          "type": "string",
          "description": "Select a Sign In provider to use. By default 'local' provider is used",
          "oneOf": [
            {
              "const": "local",
              "description": "Sign the user on the client side. This is useful when your app doesn't need a server. (this is the default)."
            },
            {
              "const": "firebase",
              "description": "Use your custom Firebase to manage your users. Please see Ensemble documentation on how to integrate Firebase."
            }
          ]
        },
        "onAuthenticated": {
          "$ref": "#/$defs/Action-payload"
        },
        "onSignedIn": {
          "$ref": "#/$defs/Action-payload"
        },
        "onError": {
          "$ref": "#/$defs/Action-payload"
        },
        "styles": {
          "properties": {
            "overrideLabel": {
              "type": "string",
              "description": "Override the Sign In label. Note that changing the default Apple guideline may get your app rejected when submitting to Apple's App Store."
            },
            "iconAlignment": {
              "type": "string",
              "description": "Align the Apple icon to the left or center of the button (Note that the text will always be centered). Default: center",
              "enum": [
                "center",
                "left"
              ]
            },
            "borderRadius": {
              "$ref": "#/$defs/borderRadius"
            },
            "height": {
              "type": "integer",
              "minimum": 0
            }
          }
        }
      }
    },
    "ConnectWithGoogle-payload": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/Connect-payload"
        }
      ]
    },
    "ConnectWithMicrosoft-payload": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/Connect-payload"
        }
      ]
    },
    "Connect-payload": {
      "type": "object",
      "properties": {
        "initialScopes": {
          "type": "array",
          "description": "A list of initial scopes to request user's permission."
        },
        "widget": {
          "$ref": "#/$defs/Widget",
          "description": "The widget to be rendered in place of the default button. Note that any tap event on this widget (if specified) will be ignored and automatically intercepted to trigger an OAuth Connect flow."
        },
        "tokenExchangeAPI": {
          "$ref": "#/$defs/InvokeAPI-payload",
          "description": "If the server needs access to the access/refresh token, the OAuth token exchange API can be specified. Please see Ensemble's documentation regarding the expected request/response format."
        },
        "onAuthorized": {
          "$ref": "#/$defs/Action-payload"
        },
        "onError": {
          "$ref": "#/$defs/Action-payload"
        }
      }
    },
    "Button-payload": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "A unique identifier for this widget"
        },
        "label": {
          "type": "string",
          "description": "The button label"
        },
        "startingIcon": {
          "$ref": "#/$defs/HasIcon",
          "description": "Icon placed in front of the label, according to device text alignment"
        },
        "endingIcon": {
          "$ref": "#/$defs/HasIcon",
          "description": "Icon placed behind the label, according to device text alignment"
        },
        "gap": {
          "type": "integer",
          "description": "The gap between the starting icon and ending icon"
        },
        "enabled": {
          "type": "boolean"
        },
        "submitForm": {
          "type": "boolean",
          "description": "If the button is inside a Form and upon on tap, it will execute the form's onSubmit action if this property is TRUE"
        },
        "onTap": {
          "$ref": "#/$defs/Action-payload",
          "description": "Call Ensemble's built-in functions or execute code"
        },
        "styles": {
          "allOf": [
            {
              "$ref": "#/$defs/baseStyles"
            },
            {
              "$ref": "#/$defs/boxStyles"
            },
            {
              "type": "object",
              "properties": {
                "labelStyle": {
                  "$ref": "#/$defs/TextStyle"
                },
                "outline": {
                  "type": "boolean",
                  "description": "Whether the button should have an outline border instead of filled background"
                }
              }
            }
          ]
        }
      }
    },
    "IconButton-payload": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "A unique identifier for this widget"
        },
        "icon": {
          "$ref": "#/$defs/HasIcon"
        },
        "onTap": {
          "$ref": "#/$defs/Action-payload"
        },
        "styles": {
          "$ref": "#/$defs/baseStyles"
        }
      }
    },
    "Address-payload": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "A unique identifier for this widget"
        },
        "showRecent": {
          "type": "boolean",
          "description": "Whether to show the recent searches (default True)"
        },
        "countryFilter": {
          "type": "array",
          "maxItems": 5,
          "description": "Specify a list of country codes (2-letter ISO standard) to filter the result (max of 5)",
          "items": {
            "type": "string"
          }
        },
        "proximitySearchEnabled": {
          "type": "boolean",
          "description": "Use the user's current location to prioritize localized results within the proximityRadius. Note that this will prompt for user's permission to access their location. (default: true)"
        },
        "proximitySearchCenter": {
          "type": "string",
          "description": "Use the syntax 'latitude longitude' to specify the center used for prioritizing localized results. If specified, this will be used instead of the user's current location."
        },
        "proximitySearchRadius": {
          "type": "integer",
          "description": "The radius (in meters) from the proximitySearchCenter (or current location) to prioritize localized results. (default 20,000 meters)."
        },
        "onChange": {
          "$ref": "#/$defs/Action-payload",
          "description": "Dispatch when a suggestion entry is selected"
        }
      }
    },
    "StaggeredGrid-payload": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/Templated-payload"
        },
        {
          "properties": {
            "id": {
              "type": "string",
              "description": "A unique identifier for this widget"
            },
            "onItemTap": {
              "$ref": "#/$defs/Action-payload",
              "description": "Call Ensemble's built-in functions or execute code when tapping on an item in the list."
            },
            "children": {
              "$ref": "#/$defs/Widgets"
            },
            "styles": {
              "allOf": [
                {
                  "$ref": "#/$defs/baseStyles"
                },
                {
                  "type": "object",
                  "properties": {
                    "crossAxisCount": {
                      "type": "integer",
                      "description": "Creates a list of staggered grid tile in the cross axis",
                      "minimum": 0
                    },
                    "verticalGap": {
                      "type": "integer",
                      "description": "Vertical gap between the staggered grid tiles",
                      "minimum": 0
                    },
                    "horizontalGap": {
                      "type": "integer",
                      "description": "Horizontal gap between the staggered grid tiles",
                      "minimum": 0
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "ToggleButton-payload": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "A unique identifier for this widget"
        },
        "value": {
          "description": "Set a default value that matches one of the items. If Items are Objects, it should match the value key"
        },
        "items": {
          "type": "array",
          "description": "List of values, or Objects with value/label pairs",
          "items": {
            "type": "string",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "onChange": {
          "$ref": "#/$defs/Action-payload",
          "description": "Call Ensemble's built-in functions or execute code when the input changes. Note for free-form text input, this event only dispatches if the text changes AND the focus is lost (e.g. clicking on button)"
        },
        "styles": {
          "allOf": [
            {
              "$ref": "#/$defs/baseStyles"
            },
            {
              "type": "object",
              "properties": {
                "spacing": {
                  "type": "integer",
                  "description": "Space between the toggle buttons item",
                  "minimum": 0
                },
                "runSpacing": {
                  "type": "integer",
                  "description": "Space between the toggle buttons row",
                  "minimum": 0
                },
                "color": {
                  "$ref": "#/$defs/type-color",
                  "description": "Set the color for the toggle button label starting with '0xFF' for full opacity"
                },
                "selectedColor": {
                  "$ref": "#/$defs/type-color",
                  "description": "Set the color for the selected toggle button label"
                },
                "backgroundColor": {
                  "$ref": "#/$defs/type-color",
                  "description": "Set the background color for the toggle button"
                },
                "selectedBackgroundColor": {
                  "$ref": "#/$defs/type-color",
                  "description": "Set the background color for the selected toggle button"
                },
                "borderColor": {
                  "$ref": "#/$defs/type-color",
                  "description": "Set the border color for the toggle button, starting with '0xFF' for full opacity"
                },
                "selectedBorderColor": {
                  "$ref": "#/$defs/type-color",
                  "description": "Set the border color for the selected toggle button, starting with '0xFF' for full opacity"
                },
                "shadowColor": {
                  "$ref": "#/$defs/type-color",
                  "description": "Set the shadow color for the toggle button"
                }
              }
            }
          ]
        }
      }
    },
    "Form-payload": {
      "type": "object",
      "required": [
        "children"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "A unique identifier for this widget"
        },
        "enabled": {
          "type": "boolean"
        },
        "onSubmit": {
          "$ref": "#/$defs/Action-payload",
          "description": "Action to execute when the form is submitted"
        },
        "children": {
          "$ref": "#/$defs/Widgets"
        },
        "styles": {
          "type": "object",
          "properties": {
            "labelPosition": {
              "type": "string",
              "description": "Where the position the FormField's label",
              "enum": [
                "top",
                "start",
                "none"
              ]
            },
            "labelOverflow": {
              "type": "string",
              "description": "Treatment of text longer than available space",
              "enum": [
                "wrap",
                "visible",
                "clip",
                "ellipsis"
              ]
            },
            "labelMaxWidth": {
              "type": "integer",
              "description": "Cap the label's width, useful on larger screen. This property only works on labelPosition=start."
            },
            "width": {
              "type": "integer",
              "minimum": 0
            },
            "height": {
              "type": "integer",
              "minimum": 0
            },
            "gap": {
              "type": "integer",
              "description": "Vertical gap to insert between the children (default is 10)",
              "minimum": 0
            }
          }
        }
      }
    },
    "Flow-payload": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/Templated-payload"
        },
        {
          "required": [
            "children"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "A unique identifier for this widget"
            },
            "children": {
              "$ref": "#/$defs/Widgets"
            },
            "direction": {
              "type": "string",
              "description": "The main direction to lay out the children before wrapping",
              "enum": [
                "vertical",
                "horizontal"
              ]
            },
            "styles": {
              "$ref": "#/$defs/flowStyles"
            }
          }
        }
      ]
    },
    "Column-payload": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/Templated-payload"
        },
        {
          "$ref": "#/$defs/IsTapEnabled"
        },
        {
          "properties": {
            "id": {
              "type": "string",
              "description": "A unique identifier for this widget"
            },
            "children": {
              "$ref": "#/$defs/Widgets"
            },
            "styles": {
              "$ref": "#/$defs/columnStyles"
            },
            "onPullToRefresh": {
              "description": "Trigger an Action with pull to refresh. Applicable only if scrollable is enabled.",
              "$ref": "#/$defs/Action-payload"
            },
            "refreshIndicatorType": {
              "type": "string",
              "description": "The refresh indicator type if onPullToRefresh is specified. Default is 'material'.",
              "enum": [
                "material",
                "cupertino"
              ]
            }
          }
        }
      ]
    },
    "Row-payload": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/Templated-payload"
        },
        {
          "$ref": "#/$defs/IsTapEnabled"
        },
        {
          "properties": {
            "id": {
              "type": "string",
              "description": "A unique identifier for this widget"
            },
            "children": {
              "$ref": "#/$defs/Widgets"
            },
            "styles": {
              "$ref": "#/$defs/rowStyles"
            }
          }
        }
      ]
    },
    "GridView-payload": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/Templated-payload"
        },
        {
          "$ref": "#/$defs/HasPullToRefresh"
        },
        {
          "properties": {
            "id": {
              "type": "string",
              "description": "A unique identifier for this widget"
            },
            "onItemTap": {
              "$ref": "#/$defs/Action-payload",
              "description": "Call Ensemble's built-in functions or execute code when tapping on an item in the list."
            },
            "onScrollEnd": {
              "$ref": "#/$defs/Action-payload",
              "description": "Execute an Ensemble action when user has reached bottom of grid."
            },
            "styles": {
              "allOf": [
                {
                  "$ref": "#/$defs/baseStyles"
                },
                {
                  "$ref": "#/$defs/boxLayoutStyles"
                },
                {
                  "properties": {
                    "horizontalTileCount": {
                      "oneOf": [
                        {
                          "title": "string",
                          "type": "string"
                        },
                        {
                          "title": "integer",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 5
                        }
                      ],
                      "description": "The number of horizontal tiles (max 5) to show. If not specified, the number of tiles will automatically be determined by the screen size. You may also specify a single number (for all breakpoints), three numbers (for small, medium, large breakpoints), or five numbers (xSmall, small, medium, large, xLarge)."
                    },
                    "horizontalGap": {
                      "type": "integer",
                      "description": "The gap between the horizontal tiles if there are more than one (default: 10).",
                      "minimum": 0
                    },
                    "verticalGap": {
                      "type": "integer",
                      "description": "The gap between the vertical tiles if there are more than one (default: 10).",
                      "minimum": 0
                    },
                    "itemHeight": {
                      "type": "integer",
                      "description": "Set a fixed height for each item in the tile. If each tile item comprises of many widgets vertically, setting this attribute may require you to stretch (expand) at least one inner widget.",
                      "minimum": 0
                    },
                    "itemAspectRatio": {
                      "type": "number",
                      "description": "Instead of itemHeight, you can set the tile's dimension as a ratio of (item width / item height). For example, a tile with 3x width and 2x height is 3/2 = 1.5. This attribute will be ignored if itemHeight is set.",
                      "minimum": 0
                    },
                    "reverse": {
                      "type": "boolean",
                      "description": "Show Grid in reverse order. Default is false"
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "Flex-payload": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/Templated-payload"
        },
        {
          "$ref": "#/$defs/IsTapEnabled"
        },
        {
          "properties": {
            "id": {
              "type": "string",
              "description": "A unique identifier for this widget"
            },
            "children": {
              "$ref": "#/$defs/Widgets"
            },
            "styles": {
              "$ref": "#/$defs/flexStyles"
            }
          }
        }
      ]
    },
    "DataGrid-payload": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/DataRow-Templated-payload"
        },
        {
          "properties": {
            "children": {
              "type": "array",
              "description": "List of data row widgets",
              "items": {
                "$ref": "#/$defs/DataRows-payload"
              }
            },
            "styles": {
              "allOf": [
                {
                  "$ref": "#/$defs/baseStyles"
                },
                {
                  "$ref": "#/$defs/boxLayoutStyles"
                },
                {
                  "type": "object",
                  "properties": {
                    "headingText": {
                      "type": "object",
                      "description": "Set the text style for the heading text",
                      "allOf": [
                        {
                          "$ref": "#/$defs/OldTextStyle"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "font": {
                              "type": "string",
                              "description": "Default built-in style for this text",
                              "enum": [
                                "heading",
                                "title",
                                "subtitle"
                              ]
                            },
                            "fontSize": {
                              "type": "integer",
                              "minimum": 6
                            },
                            "fontWeight": {
                              "$ref": "#/$defs/type-fontWeight"
                            },
                            "color": {
                              "$ref": "#/$defs/type-color"
                            },
                            "lineHeight": {
                              "oneOf": [
                                {
                                  "title": "string",
                                  "type": "string"
                                },
                                {
                                  "title": "number",
                                  "type": "number"
                                },
                                {
                                  "title": "enum",
                                  "enum": [
                                    "default",
                                    "1.0",
                                    "1.15",
                                    "1.25",
                                    "1.5",
                                    "2.0",
                                    "2.5"
                                  ]
                                }
                              ]
                            }
                          }
                        }
                      ]
                    },
                    "dataText": {
                      "type": "object",
                      "description": "Set the text style for the data item text",
                      "allOf": [
                        {
                          "$ref": "#/$defs/OldTextStyle"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "font": {
                              "type": "string",
                              "description": "Default built-in style for this text",
                              "enum": [
                                "heading",
                                "title",
                                "subtitle"
                              ]
                            },
                            "fontSize": {
                              "type": "integer",
                              "minimum": 6
                            },
                            "fontWeight": {
                              "$ref": "#/$defs/type-fontWeight"
                            },
                            "color": {
                              "$ref": "#/$defs/type-color"
                            },
                            "lineHeight": {
                              "oneOf": [
                                {
                                  "title": "string",
                                  "type": "string"
                                },
                                {
                                  "title": "number",
                                  "type": "number"
                                },
                                {
                                  "title": "enum",
                                  "enum": [
                                    "default",
                                    "1.0",
                                    "1.15",
                                    "1.25",
                                    "1.5",
                                    "2.0",
                                    "2.5"
                                  ]
                                }
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "DataColumns": {
              "type": "array",
              "description": "List of data columns",
              "items": {
                "$ref": "#/$defs/DataColumn-Item"
              }
            },
            "horizontalMargin": {
              "type": "integer",
              "description": "The leading and trailing gap for the DataGrid view.",
              "minimum": 0
            },
            "dataRowHeight": {
              "type": "integer",
              "description": "Set the height of the data row item.",
              "minimum": 0
            },
            "headingRowHeight": {
              "type": "integer",
              "description": "Set the height of the heading row item.",
              "minimum": 0
            },
            "columnSpacing": {
              "type": "number",
              "description": "Set the padding for the column.",
              "minimum": 0
            },
            "dividerThickness": {
              "type": "integer",
              "description": "The thickness of the divider"
            },
            "sorting": {
              "type": "object",
              "properties": {
                "columnIndex": {
                  "type": "integer",
                  "description": "The index of the data column to be sorted"
                },
                "order": {
                  "type": "string",
                  "description": "Set the data column sorting either in ascending or descending order",
                  "oneOf": [
                    {
                      "const": "ascending",
                      "description": "Sort the data column in ascending order"
                    },
                    {
                      "const": "descending",
                      "description": "Sort the data column in descending order"
                    }
                  ]
                }
              }
            }
          }
        }
      ]
    },
    "DataRow-Templated-payload": {
      "type": "object",
      "properties": {
        "item-template": {
          "type": "object",
          "properties": {
            "data": {
              "type": "string",
              "description": "Bind to an array of data from an API response or a variable"
            },
            "name": {
              "type": "string",
              "description": "Set the name to reference as you iterate through the array of data"
            },
            "template": {
              "$ref": "#/$defs/DataRows-payload",
              "description": "The data row widget to render for each item"
            }
          }
        }
      }
    },
    "DataRows-payload": {
      "title": "DataRow",
      "required": [
        "DataRow"
      ],
      "properties": {
        "DataRow": {
          "$ref": "#/$defs/DataRow",
          "description": "Example from Kitchen Sink: https://studio.ensembleui.com/app/e24402cb-75e2-404c-866c-29e6c3dd7992/screen/c87f8b09-58e2-4c2f-99a1-cbbe9e25e9a5"
        }
      }
    },
    "DataRow": {
      "type": "object",
      "description": "List of widgets",
      "required": [
        "children"
      ],
      "properties": {
        "children": {
          "$ref": "#/$defs/Widgets"
        }
      }
    },
    "DataColumn-Item": {
      "type": "object",
      "description": "A DataColumn item for the data grid",
      "properties": {
        "label": {
          "type": "string",
          "description": "Set the label of the data column"
        },
        "type": {
          "type": "string",
          "description": "Set the type of the data column"
        },
        "tooltip": {
          "type": "string",
          "description": "Set the tooltip for the data column"
        },
        "sortable": {
          "type": "boolean",
          "description": "Set the data column sorting"
        },
        "sortKey": {
          "type": "string",
          "description": "Sort key is required if you enable the data column sorting"
        }
      }
    },
    "Stack-payload": {
      "type": "object",
      "required": [
        "children"
      ],
      "properties": {
        "children": {
          "$ref": "#/$defs/Widgets"
        },
        "styles": {
          "type": "object",
          "properties": {
            "alignChildren": {
              "$ref": "#/$defs/type-alignment",
              "description": "How to align the children within the stack such that their alignment points will be the same (default is topStart). Each child can override this with alignment property."
            }
          }
        }
      }
    },
    "ListView-payload": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/$defs/Templated-payload"
        },
        {
          "$ref": "#/$defs/HasPullToRefresh"
        },
        {
          "required": [
            "children"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "A unique identifier for this widget"
            },
            "children": {
              "$ref": "#/$defs/Widgets"
            },
            "onItemTap": {
              "description": "Dispatch when an ListView item is selected/tapped.The event dispatches only when you tap on the item. The index of the item can be retrieved using 'selectedItemIndex'.",
              "$ref": "#/$defs/Action-payload"
            },
            "selectedItemIndex": {
              "type": "integer",
              "description": "Selecting a ListView item gives the index of selected item"
            },
            "showLoading": {
              "type": "boolean",
              "description": "Show loading indicator. (Default is false)"
            },
            "loadingWidget": {
              "$ref": "#/$defs/Widget"
            },
            "onScrollEnd": {
              "$ref": "#/$defs/Action-payload",
              "description": "Execute an Ensemble action when user has reached bottom of list."
            },
            "styles": {
              "allOf": [
                {
                  "$ref": "#/$defs/boxLayoutStyles"
                },
                {
                  "$ref": "#/$defs/baseStyles"
                },
                {
                  "type": "object",
                  "properties": {
                    "showSeparator": {
                      "type": "boolean",
                      "description": "Show a separator between the items (default is true)."
                    },
                    "separatorColor": {
                      "$ref": "#/$defs/type-color",
                      "description": "Set the color for the separator between items"
                    },
                    "separatorWidth": {
                      "type": "integer",
                      "description": "The thickness of the separator between items"
                    },
                    "separatorPadding": {
                      "oneOf": [
                        {
                          "title": "string",
                          "type": "string"
                        },
                        {
                          "title": "integer",
                          "type": "integer"
                        }
                      ],
                      "description": "Padding with CSS-style value e.g. padding: 5 20 5 Default 0 0 0"
                    },
                    "reverse": {
                      "type": "boolean",
                      "description": "Show list in reverse order. Default is false"
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "Carousel-payload": {
      "type": "object",
      "allOf": [
        {
          "required": [
            "children"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "A unique identifier for this widget"
            },
            "children": {
              "$ref": "#/$defs/Widgets"
            },
            "onItemChange": {
              "description": "Dispatch when an carousel item is in focus. For SingleView, this happens when the item is scroll into view. For scrolling MultiView, the event dispatches only when you tap on the item. The index of the item can be retrieved using 'selectedIndex'.",
              "$ref": "#/$defs/Action-payload"
            },
            "styles": {
              "allOf": [
                {
                  "$ref": "#/$defs/boxStylesWithoutDimension"
                },
                {
                  "type": "object",
                  "properties": {
                    "layout": {
                      "type": "string",
                      "description": "Show a SingleView (on screen one at a time), MultiView (scrolling items), or automatically switch between the views with autoLayoutBreakpoint",
                      "enum": [
                        "auto",
                        "single",
                        "multiple"
                      ]
                    },
                    "autoLayoutBreakpoint": {
                      "type": "integer",
                      "description": "Show multiple views on the carousel if the breakpoint is equal or larger than this threshold, otherwise show single view. (default 768)"
                    },
                    "height": {
                      "type": "integer",
                      "description": "The height of each view"
                    },
                    "gap": {
                      "type": "integer",
                      "description": "The gap between each views, but also act as a left-right margin in a single view"
                    },
                    "leadingGap": {
                      "type": "integer",
                      "description": "The space before the first item. Note that the left edge of the scroll area is still controlled by padding or margin."
                    },
                    "trailingGap": {
                      "type": "integer",
                      "description": "The space after the last item. Note that the right edge of the scroll area is still controlled by padding or margin."
                    },
                    "singleItemWidthRatio": {
                      "type": "number",
                      "description": "The screen width ratio for each carousel item (in single item mode). Value ranges from 0.0 to 1.0 for the full width. (default 1.0)",
                      "minimum": 0,
                      "maximum": 1
                    },
                    "multipleItemWidthRatio": {
                      "type": "number",
                      "description": "The screen width ratio for each carousel item (in multiple item mode). Value ranges from 0.0 to 1.0 for the full width (default 0.6)",
                      "minimum": 0,
                      "maximum": 1
                    },
                    "indicatorType": {
                      "type": "string",
                      "description": "How the view indicator should be displayed",
                      "enum": [
                        "none",
                        "circle",
                        "rectangle"
                      ]
                    },
                    "indicatorPosition": {
                      "type": "string",
                      "description": "Where to display the indicator if specified",
                      "enum": [
                        "bottom",
                        "top"
                      ]
                    },
                    "indicatorWidth": {
                      "type": "integer"
                    },
                    "indicatorHeight": {
                      "type": "integer"
                    },
                    "autoplay": {
                      "type": "boolean",
                      "description": "If true, Enables autoplay, sliding one page at a time. Default (false)"
                    },
                    "enableLoop": {
                      "type": "boolean",
                      "description": "Determines if carousel should loop infinitely or be limited to item length. Default (false)"
                    },
                    "selectedItemIndex": {
                      "type": "integer",
                      "description": "The initial page to show when first creating the Carousel. Default (0)"
                    },
                    "autoplayInterval": {
                      "type": "integer",
                      "description": "Sets the duration in seconds for the autoplay. Default (4 second)"
                    },
                    "indicatorMargin": {
                      "oneOf": [
                        {
                          "title": "string",
                          "type": "string"
                        },
                        {
                          "title": "integer",
                          "type": "integer"
                        }
                      ],
                      "description": "The margin around each indicator"
                    }
                  }
                }
              ]
            }
          }
        },
        {
          "$ref": "#/$defs/Templated-payload"
        }
      ]
    },
    "Templated-payload": {
      "type": "object",
      "properties": {
        "item-template": {
          "type": "object",
          "properties": {
            "data": {
              "type": "string",
              "description": "Bind to an array of data from an API response or a variable"
            },
            "name": {
              "type": "string",
              "description": "Set the name to reference as you iterate through the array of data"
            },
            "template": {
              "$ref": "#/$defs/Widget",
              "description": "The widget to render for each item"
            }
          }
        }
      }
    },
    "BaseTextInput-payload": {
      "type": "object",
      "properties": {
        "onKeyPress": {
          "$ref": "#/$defs/Action-payload",
          "description": "On every keystroke, call Ensemble's built-in functions or execute code"
        },
        "onFocusReceived": {
          "$ref": "#/$defs/Action-payload",
          "description": "Execute an Ensemble action when the field receives focus"
        },
        "onFocusLost": {
          "$ref": "#/$defs/Action-payload",
          "description": "Execute an Ensemble action when the field loses focus"
        }
      }
    },
    "FormInput-payload": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "ID to be referenced later"
        },
        "maxWidth": {
          "type": "integer",
          "description": "The max width of this Input widget (default 700)",
          "minimum": 0,
          "maximum": 5000
        },
        "label": {
          "type": "string",
          "description": "Label for your widget"
        },
        "labelHint": {
          "type": "string",
          "description": "Hint text on your label"
        },
        "hintText": {
          "type": "string",
          "description": "Hint text explaining your widget"
        },
        "required": {
          "type": "boolean"
        },
        "enabled": {
          "type": "boolean"
        },
        "icon": {
          "$ref": "#/$defs/HasIcon",
          "description": "The icon to show before the Input field"
        },
        "onChange": {
          "$ref": "#/$defs/Action-payload",
          "description": "Call Ensemble's built-in functions or execute code when the input changes. Note for free-form text input, this event only dispatches if the text changes AND the focus is lost (e.g. clicking on button)"
        },
        "styles": {
          "allOf": [
            {
              "$ref": "#/$defs/baseStyles"
            },
            {
              "type": "object",
              "properties": {
                "variant": {
                  "type": "string",
                  "description": "Select a pre-defined look and feel for this Input widget. This property can be defined in the theme to apply to all Input widgets.",
                  "oneOf": [
                    {
                      "const": "underline",
                      "description": "draw an Underline below this input widget. This property can be defined in the theme to apply to all Input widgets."
                    },
                    {
                      "const": "box",
                      "description": "draw a Box border around this input widget. This property can be defined in the theme to apply to all Input widgets."
                    }
                  ]
                },
                "contentPadding": {
                  "oneOf": [
                    {
                      "title": "string",
                      "type": "string"
                    },
                    {
                      "title": "integer",
                      "type": "integer"
                    }
                  ],
                  "description": "Padding around your input content with CSS-style notation e.g. margin: 5 20 5"
                },
                "fillColor": {
                  "$ref": "#/$defs/type-color",
                  "description": "The fill color for this input fields. This property can be defined in the theme to apply to all Input widgets."
                },
                "borderRadius": {
                  "type": "integer",
                  "minimum": 0,
                  "description": "The border radius for this Input widget. This property can be defined in the theme to apply to all Input widgets."
                },
                "borderWidth": {
                  "type": "integer",
                  "minimum": 0,
                  "description": "The border width for this Input widget. This property can be defined in the theme to apply to all Input widgets."
                },
                "borderColor": {
                  "$ref": "#/$defs/type-color",
                  "description": "The base border color for this input widget. This border color determines the look and feel of your input, while the other colors are overrides for different states. This property can be defined in the theme to apply to all Input widgets."
                },
                "disabledBorderColor": {
                  "$ref": "#/$defs/type-color",
                  "description": "The border color when this input field is disabled. This property can be defined in the theme to apply to all Input widgets."
                },
                "errorBorderColor": {
                  "$ref": "#/$defs/type-color",
                  "description": "The border color when there are errors on this input field. This property can be defined in the theme to apply to all Input widgets."
                },
                "focusedBorderColor": {
                  "$ref": "#/$defs/type-color",
                  "description": "The border color when this input field is receiving focus. This property can be defined in the theme to apply to all Input widgets."
                },
                "focusedErrorBorderColor": {
                  "$ref": "#/$defs/type-color",
                  "description": "The border color of this input field when it is receiving focus in its error state. This property can be defined in the theme to apply to all Input widgets."
                },
                "floatLabel": {
                  "type": "boolean",
                  "description": "Moves the label on top of the Input Field. Default (False)."
                },
                "floatingLabelStyle": {
                  "$ref": "#/$defs/TextStyle",
                  "description": "Set the label's styles when it is in floating mode"
                },
                "labelStyle": {
                  "$ref": "#/$defs/TextStyle",
                  "description": "Set the label's styles"
                }
              }
            }
          ]
        }
      }
    },
    "keyboardAction": {
      "type": "string",
      "description": "Specify the action key on native device's soft keyboard",
      "oneOf": [
        {
          "const": "done",
          "description": "show the keyboard action that represents completion (e.g. Android's checkmark, iOS's Done)"
        },
        {
          "const": "go",
          "description": "show the keyboard action that represents go (e.g. Android's right arrow, iOS's Done)"
        },
        {
          "const": "search",
          "description": "show the keyboard action that represents search"
        },
        {
          "const": "send",
          "description": "show the keyboard action that represents send"
        },
        {
          "const": "next",
          "description": "Move the focus to the next focusable field"
        },
        {
          "const": "previous",
          "description": "Move the focus to the previous focusable field"
        }
      ]
    },
    "Action-payload": {
      "oneOf": [
        {
          "title": "Navigate Back",
          "type": "object",
          "required": [
            "navigateBack"
          ],
          "properties": {
            "navigateBack": {
              "type": "object",
              "description": "Navigating back to the previous screen if possible. The current screen will be removed from the navigation history. This also works for a modal screen.",
              "properties": {
                "payload": {
                  "type": "object",
                  "description": "Pass a payload of key/value pairs to the original screen that we are navigating back to."
                }
              }
            }
          }
        },
        {
          "title": "Navigate Screen",
          "type": "object",
          "required": [
            "navigateScreen"
          ],
          "properties": {
            "navigateScreen": {
              "type": "object",
              "description": "Navigating to a new screen",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Enter the Name or ID of your Screen"
                },
                "external": {
                  "type": "boolean",
                  "description": "(Default false) Specify if screen is externally provided or not. If set true the screen is expected from external source."
                },
                "inputs": {
                  "type": "object",
                  "description": "Specify the key/value pairs to pass into the next Screen",
                  "properties": {},
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "options": {
                  "type": "object",
                  "properties": {
                    "replaceCurrentScreen": {
                      "type": "boolean",
                      "description": "If true, the new screen will replace the current screen on the navigation history. Navigating back from the new screen will skip the current screen."
                    },
                    "clearAllScreens": {
                      "type": "boolean",
                      "description": "If true, clear out all existing screens in the navigation history. This is useful when navigating to a Logout or similar page where users should not be able to go back to the prior screens."
                    }
                  }
                },
                "onNavigateBack": {
                  "$ref": "#/$defs/Action-payload",
                  "description": "Invoke an Action when navigating back to this screen. The data (if specified by the removed screen) can be accessed with ${event.data})"
                }
              }
            }
          }
        },
        {
          "title": "Navigate External Screen",
          "type": "object",
          "required": [
            "navigateExternalScreen"
          ],
          "properties": {
            "navigateExternalScreen": {
              "type": "object",
              "description": "Navigating to a native screen outside of Ensemble (only iOS screens are currently supported - additional integration is required)",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the screen."
                },
                "inputs": {
                  "type": "object",
                  "description": "Specify the key/value pairs to pass into the Screen",
                  "properties": {},
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        {
          "title": "Navigate View Group",
          "type": "object",
          "required": [
            "navigateViewGroup"
          ],
          "properties": {
            "navigateViewGroup": {
              "type": "object",
              "description": "Navigate between the screens in the view group. It is applicable only when inside a ViewGroup",
              "required": [
                "viewIndex"
              ],
              "properties": {
                "viewIndex": {
                  "type": "integer",
                  "description": "Enter the index of the screen to navigate"
                }
              }
            }
          }
        },
        {
          "title": "Navigate Modal Screen",
          "type": "object",
          "required": [
            "navigateModalScreen"
          ],
          "properties": {
            "navigateModalScreen": {
              "type": "object",
              "description": "Navigating to a new screen as a modal",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Enter the Name or ID of your screen"
                },
                "inputs": {
                  "type": "object",
                  "description": "Specify the key/value pairs to pass into the next Screen",
                  "properties": {},
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "onModalDismiss": {
                  "$ref": "#/$defs/Action-payload",
                  "description": "Execute an Action when the modal screen is dismissed"
                }
              }
            }
          }
        },
        {
          "title": "Show Bottom Modal",
          "type": "object",
          "required": [
            "showBottomModal"
          ],
          "properties": {
            "showBottomModal": {
              "type": "object",
              "description": "Open a view as a bottom modal sheet",
              "required": [
                "body"
              ],
              "properties": {
                "body": {
                  "$ref": "#/$defs/Widget",
                  "description": "The custom widget to show as the bottom modal sheet."
                },
                "onDismiss": {
                  "$ref": "#/$defs/Action-payload",
                  "description": "Triggers an Action upon the Bottom Modal's dismissal. A payload (if specified) is available on 'event.data'"
                },
                "options": {
                  "type": "object",
                  "properties": {
                    "enableDrag": {
                      "type": "boolean",
                      "description": "Whether to drag a bottom modal sheet (default is True)"
                    },
                    "enableDragHandler": {
                      "type": "boolean",
                      "description": "Whether to show a drag handle divider on top of the bottom modal sheet for dragging (default is False)"
                    }
                  }
                },
                "styles": {
                  "type": "object",
                  "properties": {
                    "backgroundColor": {
                      "$ref": "#/$defs/type-color",
                      "description": "By default the background color uses the theme's 'bottomSheetTheme.backgroundColor'. You can override the bottom modal sheet's background color here."
                    },
                    "barrierColor": {
                      "$ref": "#/$defs/type-color",
                      "description": "By default the barrierColor color use theme's 'bottomSheetTheme.modalBarrierColor' . You can override the bottom modal sheet's barrierColor color here."
                    }
                  }
                }
              }
            }
          }
        },
        {
          "title": "Dismiss the Bottom Modal",
          "type": "object",
          "required": [
            "dismissBottomModal"
          ],
          "properties": {
            "dismissBottomModal": {
              "properties": {
                "payload": {
                  "type": "object",
                  "description": "Pass a payload of key/value pairs to the Bottom Modal's onDismiss action"
                }
              }
            }
          }
        },
        {
          "title": "Open Plaid Link",
          "type": "object",
          "required": [
            "openPlaidLink"
          ],
          "properties": {
            "openPlaidLink": {
              "type": "object",
              "description": "It will open the Plaid Link Service",
              "required": [
                "linkToken"
              ],
              "properties": {
                "linkToken": {
                  "type": "string",
                  "description": "Enter the Plaid Link Token. It can be created from /link/token/create endpoint of Plaid"
                },
                "onSuccess": {
                  "$ref": "#/$defs/Action-payload",
                  "description": "It is called when a user successfully links an Item"
                },
                "onEvent": {
                  "$ref": "#/$defs/Action-payload",
                  "description": "It is called when certain events in the Plaid Link flow have occurred, for example, when the user selected an institution. This enables your application to gain further insight into what is going on as the user goes through the Plaid Link flow"
                },
                "onExit": {
                  "$ref": "#/$defs/Action-payload",
                  "description": "It is called when a user exits Link without successfully linking an Item, or when an error occurs during Link initialization"
                }
              }
            }
          }
        },
        {
          "title": "Receive Intent",
          "type": "object",
          "required": [
            "receiveIntent"
          ],
          "properties": {
            "receiveIntent": {
              "type": "object",
              "description": "To receive photos, videos, texts, urls or any other files which is shared from another app",
              "properties": {
                "onReceive": {
                  "$ref": "#/$defs/Action-payload",
                  "description": "It is called when the data received successfully from another app"
                },
                "onError": {
                  "$ref": "#/$defs/Action-payload",
                  "description": "It is called when it is failed to receive the data which is shared from another app"
                }
              }
            }
          }
        },
        {
          "title": "Get Phone Contacts",
          "type": "object",
          "required": [
            "getPhoneContacts"
          ],
          "properties": {
            "getPhoneContacts": {
              "type": "object",
              "description": "It allows to get the contacts from the device",
              "properties": {
                "onSuccess": {
                  "$ref": "#/$defs/Action-payload",
                  "description": "It is called when it's fetched the device contacts successfully"
                },
                "onError": {
                  "$ref": "#/$defs/Action-payload",
                  "description": "It is called when the action failed to get the device contacts"
                }
              }
            }
          }
        },
        {
          "title": "Open URL",
          "type": "object",
          "required": [
            "openUrl"
          ],
          "properties": {
            "openUrl": {
              "type": "object",
              "description": "Open URL in ensemble or a separate app",
              "properties": {
                "url": {
                  "type": "string",
                  "description": "The URL to open"
                },
                "openInExternalApp": {
                  "type": "boolean",
                  "description": "Open URL in an external app"
                }
              }
            }
          }
        },
        {
          "title": "Open App Settings",
          "type": "object",
          "required": [
            "openAppSettings"
          ],
          "properties": {
            "openAppSettings": {
              "type": "object",
              "description": "Open the device's Settings",
              "properties": {
                "target": {
                  "type": "string",
                  "enum": [
                    "settings",
                    "notification",
                    "subscriptions",
                    "accessibility",
                    "alarm",
                    "apn",
                    "batteryOptimization",
                    "bluetooth",
                    "dataRoaming",
                    "date",
                    "developer",
                    "device",
                    "display",
                    "hotspot",
                    "internalStorage",
                    "location",
                    "lockAndPassword",
                    "nfc",
                    "security",
                    "sound",
                    "vpn",
                    "wifi",
                    "wireless"
                  ]
                }
              }
            }
          }
        },
        {
          "title": "Invoke API",
          "type": "object",
          "required": [
            "invokeAPI"
          ],
          "properties": {
            "invokeAPI": {
              "$ref": "#/$defs/InvokeAPI-payload"
            }
          }
        },
        {
          "title": "Open Camera",
          "type": "object",
          "required": [
            "openCamera"
          ],
          "properties": {
            "openCamera": {
              "type": "object",
              "description": "Open Camera",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Give the camera an ID, allows you to bind to its result. e.g. ${cameraId.files...}"
                },
                "onComplete": {
                  "$ref": "#/$defs/Action-payload",
                  "description": "Execute an Action after completing capturing media"
                },
                "onClose": {
                  "$ref": "#/$defs/Action-payload",
                  "description": "Execute an Action on camera close"
                },
                "onCapture": {
                  "$ref": "#/$defs/Action-payload",
                  "description": "Execute an Action on each capture"
                },
                "options": {
                  "type": "object",
                  "properties": {
                    "mode": {
                      "type": "string",
                      "description": "Modes of camera. It can be photo only i.e allows to capture just photo. Similarly video or can be both.",
                      "enum": [
                        "photo",
                        "video",
                        "both"
                      ]
                    },
                    "initialCamera": {
                      "type": "string",
                      "description": "Initialize either camera, back or front",
                      "enum": [
                        "back",
                        "front"
                      ]
                    },
                    "allowGalleryPicker": {
                      "type": "boolean",
                      "description": "Allow users to pick media from gallery. Default (true)."
                    },
                    "allowCameraRotate": {
                      "type": "boolean",
                      "description": "Allow users rotate camera i.e back and front. Default (true)."
                    },
                    "allowFlashControl": {
                      "type": "boolean",
                      "description": "Allow users to control flash options. Default (true)."
                    },
                    "preview": {
                      "type": "boolean",
                      "description": "If set true, users can view captured/selected media."
                    },
                    "maxCount": {
                      "type": "number",
                      "description": "It used to control number of media that can be captured/selected"
                    },
                    "maxCountMessage": {
                      "type": "string",
                      "description": "Custom message to show when captured/selected media is greater than maxCount"
                    },
                    "permissionDeniedMessage": {
                      "type": "string",
                      "description": "Set custom message when access to camera is denied"
                    },
                    "nextButtonLabel": {
                      "type": "string",
                      "description": "Set custom label on next button."
                    },
                    "cameraRotateIcon": {
                      "$ref": "#/$defs/Icon-payload",
                      "description": "Set custom icon for camera rotate button"
                    },
                    "galleryPickerIcon": {
                      "$ref": "#/$defs/Icon-payload",
                      "description": "Set custom icon for gallery picker button"
                    },
                    "focusIcon": {
                      "$ref": "#/$defs/Icon-payload",
                      "description": "Set custom icon for focus node."
                    },
                    "assistAngle": {
                      "type": "object",
                      "description": "Show assist message whenever angle goes below minAngle or above minAngle",
                      "properties": {
                        "minAngle": {
                          "type": "number",
                          "description": "Minimum angle "
                        },
                        "maxAngle": {
                          "type": "number",
                          "description": "Maximum angle "
                        },
                        "maxAngleassistAngleMessage": {
                          "type": "number",
                          "description": "Custom message to show when condition is hit."
                        }
                      }
                    },
                    "assistSpeed": {
                      "type": "object",
                      "description": "Show assist message whenever camera is moving faster than maxSpeed",
                      "properties": {
                        "maxSpeed": {
                          "type": "number",
                          "description": "Maxium speed in km/hr."
                        },
                        "assistSpeedMessage": {
                          "type": "number",
                          "description": "Custom message to show when condition is hit."
                        }
                      }
                    },
                    "autoCaptureInterval": {
                      "type": "integer",
                      "description": "If set any number n, on each n interval camera will capture"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "title": "Show Dialog",
          "type": "object",
          "required": [
            "showDialog"
          ],
          "properties": {
            "showDialog": {
              "type": "object",
              "description": "Opening a dialog",
              "required": [
                "widget"
              ],
              "properties": {
                "widget": {
                  "$ref": "#/$defs/Widget",
                  "description": "Return an inline widget or specify a custom widget's name to use in the dialog."
                },
                "options": {
                  "type": "object",
                  "properties": {
                    "minWidth": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "maxWidth": {
                      "type": "integer"
                    },
                    "minHeight": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "maxHeight": {
                      "type": "integer"
                    },
                    "horizontalOffset": {
                      "description": "Offset the dialog's position horizontally, with -1.0 for the screen's left and 1.0 for the screen's right. (default is 0 for centering horizontally)",
                      "type": "number",
                      "minimum": -1.0,
                      "maximum": 1.0
                    },
                    "verticalOffset": {
                      "description": "Offset the dialog's position vertically, with -1.0 for the screen's top and 1.0 for the screen's bottom. (default is 0 for centering vertically)",
                      "type": "number",
                      "minimum": -1.0,
                      "maximum": 1.0
                    },
                    "style": {
                      "type": "string",
                      "description": "Render the dialog with a default style. You can also specify 'none' and control your own styles in your widget.",
                      "enum": [
                        "default",
                        "none"
                      ]
                    }
                  }
                },
                "onDialogDismiss": {
                  "$ref": "#/$defs/Action-payload",
                  "description": "Execute an Action when the dialog is dismissed."
                }
              }
            }
          }
        },
        {
          "title": "Close All Dialogs",
          "type": "object",
          "required": [
            "closeAllDialogs"
          ],
          "properties": {
            "closeAllDialogs": {
              "type": "object",
              "description": "Closing all opened dialogs",
              "properties": {}
            }
          }
        },
        {
          "title": "Start Timer",
          "type": "object",
          "required": [
            "startTimer"
          ],
          "properties": {
            "startTimer": {
              "type": "object",
              "description": "Initiating the start of a timer",
              "required": [
                "onTimer"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Give this timer an ID so it can be cancelled by a stopTimer action"
                },
                "onTimer": {
                  "$ref": "#/$defs/Action-payload",
                  "description": "Execute an Action every time the timer triggers"
                },
                "onTimerComplete": {
                  "$ref": "#/$defs/Action-payload",
                  "description": "Execute an Action when the timer has completed and will terminate"
                },
                "options": {
                  "type": "object",
                  "properties": {
                    "isGlobal": {
                      "type": "boolean",
                      "description": "Marking this timer as global will ensure the timer, if repeating indefinitely, will continue to run even if the user navigates away from the screen, until explicitly stopped by the stopTimer action. Note that there can only ever be one global timer. Creating a new global timer will automatically cancel the previous global timer."
                    },
                    "startAfter": {
                      "type": "integer",
                      "minimum": 0,
                      "description": "Delay the timer's start by this number of seconds. If not specified and repeat is true, repeatInterval will be used. If none is specified, there will be no initial delay"
                    },
                    "repeat": {
                      "type": "boolean",
                      "description": "Whether the time should repeat and trigger at every repeatInterval seconds. This Timer will run continuously unless a maxNumberOfTimes is specified"
                    },
                    "repeatInterval": {
                      "type": "integer",
                      "minimum": 1,
                      "description": "Trigger the timer periodically at this repeatInterval (in seconds)"
                    },
                    "maxNumberOfTimes": {
                      "type": "integer",
                      "minimum": 1,
                      "description": "Set the max number of times the timer will triggers, if repeat is true"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "title": "Stop Timer",
          "type": "object",
          "required": [
            "stopTimer"
          ],
          "properties": {
            "stopTimer": {
              "type": "object",
              "description": "Stop a timer if it is running",
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Stop the timer with this ID if it is running"
                }
              }
            }
          }
        },
        {
          "title": "Show Toast",
          "type": "object",
          "required": [
            "showToast"
          ],
          "properties": {
            "showToast": {
              "type": "object",
              "description": "Showing a toast message",
              "oneOf": [
                {
                  "required": [
                    "message"
                  ]
                },
                {
                  "required": [
                    "widget"
                  ]
                }
              ],
              "properties": {
                "message": {
                  "type": "string",
                  "description": "The toast message. Either this message or a widget must be provided."
                },
                "widget": {
                  "$ref": "#/$defs/Widget",
                  "description": "The custom widget to show as the Toast's body. Either this widget or a toast message must be provided."
                },
                "options": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "Select a built-in toast style.",
                      "enum": [
                        "success",
                        "error",
                        "warning",
                        "info"
                      ]
                    },
                    "dismissible": {
                      "type": "boolean",
                      "description": "Whether to show a dismiss button (default is True)"
                    },
                    "alignment": {
                      "$ref": "#/$defs/type-alignment"
                    },
                    "duration": {
                      "type": "integer",
                      "description": "The number of seconds before the toast is dismissed",
                      "minimum": 1
                    }
                  }
                },
                "styles": {
                  "allOf": [
                    {
                      "$ref": "#/$defs/backgroundColor",
                      "description": "Toast's background color"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "shadowColor": {
                          "oneOf": [
                            {
                              "title": "string",
                              "type": "string"
                            },
                            {
                              "title": "number",
                              "type": "number"
                            }
                          ],
                          "description": "box shadow color starting with '0xFF' for full opacity"
                        },
                        "shadowRadius": {
                          "type": "integer",
                          "minimum": 0
                        },
                        "shadowOffset": {
                          "type": "array",
                          "items": {
                            "type": "integer"
                          }
                        }
                      }
                    },
                    {
                      "$ref": "#/$defs/stylePadding"
                    },
                    {
                      "$ref": "#/$defs/borderRadius"
                    }
                  ]
                }
              }
            }
          }
        },
        {
          "title": "Execute Code V1 (Deprecated)",
          "type": "string"
        },
        {
          "title": "Execute Code V2",
          "type": "object",
          "required": [
            "executeCode"
          ],
          "properties": {
            "executeCode": {
              "description": "Execute a block of code.",
              "type": "object",
              "required": [
                "body"
              ],
              "properties": {
                "body": {
                  "type": "string",
                  "description": "Define your code block here, starting with //@code"
                },
                "onComplete": {
                  "$ref": "#/$defs/Action-payload",
                  "description": "Execute another Action when the code body finishes executing"
                }
              }
            }
          }
        },
        {
          "title": "Get Location",
          "type": "object",
          "required": [
            "getLocation"
          ],
          "properties": {
            "getLocation": {
              "type": "object",
              "description": "Requesting user's permission to get his/her current location",
              "properties": {
                "options": {
                  "type": "object",
                  "properties": {
                    "recurring": {
                      "type": "boolean",
                      "description": "Whether to continuously get the device location on this screen. Note that a screen can only have one recurring location listener. Adding multiple recurring location listeners will cancel the previous one."
                    },
                    "recurringDistanceFilter": {
                      "type": "integer",
                      "minimum": 50,
                      "description": "If recurring, the minimum distance (in meters) the device has moved before new location is returned. (default: 1000 meters, minimum: 50 meters)"
                    }
                  }
                },
                "onLocationReceived": {
                  "$ref": "#/$defs/Action-payload",
                  "description": "Callback Action once we get the device location"
                },
                "onError": {
                  "$ref": "#/$defs/Action-payload",
                  "description": "Callback Action if we are unable to get the device location. Reason is available under 'reason' field"
                }
              }
            }
          }
        },
        {
          "title": "Upload Files",
          "type": "object",
          "required": [
            "uploadFiles"
          ],
          "properties": {
            "uploadFiles": {
              "type": "object",
              "description": "Allow users to upload files to an API from the camera or file system",
              "required": [
                "uploadApi",
                "files"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Give the uploadApi an ID, allows you to bind to its result. e.g. ${apiId.body...}"
                },
                "uploadApi": {
                  "type": "string",
                  "description": "Enter the name of your defined API"
                },
                "onComplete": {
                  "$ref": "#/$defs/Action-payload",
                  "description": "Execute another Action upon successful upload of files"
                },
                "onError": {
                  "$ref": "#/$defs/Action-payload",
                  "description": "Execute an Action when uploader fails with error(s)"
                },
                "inputs": {
                  "type": "array",
                  "description": "Define the list of input names that upload API accepts"
                },
                "fieldName": {
                  "type": "string",
                  "description": "Field name that your server is expecting (default files)"
                },
                "files": {
                  "type": "string",
                  "description": "Binded files from sources like camera or picker. e.g ${filePicker.files}, ${camerId.files}"
                },
                "options": {
                  "type": "object",
                  "properties": {
                    "maxFileSize": {
                      "type": "integer",
                      "description": "File size that is allowed (default 100 mb), If multiple is allow then sum of all files"
                    },
                    "overMaxFileSizeMessage": {
                      "type": "string",
                      "description": "Error message to show when selected files size is above maxFileSize."
                    },
                    "backgroundTask": {
                      "type": "boolean",
                      "description": "If set true, uploading will be done in background."
                    },
                    "showNotification": {
                      "type": "boolean",
                      "description": "If set true, progress will be show in notification bar."
                    },
                    "networkType": {
                      "type": "object",
                      "description": "An enumeration of network types.",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "connected",
                            "metered",
                            "not_required",
                            "not_roaming",
                            "unmetered",
                            "temporarily_unmetered"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "title": "Pick Files",
          "type": "object",
          "required": [
            "pickFiles"
          ],
          "properties": {
            "pickFiles": {
              "type": "object",
              "description": "Pick files using system picker",
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Give the picker an ID allows you to bind to its result, which can be access anywhere e.g. ${filePicker.files...}"
                },
                "allowMultiple": {
                  "type": "boolean",
                  "description": "Allow users to pick multiple files (default False)"
                },
                "allowCompression": {
                  "type": "boolean",
                  "description": "It will allow media to apply the default OS compression (default True)"
                },
                "allowedExtensions": {
                  "type": "array",
                  "description": "Allow files with specific extension e.g jpg, png, pdf"
                }
              }
            }
          }
        },
        {
          "title": "Copy to Clipboard",
          "type": "object",
          "required": [
            "copyToClipboard"
          ],
          "properties": {
            "copyToClipboard": {
              "type": "object",
              "description": "Copy the text to the clipboard",
              "properties": {
                "value": {
                  "type": "string",
                  "description": "The text to copy to clipboard"
                },
                "onSuccess": {
                  "$ref": "#/$defs/Action-payload",
                  "description": "Execute another Action upon successful copy to clipboard"
                },
                "onFailure": {
                  "$ref": "#/$defs/Action-payload",
                  "description": "Execute an Action when copy to clipboard fails"
                }
              }
            }
          }
        },
        {
          "title": "Share",
          "type": "object",
          "required": [
            "share"
          ],
          "properties": {
            "share": {
              "type": "object",
              "description": "Open each platform's share sheet",
              "required": [
                "text"
              ],
              "properties": {
                "text": {
                  "type": "string",
                  "description": "Text and/or URL to share"
                },
                "title": {
                  "type": "string",
                  "description": "Optional title (e.g. email's title)"
                }
              }
            }
          }
        },
        {
          "title": "Rate App",
          "type": "object",
          "required": [
            "rateApp"
          ],
          "properties": {
            "rateApp": {
              "type": "object",
              "description": "(iOS only) Prompt the user to rate this App"
            }
          }
        },
        {
          "title": "Update Badge Count",
          "type": "object",
          "required": [
            "updateBadgeCount"
          ],
          "properties": {
            "updateBadgeCount": {
              "type": "object",
              "description": "Update the app's badge count (applicable on iOS, MacOS, and some Android devices only). Notifications must also be enabled for this to work properly.",
              "required": [
                "count"
              ],
              "properties": {
                "count": {
                  "type": "integer",
                  "minimum": 0,
                  "description": "Update the app's badge count (applicable on iOS, MacOS, and some Android devices)"
                }
              }
            }
          }
        },
        {
          "title": "Clear Badge Count",
          "type": "object",
          "required": [
            "clearBadgeCount"
          ],
          "properties": {
            "clearBadgeCount": {
              "type": "object",
              "description": "Clear the app's badge count (applicable on iOS, MacOS, and some Android devices only). Notifications must also be enabled for this to work properly."
            }
          }
        },
        {
          "title": "Connect Wallet",
          "type": "object",
          "required": [
            "connectWallet"
          ],
          "properties": {
            "connectWallet": {
              "type": "object",
              "description": "Allow users connect to crypto wallet",
              "required": [
                "wcProjectId",
                "appMetaData"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "ID allows you to bind to its result. e.g. ${wallet.addresses...},"
                },
                "wcProjectId": {
                  "type": "string",
                  "description": "Wallet connect project Id, get it from wallet connect dashboard"
                },
                "onComplete": {
                  "$ref": "#/$defs/Action-payload",
                  "description": "Execute another Action upon successful upload of files"
                },
                "onError": {
                  "$ref": "#/$defs/Action-payload",
                  "description": "Execute an Action when uploader fails with error(s)"
                },
                "appMetaData": {
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Your app name, that will be shared to crypto wallet"
                    },
                    "description": {
                      "type": "string",
                      "description": "Your app's description, that will be shared to crypto wallet"
                    },
                    "url": {
                      "type": "string",
                      "description": "You app's / company's url"
                    },
                    "iconUrl": {
                      "type": "string",
                      "description": "Url path of your app's icon"
                    }
                  }
                }
              }
            }
          }
        },
        {
          "title": "Initialize notification",
          "type": "object",
          "required": [
            "requestNotificationAccess"
          ],
          "properties": {
            "requestNotificationAccess": {
              "type": "object",
              "description": "Request user permission to send notifications to the device",
              "properties": {
                "onAccept": {
                  "$ref": "#/$defs/Action-payload",
                  "description": "Execute an Action when notification permission has been granted"
                },
                "onReject": {
                  "$ref": "#/$defs/Action-payload",
                  "description": "Execute an Action when notification permission has been rejected"
                }
              }
            }
          }
        },
        {
          "title": "Show Notification",
          "type": "object",
          "required": [
            "showNotification"
          ],
          "properties": {
            "showNotification": {
              "type": "object",
              "description": "Show notification this is local notification.",
              "properties": {
                "title": {
                  "type": "string",
                  "description": "Title of notification"
                },
                "body": {
                  "type": "string",
                  "description": "Body of notification"
                }
              }
            }
          }
        },
        {
          "title": "Notification",
          "type": "object",
          "required": [
            "notification"
          ],
          "properties": {
            "notification": {
              "type": "object",
              "description": "Handling notifications.",
              "required": [
                "onTap",
                "onReceive"
              ],
              "properties": {
                "onTap": {
                  "$ref": "#/$defs/Action-payload",
                  "description": "Execute an Action on notification is tap."
                },
                "onReceive": {
                  "$ref": "#/$defs/Action-payload",
                  "description": "Execute an Action on notification is receive."
                }
              }
            }
          }
        },
        {
          "title": "CheckPermission",
          "type": "object",
          "required": [
            "checkPermission"
          ],
          "properties": {
            "checkPermission": {
              "type": "object",
              "description": "Check for user permissions for certain device capabilities",
              "required": [
                "type"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "notification"
                  ]
                },
                "onAuthorized": {
                  "$ref": "#/$defs/Action-payload",
                  "description": "Execute an Action if this permission was authorized by the user."
                },
                "onDenied": {
                  "$ref": "#/$defs/Action-payload",
                  "description": "Execute an Action if this permission was denied by the user."
                },
                "onNotDetermined": {
                  "$ref": "#/$defs/Action-payload",
                  "description": "Execute an Action if we can't determine the permission's status. Note that this state is not applicable on Android."
                }
              }
            }
          }
        },
        {
          "title": "Connect Socket",
          "type": "object",
          "required": [
            "connectSocket"
          ],
          "properties": {
            "connectSocket": {
              "type": "object",
              "description": "Connect to a given socket name.",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Enter the name of your defined socket"
                },
                "inputs": {
                  "type": "object",
                  "description": "Specify the key/value pairs to pass to the socket",
                  "properties": {},
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "onSuccess": {
                  "$ref": "#/$defs/Action-payload",
                  "description": "Execute this callback upon a successful connection of socket with server."
                },
                "onError": {
                  "$ref": "#/$defs/Action-payload",
                  "description": "Execute this callback upon a encountering error while trying to do socket connection."
                }
              }
            }
          }
        },
        {
          "title": "Disconnect Socket",
          "type": "object",
          "required": [
            "disconnectSocket"
          ],
          "properties": {
            "disconnectSocket": {
              "type": "object",
              "description": "Disconnect socket to a given name.",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Enter the name of your defined socket"
                }
              }
            }
          }
        },
        {
          "title": "Message Socket",
          "type": "object",
          "required": [
            "messageSocket"
          ],
          "properties": {
            "messageSocket": {
              "type": "object",
              "description": "Send a message to a given socket name.",
              "required": [
                "name",
                "message"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Enter the name of your defined socket"
                },
                "message": {
                  "type": "object",
                  "description": "Specify the key/value pairs to pass to the socket",
                  "properties": {},
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        {
          "title": "Call an External Method",
          "type": "object",
          "required": [
            "callExternalMethod"
          ],
          "properties": {
            "callExternalMethod": {
              "type": "object",
              "description": "Call an external method defined outside of Ensemble",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The method name defined in your code"
                },
                "payload": {
                  "type": "object",
                  "description": "The key/value pairs payload to be sent as the input parameters for your method"
                },
                "onComplete": {
                  "$ref": "#/$defs/Action-payload",
                  "description": "Called when the method has finished its execution. Return value (if any) is available under 'event.data'"
                },
                "onError": {
                  "$ref": "#/$defs/Action-payload",
                  "description": "Called when there is an error while executing the method. The error reason is available under 'event.error'"
                }
              }
            }
          }
        },
        {
          "title": "Call a native method defined inside the Host Platform",
          "type": "object",
          "required": [
            "callNativeMethod"
          ],
          "properties": {
            "callNativeMethod": {
              "type": "object",
              "description": "Call a native method defined in the Host Platform",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The method channel name defined in your host platform"
                },
                "payload": {
                  "type": "object",
                  "description": "The key/value pairs payload to be sent as the input parameters for your method"
                },
                "onComplete": {
                  "$ref": "#/$defs/Action-payload",
                  "description": "Called when the method has finished its execution"
                },
                "onError": {
                  "$ref": "#/$defs/Action-payload",
                  "description": "Called when there is an error while executing the method. The error reason is available under 'event.error'"
                }
              }
            }
          }
        }
      ]
    },
    "Margin-payload": {
      "oneOf": [
        {
          "title": "string",
          "type": "string"
        },
        {
          "title": "integer",
          "type": "integer"
        }
      ],
      "description": "Margin with CSS-style notation (1 to 4 integers) e.g. margin: 5 20 5"
    },
    "Padding-payload": {
      "oneOf": [
        {
          "title": "string",
          "type": "string"
        },
        {
          "title": "integer",
          "type": "integer"
        }
      ],
      "description": "Padding with CSS-style notation (1 to 4 integers) e.g. padding: 5 20 5"
    },
    "MenuBase": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "reloadView": {
          "type": "boolean",
          "description": "It will reload the page each time when clicking the menu item"
        },
        "items": {
          "type": "array",
          "description": "List of menu items (minimum 2)",
          "items": {
            "type": "object",
            "required": [
              "icon",
              "label",
              "page"
            ],
            "properties": {
              "icon": {
                "type": "object",
                "description": "Icon name from Material Icons or Font Awesome",
                "$ref": "#/$defs/BaseIcon-payload"
              },
              "label": {
                "type": "string"
              },
              "page": {
                "type": "string",
                "description": "The new page to navigate to on click"
              },
              "selected": {
                "type": "boolean",
                "description": "Mark this item as selected. There should only be one selected item per page."
              }
            }
          }
        },
        "styles": {
          "allOf": [
            {
              "$ref": "#/$defs/backgroundColor"
            }
          ]
        }
      }
    },
    "BottomNavBarMenuItems-Payload": {
      "properties": {
        "styles": {
          "allOf": [
            {
              "$ref": "#/$defs/HasShadow"
            },
            {
              "type": "object",
              "properties": {
                "color": {
                  "$ref": "#/$defs/type-color",
                  "description": "Unselected icon color, starting with '0xFF' for full opacity e.g 0xFFCCCCCC"
                },
                "selectedColor": {
                  "$ref": "#/$defs/type-color",
                  "description": "Selected icon color, starting with '0xFF' for full opacity e.g 0xFFCCCCCC"
                },
                "backgroundColor": {
                  "$ref": "#/$defs/type-color",
                  "description": "Background color, starting with '0xFF' for full opacity e.g 0xFFCCCCCC"
                },
                "floatingBackgroundColor": {
                  "$ref": "#/$defs/type-color",
                  "description": "Floating item background color, starting with '0xFF' for full opacity e.g 0xFFCCCCCC"
                },
                "floatingIconColor": {
                  "$ref": "#/$defs/type-color",
                  "description": "Floating item icon color, starting with '0xFF' for full opacity e.g 0xFFCCCCCC"
                },
                "height": {
                  "type": "integer",
                  "description": "Set the height of the BottomNavBar."
                },
                "padding": {
                  "$ref": "#/$defs/Padding-payload"
                },
                "margin": {
                  "$ref": "#/$defs/Margin-payload"
                },
                "borderRadius": {
                  "$ref": "#/$defs/borderRadius"
                }
              }
            }
          ]
        },
        "reloadView": {
          "type": "boolean",
          "description": "It will reload the page each time when clicking the menu item"
        },
        "items": {
          "type": "array",
          "description": "List of menu items (minimum 2)",
          "items": {
            "type": "object",
            "properties": {
              "icon": {
                "type": "object",
                "description": "Icon name from Material Icons or Font Awesome",
                "$ref": "#/$defs/BaseIcon-payload"
              },
              "label": {
                "type": "string"
              },
              "page": {
                "type": "string",
                "description": "The new page to navigate to on click"
              },
              "selected": {
                "type": "boolean",
                "description": "Mark this item as selected. There should only be one selected item per page."
              },
              "activeIcon": {
                "type": "string",
                "description": "Icon name from Material Icons or Font Awesome"
              },
              "floating": {
                "type": "boolean",
                "description": "Mark this item as a floating icon"
              },
              "floatingMargin": {
                "$ref": "#/$defs/Margin-payload",
                "description": "The margin around the floating."
              },
              "floatingAlignment": {
                "$ref": "#/$defs/type-alignment",
                "description": "How to align the floating in the BottomNavBar. The values are left, center, right and none"
              },
              "onTap": {
                "$ref": "#/$defs/Action-payload",
                "description": "Call Ensemble's built-in functions"
              },
              "customItem": {
                "type": "object",
                "required": [
                  "widget"
                ],
                "properties": {
                  "widget": {
                    "$ref": "#/$defs/Widget",
                    "description": "Custom bottom navigation item for the unselected state"
                  },
                  "selectedWidget": {
                    "$ref": "#/$defs/Widget",
                    "description": "Custom bottom navigation item for the selected state"
                  }
                }
              }
            }
          }
        }
      }
    },
    "MenuWithHeaderAndFooter": {
      "allOf": [
        {
          "$ref": "#/$defs/MenuBase"
        },
        {
          "properties": {
            "header": {
              "$ref": "#/$defs/Widget",
              "description": "The header widget for the menu"
            },
            "footer": {
              "type": "object",
              "properties": {
                "style": {
                  "$ref": "#/$defs/boxStyles"
                },
                "dragOptions": {
                  "type": "object",
                  "properties": {
                    "enable": {
                      "type": "boolean"
                    },
                    "initialSize": {
                      "type": "number",
                      "description": "Default it 0.5 i.e 50% of screen"
                    },
                    "minSize": {
                      "type": "number",
                      "description": "Minimum size of till sheet can go. Default is 0.25 i.e 25% of screen."
                    },
                    "maxSize": {
                      "type": "number",
                      "description": "Maximum size of till sheet can go. Default is 1 i.e 100% of screen."
                    },
                    "span": {
                      "type": "boolean",
                      "description": "Whether the widget should snap between [snapSizes] when the user lifts their finger during a drag."
                    },
                    "spanSizes": {
                      "type": "array",
                      "description": "The list of number each ranging from minSize to maxSize.",
                      "items": {
                        "type": "number"
                      }
                    }
                  }
                },
                "children": {
                  "$ref": "#/$defs/Widgets"
                }
              }
            }
          }
        }
      ]
    },
    "MenuWithAdditionalStyles": {
      "allOf": [
        {
          "$ref": "#/$defs/MenuWithHeaderAndFooter"
        },
        {
          "properties": {
            "reloadView": {
              "type": "boolean",
              "description": "It will reload the page each time when clicking the menu item"
            },
            "styles": {
              "properties": {
                "borderColor": {
                  "$ref": "#/$defs/type-color"
                },
                "borderWidth": {
                  "type": "integer"
                },
                "itemDisplay": {
                  "type": "string",
                  "description": "How to render each navigation item",
                  "enum": [
                    "stacked",
                    "sideBySide"
                  ]
                },
                "itemPadding": {
                  "oneOf": [
                    {
                      "title": "string",
                      "type": "string"
                    },
                    {
                      "title": "integer",
                      "type": "integer"
                    }
                  ],
                  "description": "Padding for each navigation item with CSS-style value"
                },
                "minWidth": {
                  "type": "integer",
                  "description": "The minimum width for the menu (default 200)"
                }
              }
            }
          }
        }
      ]
    },
    "Cell-payload": {
      "type": "object",
      "oneOf": [
        {
          "title": "widget",
          "required": [
            "widget"
          ],
          "properties": {
            "widget": {
              "description": "Use the bottom navigation bar",
              "$ref": "#/$defs/Widget"
            }
          }
        },
        {
          "title": "config",
          "required": [
            "config"
          ],
          "properties": {
            "config": {
              "type": "object",
              "properties": {
                "backgroundColor": {
                  "$ref": "#/$defs/type-color",
                  "description": "Background color, starting with '0xFF' for full opacity e.g 0xFFCCCCCC"
                },
                "padding": {
                  "$ref": "#/$defs/Padding-payload"
                },
                "margin": {
                  "$ref": "#/$defs/Margin-payload"
                },
                "textStyle": {
                  "$ref": "#/$defs/TextStyle"
                },
                "alignment": {
                  "$ref": "#/$defs/type-alignment"
                },
                "borderRadius": {
                  "$ref": "#/$defs/borderRadius"
                },
                "shape": {
                  "type": "string",
                  "enum": [
                    "circle",
                    "rectangle"
                  ]
                }
              }
            }
          }
        }
      ]
    },
    "Range-payload": {
      "type": "object",
      "properties": {
        "highlightColor": {
          "$ref": "#/$defs/type-color",
          "description": "Range Highlight color, starting with '0xFF' for full opacity e.g 0xFFCCCCCC"
        },
        "onStart": {
          "$ref": "#/$defs/Action-payload",
          "description": "Call Ensemble's built-in functions or execute code when tapping on start of range"
        },
        "onComplete": {
          "$ref": "#/$defs/Action-payload",
          "description": "Call Ensemble's built-in functions or execute code when tapping on complete of range"
        },
        "startCell": {
          "$ref": "#/$defs/Cell-payload",
          "description": "Configure or create custom cell where the range begin"
        },
        "endCell": {
          "$ref": "#/$defs/Cell-payload",
          "description": "Configure or create custom cell where the range end"
        },
        "betweenCell": {
          "$ref": "#/$defs/Cell-payload",
          "description": "Configure or create custom cell for all cells in between start and end of range"
        }
      }
    },
    "Widgets": {
      "type": "array",
      "description": "List of widgets",
      "items": {
        "$ref": "#/$defs/Widget"
      }
    },
    "Widget": {
      "oneOf": [
        {
          "title": "Text",
          "required": [
            "Text"
          ],
          "properties": {
            "Text": {
              "$ref": "#/$defs/Text-payload",
              "description": "Example from Kitchen Sink: https://studio.ensembleui.com/app/e24402cb-75e2-404c-866c-29e6c3dd7992/screen/c87f8b09-58e2-4c2f-99a1-cbbe9e25e9a5"
            }
          }
        },
        {
          "title": "Markdown",
          "required": [
            "Markdown"
          ],
          "properties": {
            "Markdown": {
              "$ref": "#/$defs/Markdown-payload",
              "description": "Example from Kitchen Sink: https://studio.ensembleui.com/app/e24402cb-75e2-404c-866c-29e6c3dd7992/screen/6b6d9c3d-359b-4768-99a5-3f087a64387c#"
            }
          }
        },
        {
          "title": "Html",
          "required": [
            "Html"
          ],
          "properties": {
            "Html": {
              "$ref": "#/$defs/Html-payload",
              "description": "Example from Kitchen Sink: https://studio.ensembleui.com/app/e24402cb-75e2-404c-866c-29e6c3dd7992/screen/ZhTBody9YozadVvTlhW0#"
            }
          }
        },
        {
          "title": "Icon",
          "required": [
            "Icon"
          ],
          "properties": {
            "Icon": {
              "$ref": "#/$defs/Icon-payload",
              "description": "Kitchen Sink Example: https://studio.ensembleui.com/app/e24402cb-75e2-404c-866c-29e6c3dd7992/screen/e7c686f5-b8a2-4670-9e6e-8fdb0fea768e#"
            }
          }
        },
        {
          "title": "Image",
          "required": [
            "Image"
          ],
          "properties": {
            "Image": {
              "$ref": "#/$defs/Image-payload",
              "description": "Kitchen Sink Example: https://studio.ensembleui.com/app/e24402cb-75e2-404c-866c-29e6c3dd7992/screen/7c7a3ffe-68ef-4e99-b9d1-4b5cee166233#"
            }
          }
        },
        {
          "title": "Avatar",
          "required": [
            "Avatar"
          ],
          "properties": {
            "Avatar": {
              "$ref": "#/$defs/Avatar-payload",
              "description": "Kitchen Sink Example: https://studio.ensembleui.com/app/e24402cb-75e2-404c-866c-29e6c3dd7992/screen/kJ9eqI5BPL30IwjnEDdJ"
            }
          }
        },
        {
          "title": "ImageCropper",
          "required": [
            "ImageCropper"
          ],
          "properties": {
            "ImageCropper": {
              "$ref": "#/$defs/ImageCropper-payload",
              "description": "Kitchen Sink Example: https://studio.ensembleui.com/app/e24402cb-75e2-404c-866c-29e6c3dd7992/screen/#"
            }
          }
        },
        {
          "title": "Lottie",
          "required": [
            "Lottie"
          ],
          "properties": {
            "Lottie": {
              "$ref": "#/$defs/Lottie-payload"
            }
          }
        },
        {
          "title": "QRCode",
          "required": [
            "QRCode"
          ],
          "properties": {
            "QRCode": {
              "$ref": "#/$defs/QRCode-payload"
            }
          }
        },
        {
          "title": "Progress",
          "required": [
            "Progress"
          ],
          "properties": {
            "Progress": {
              "$ref": "#/$defs/Progress-payload",
              "description": "Kitchen Sink Example: https://studio.ensembleui.com/app/e24402cb-75e2-404c-866c-29e6c3dd7992/screen/c2c248f2-a289-40d3-acd5-65a1a7f3c5a2#"
            }
          }
        },
        {
          "title": "Divider",
          "required": [
            "Divider"
          ],
          "properties": {
            "Divider": {
              "$ref": "#/$defs/Divider-payload",
              "description": "Kitchen Sink Example: https://studio.ensembleui.com/app/e24402cb-75e2-404c-866c-29e6c3dd7992/screen/4a893a2e-5bde-400c-b974-b25b497d31a5#"
            }
          }
        },
        {
          "title": "Spacer",
          "required": [
            "Spacer"
          ],
          "properties": {
            "Spacer": {
              "$ref": "#/$defs/Spacer-payload",
              "description": "Kitchen Sink Example: https://studio.ensembleui.com/app/e24402cb-75e2-404c-866c-29e6c3dd7992/screen/1d7e42a9-5bbc-4b4b-9a02-8c102234ee05#"
            }
          }
        },
        {
          "title": "Toggle",
          "required": [
            "Toggle"
          ],
          "properties": {
            "Toggle": {
              "$ref": "#/$defs/Toggle-payload"
            }
          }
        },
        {
          "title": "ToggleContainer",
          "required": [
            "ToggleContainer"
          ],
          "properties": {
            "ToggleContainer": {
              "$ref": "#/$defs/ToggleContainer-payload"
            }
          }
        },
        {
          "title": "LoadingContainer",
          "required": [
            "LoadingContainer"
          ],
          "properties": {
            "LoadingContainer": {
              "$ref": "#/$defs/LoadingContainer-payload"
            }
          }
        },
        {
          "title": "PopupMenu",
          "required": [
            "PopupMenu"
          ],
          "properties": {
            "PopupMenu": {
              "$ref": "#/$defs/PopupMenu-payload"
            }
          }
        },
        {
          "title": "TextInput",
          "required": [
            "TextInput"
          ],
          "properties": {
            "TextInput": {
              "$ref": "#/$defs/TextInput-payload",
              "description": "Kitchen Sink Example: https://studio.ensembleui.com/app/e24402cb-75e2-404c-866c-29e6c3dd7992/screen/abc081b1-bcb4-4db6-ae55-7987cb6c418e#"
            }
          }
        },
        {
          "title": "PasswordInput",
          "required": [
            "PasswordInput"
          ],
          "properties": {
            "PasswordInput": {
              "$ref": "#/$defs/PasswordInput-payload",
              "description": "Kitchen Sink Example: https://studio.ensembleui.com/app/e24402cb-75e2-404c-866c-29e6c3dd7992/screen/218fa244-f0cd-4d17-91e6-7c099bbedede#"
            }
          }
        },
        {
          "title": "ConfirmationInput",
          "required": [
            "ConfirmationInput"
          ],
          "properties": {
            "ConfirmationInput": {
              "$ref": "#/$defs/ConfirmationInput-payload",
              "description": "Kitchen Sink Example: https://studio.ensembleui.com/app/e24402cb-75e2-404c-866c-29e6c3dd7992/screen/iCOvav6CcioH46LR6wYF"
            }
          }
        },
        {
          "title": "Checkbox",
          "required": [
            "Checkbox"
          ],
          "properties": {
            "Checkbox": {
              "$ref": "#/$defs/OnOff-payload",
              "description": "Kitchen Sink Example: https://studio.ensembleui.com/app/e24402cb-75e2-404c-866c-29e6c3dd7992/screen/21f43d9b-db21-40fe-9c2f-806267e6c412#"
            }
          }
        },
        {
          "title": "Switch",
          "required": [
            "Switch"
          ],
          "properties": {
            "Switch": {
              "$ref": "#/$defs/OnOff-payload",
              "description": "Kitchen Sink Example: https://studio.ensembleui.com/app/e24402cb-75e2-404c-866c-29e6c3dd7992/screen/3f4ba37a-0e6a-46a1-9b78-e4e04c84937d#"
            }
          }
        },
        {
          "title": "Slider",
          "required": [
            "Slider"
          ],
          "properties": {
            "Slider": {
              "$ref": "#/$defs/Slider-payload",
              "description": "Kitchen Sink Example: https://studio.ensembleui.com/app/e24402cb-75e2-404c-866c-29e6c3dd7992/screen/3f4ba37a-0e6a-46a1-9b78-e4e04c84937d#"
            }
          }
        },
        {
          "title": "Dropdown",
          "required": [
            "Dropdown"
          ],
          "properties": {
            "Dropdown": {
              "$ref": "#/$defs/SelectOne-payload",
              "description": "Kitchen Sink Example: https://studio.ensembleui.com/app/e24402cb-75e2-404c-866c-29e6c3dd7992/screen/fb8d28a2-834e-40a9-8419-155272fb0191#"
            }
          }
        },
        {
          "title": "Date",
          "required": [
            "Date"
          ],
          "properties": {
            "Date": {
              "$ref": "#/$defs/Date-payload",
              "description": "Kitchen Sink Example: https://studio.ensembleui.com/app/e24402cb-75e2-404c-866c-29e6c3dd7992/screen/b45c5576-ec22-4b04-832f-6dd7571dd20f#"
            }
          }
        },
        {
          "title": "DateRange",
          "required": [
            "DateRange"
          ],
          "properties": {
            "DateRange": {
              "$ref": "#/$defs/DateRange-payload",
              "description": "Kitchen Sink Example: https://studio.ensembleui.com/app/e24402cb-75e2-404c-866c-29e6c3dd7992/screen/b45c5576-ec22-4b04-832f-6dd7571dd20f#"
            }
          }
        },
        {
          "title": "Time",
          "required": [
            "Time"
          ],
          "properties": {
            "Time": {
              "$ref": "#/$defs/Time-payload",
              "description": "Kitchen Sink Example: ...coming ..."
            }
          }
        },
        {
          "title": "Shape",
          "required": [
            "Shape"
          ],
          "properties": {
            "Shape": {
              "$ref": "#/$defs/Shape-payload",
              "description": "Draw some common shapes"
            }
          }
        },
        {
          "title": "SignInWithGoogle",
          "required": [
            "SignInWithGoogle"
          ],
          "properties": {
            "SignInWithGoogle": {
              "$ref": "#/$defs/SignInWithGoogle-payload"
            }
          }
        },
        {
          "title": "SignInWithApple",
          "required": [
            "SignInWithApple"
          ],
          "properties": {
            "SignInWithApple": {
              "$ref": "#/$defs/SignInWithApple-payload"
            }
          }
        },
        {
          "title": "ConnectWithGoogle",
          "required": [
            "ConnectWithGoogle"
          ],
          "properties": {
            "ConnectWithGoogle": {
              "$ref": "#/$defs/ConnectWithGoogle-payload"
            }
          }
        },
        {
          "title": "ConnectWithMicrosoft",
          "required": [
            "ConnectWithMicrosoft"
          ],
          "properties": {
            "ConnectWithMicrosoft": {
              "$ref": "#/$defs/ConnectWithMicrosoft-payload"
            }
          }
        },
        {
          "title": "Button",
          "required": [
            "Button"
          ],
          "properties": {
            "Button": {
              "$ref": "#/$defs/Button-payload",
              "description": "Kitchen Sink Example: https://studio.ensembleui.com/app/e24402cb-75e2-404c-866c-29e6c3dd7992/screen/09c1087b-f9ee-4a8c-9286-e0e881184c07#"
            }
          }
        },
        {
          "title": "IconButton",
          "required": [
            "IconButton"
          ],
          "properties": {
            "IconButton": {
              "$ref": "#/$defs/IconButton-payload"
            }
          }
        },
        {
          "title": "Address",
          "required": [
            "Address"
          ],
          "properties": {
            "Address": {
              "$ref": "#/$defs/Address-payload"
            }
          }
        },
        {
          "title": "Form",
          "required": [
            "Form"
          ],
          "properties": {
            "Form": {
              "$ref": "#/$defs/Form-payload",
              "description": "Kitchen Sink Example: https://studio.ensembleui.com/app/e24402cb-75e2-404c-866c-29e6c3dd7992/screen/3107baf6-dfc3-42cd-b617-61c37b31f31e#"
            }
          }
        },
        {
          "title": "Flow",
          "required": [
            "Flow"
          ],
          "properties": {
            "Flow": {
              "$ref": "#/$defs/Flow-payload",
              "description": "Kitchen Sink Example: https://studio.ensembleui.com/app/e24402cb-75e2-404c-866c-29e6c3dd7992/screen/3e901fb8-a0e8-4f52-979b-7f5f2547e650#"
            }
          }
        },
        {
          "title": "Column",
          "required": [
            "Column"
          ],
          "properties": {
            "Column": {
              "$ref": "#/$defs/Column-payload",
              "description": "Kitchen Sink Example: https://studio.ensembleui.com/app/e24402cb-75e2-404c-866c-29e6c3dd7992/screen/90a8e4df-5eab-4473-ba10-2ecffc9596b0#"
            }
          }
        },
        {
          "title": "ListView",
          "required": [
            "ListView"
          ],
          "properties": {
            "ListView": {
              "$ref": "#/$defs/ListView-payload",
              "description": "Kitchen Sink Example: https://studio.ensembleui.com/app/e24402cb-75e2-404c-866c-29e6c3dd7992/screen/w0Wmu9ZMP4csk7IELSx3#"
            }
          }
        },
        {
          "title": "Row",
          "required": [
            "Row"
          ],
          "properties": {
            "Row": {
              "$ref": "#/$defs/Row-payload",
              "description": "Kitchen Sink Example: https://studio.ensembleui.com/app/e24402cb-75e2-404c-866c-29e6c3dd7992/screen/4bd0d453-c243-429d-a562-93cbc9db38e3#"
            }
          }
        },
        {
          "title": "FittedColumn",
          "required": [
            "FittedColumn"
          ],
          "properties": {
            "FittedColumn": {
              "type": "object",
              "description": "Stretch to fit the parent (the parent is required to have a predetermined height), then distribute the vertical spaces evenly among its children. You can override the space distribution via 'childrenFits' attribute.",
              "$ref": "#/$defs/fittedBoxLayout"
            }
          }
        },
        {
          "title": "FittedRow",
          "required": [
            "FittedRow"
          ],
          "properties": {
            "FittedRow": {
              "type": "object",
              "description": "Stretch to fit the parent (the parent is required to have a predetermined width), then distribute the horizontal spaces evenly among its children. You can override the space distribution via 'childrenFits' attribute.",
              "$ref": "#/$defs/fittedBoxLayout"
            }
          }
        },
        {
          "title": "GridView",
          "required": [
            "GridView"
          ],
          "properties": {
            "GridView": {
              "$ref": "#/$defs/GridView-payload",
              "description": "Kitchen Sink Example: https://studio.ensembleui.com/app/e24402cb-75e2-404c-866c-29e6c3dd7992/screen/DX5j2WVQFabmxD9FCD5h#"
            }
          }
        },
        {
          "title": "Flex",
          "required": [
            "Flex"
          ],
          "properties": {
            "Flex": {
              "$ref": "#/$defs/Flex-payload",
              "description": "Kitchen Sink Example: ...coming ..."
            }
          }
        },
        {
          "title": "Stack",
          "required": [
            "Stack"
          ],
          "properties": {
            "Stack": {
              "$ref": "#/$defs/Stack-payload",
              "description": "Kitchen Sink Example: https://studio.ensembleui.com/app/e24402cb-75e2-404c-866c-29e6c3dd7992/screen/572ecf3b-b9f2-46f4-960f-ff438e5fa1dc#"
            }
          }
        },
        {
          "title": "Carousel",
          "required": [
            "Carousel"
          ],
          "properties": {
            "Carousel": {
              "$ref": "#/$defs/Carousel-payload",
              "description": "Kitchen Sink Example: https://studio.ensembleui.com/app/e24402cb-75e2-404c-866c-29e6c3dd7992/screen/2e1d88b1-f281-4c2c-9bb1-bd18016d2b8c#"
            }
          }
        },
        {
          "title": "TabBar",
          "required": [
            "TabBar"
          ],
          "properties": {
            "TabBar": {
              "$ref": "#/$defs/TabBar-payload",
              "description": "Kitchen Sink Example: https://studio.ensembleui.com/app/e24402cb-75e2-404c-866c-29e6c3dd7992/screen/cebd491d-7d90-43f4-9f17-b8575de441ca#"
            }
          }
        },
        {
          "title": "Maps",
          "required": [
            "Maps"
          ],
          "properties": {
            "Maps": {
              "$ref": "#/$defs/Maps-payload"
            }
          }
        },
        {
          "title": "Video",
          "required": [
            "Video"
          ],
          "properties": {
            "Video": {
              "$ref": "#/$defs/Video-payload",
              "description": "Kitchen Sink Example: https://studio.ensembleui.com/app/e24402cb-75e2-404c-866c-29e6c3dd7992/screen/fce92bbb-af8e-403d-bf2d-c10926cc89a0#"
            }
          }
        },
        {
          "title": "Youtube",
          "required": [
            "Youtube"
          ],
          "properties": {
            "Youtube" : {
              "$ref" : "#/$defs/Youtube-payload"
            }
          }
        },


        {
          "title": "WebView",
          "required": [
            "WebView"
          ],
          "properties": {
            "WebView": {
              "$ref": "#/$defs/WebView-payload",
              "description": "Kitchen Sink Example: https://studio.ensembleui.com/app/e24402cb-75e2-404c-866c-29e6c3dd7992/screen/22c8d57d-a906-4d11-873d-161fd6c56c0a#"
            }
          }
        },
        {
          "title": "ChartJs",
          "required": [
            "ChartJs"
          ],
          "properties": {
            "ChartJs": {
              "$ref": "#/$defs/ChartJs-payload",
              "description": "Example from Kitchen Sink: https://studio.ensembleui.com/app/e24402cb-75e2-404c-866c-29e6c3dd7992/screen/5d7b84de-3bbd-456e-aeea-98e2c9f4c3c7"
            }
          }
        },
        {
          "title": "ToggleButton",
          "required": [
            "ToggleButton"
          ],
          "properties": {
            "ToggleButton": {
              "$ref": "#/$defs/ToggleButton-payload",
              "description": "Example from Kitchen Sink: https://studio.ensembleui.com/app/e24402cb-75e2-404c-866c-29e6c3dd7992/screen/ZbquuD29B4D2PiQow1P5"
            }
          }
        },
        {
          "title": "StaggeredGrid",
          "required": [
            "StaggeredGrid"
          ],
          "properties": {
            "StaggeredGrid": {
              "$ref": "#/$defs/StaggeredGrid-payload",
              "description": "Example from Kitchen Sink: https://studio.ensembleui.com/app/e24402cb-75e2-404c-866c-29e6c3dd7992/screen/a9iIs4wvgqDOhU4rN6GR"
            }
          }
        },
        {
          "title": "Conditional",
          "required": [
            "Conditional"
          ],
          "properties": {
            "Conditional": {
              "type": "object",
              "description": "Render widget based on condition.",
              "required": [
                "conditions"
              ],
              "properties": {
                "conditions": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "if": {
                            "type": "string"
                          },
                          "allOf": [
                            {
                              "$ref": "#/$defs/Widget"
                            }
                          ]
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "elseif": {
                            "type": "string"
                          },
                          "allOf": [
                            {
                              "$ref": "#/$defs/Widget"
                            }
                          ]
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "else": {
                            "type": "string"
                          },
                          "allOf": [
                            {
                              "$ref": "#/$defs/Widget"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        {
          "title": "Calendar",
          "required": [
            "Calendar"
          ],
          "properties": {
            "Calendar": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "A unique identifier for this widget"
                },
                "rowHeight": {
                  "type": "integer",
                  "description": "Height of row. Default is 52.0"
                },
                "firstDay": {
                  "type": "string",
                  "description": "First day from where calendar begin. Default is CurrentDate - 12 months"
                },
                "lastDay": {
                  "type": "string",
                  "description": "Last day where calendar end. Default is CurrentDate + 12 months"
                },
                "headerVisible": {
                  "type": "boolean",
                  "description": "Set visibility of calendar header. Default true."
                },
                "header": {
                  "$ref": "#/$defs/Widget"
                },
                "rowSpans": {
                  "type": "object",
                  "properties": {
                    "spanPerRow": {
                      "type": "integer",
                      "description": "Limit the number of spans per row"
                    },
                    "overflowWidget": {
                      "$ref": "#/$defs/Widget",
                      "description": "If spans per row overflow based on spanPerRow than overflowWidget will render"
                    },
                    "children": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "span": {
                            "type": "object",
                            "properties": {
                              "start": {
                                "type": "string",
                                "description": "date in ISO format."
                              },
                              "end": {
                                "type": "string",
                                "description": "date in ISO format."
                              },
                              "widget": {
                                "$ref": "#/$defs/Widget"
                              }
                            },
                            "required": [
                              "start",
                              "end",
                              "widget"
                            ]
                          }
                        },
                        "required": [
                          "span"
                        ]
                      }
                    }
                  }
                },
                "headerTextStyle": {
                  "type": "object",
                  "description": "Styling the header text.",
                  "$ref": "#/$defs/TextStyle"
                },
                "cell": {
                  "allOf": [
                    {
                      "$ref": "#/$defs/Cell-payload",
                      "description": "Cell specific"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "onTap": {
                          "$ref": "#/$defs/Action-payload",
                          "description": "Execute an Action when the map's bound has changed. The bound data is available using `event.data.bounds.<southwest/northeast>.<lat/lng>`."
                        }
                      }
                    }
                  ]
                },
                "selectCell": {
                  "$ref": "#/$defs/Cell-payload",
                  "description": "Configure or create custom cell for all selected dates"
                },
                "markCell": {
                  "$ref": "#/$defs/Cell-payload",
                  "description": "Configure or create custom cell for all marked dates"
                },
                "todayCell": {
                  "$ref": "#/$defs/Cell-payload",
                  "description": "Configure or create custom cell for today's date only"
                },
                "disableCell": {
                  "$ref": "#/$defs/Cell-payload",
                  "description": "Configure or create custom cell for disabled dates"
                },
                "range": {
                  "$ref": "#/$defs/Range-payload"
                }
              }
            }
          }
        }
      ]
    },
    "Menu": {
      "type": "object",
      "description": "Specify the navigation menu for this page",
      "oneOf": [
        {
          "title": "BottomNavBar",
          "required": [
            "BottomNavBar"
          ],
          "properties": {
            "BottomNavBar": {
              "description": "Use the bottom navigation bar",
              "$ref": "#/$defs/BottomNavBarMenuItems-Payload"
            }
          }
        },
        {
          "title": "Drawer",
          "required": [
            "Drawer"
          ],
          "properties": {
            "Drawer": {
              "description": "Put the menu behind a drawer icon on the header. The drawer icon will be positioned to the 'start' of the header (left for most languages, right for RTL languages).",
              "$ref": "#/$defs/MenuWithHeaderAndFooter"
            }
          }
        },
        {
          "title": "EndDrawer",
          "required": [
            "EndDrawer"
          ],
          "properties": {
            "EndDrawer": {
              "description": "Put the menu behind a drawer icon on the header. The drawer icon will be positioned to the 'end' of the header (right for most languages, left for RTL languages).",
              "$ref": "#/$defs/MenuWithHeaderAndFooter"
            }
          }
        },
        {
          "title": "Sidebar",
          "required": [
            "Sidebar"
          ],
          "properties": {
            "Sidebar": {
              "description": "Enable a fixed navigation menu to the 'start' of the screen (left for most languages, right for RTL languages). The menu may become a drawer menu on lower resolution.",
              "$ref": "#/$defs/MenuWithAdditionalStyles"
            }
          }
        }
      ]
    },
    "TabBar-payload": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier for this widget"
        },
        "styles": {
          "allOf": [
            {
              "type": "object",
              "properties": {
                "tabPosition": {
                  "type": "string",
                  "description": "How to lay out the Tab labels",
                  "oneOf": [
                    {
                      "const": "start",
                      "description": "Align the labels to the start of the container and scroll if necessary"
                    },
                    {
                      "const": "stretch",
                      "description": "Distribute the labels evenly across available container width. Labels will be cut off instead of scrolling"
                    }
                  ]
                },
                "indicatorSize": {
                  "type": "string",
                  "description": "Defines how the bounds of the selected tab indicator are computed",
                  "oneOf": [
                    {
                      "const": "tab",
                      "description": "The tab indicator's bounds are as wide as the space occupied by the tab in the tab bar"
                    },
                    {
                      "const": "label",
                      "description": "The tab's bounds are only as wide as the label or icon width"
                    }
                  ]
                },
                "tabPadding": {
                  "oneOf": [
                    {
                      "title": "string",
                      "type": "string"
                    },
                    {
                      "title": "integer",
                      "type": "integer"
                    }
                  ],
                  "description": "Padding for each tab labels with CSS-style value. Default: 0 30 0 0 (right padding only)"
                },
                "tabFontSize": {
                  "type": "integer",
                  "description": "Font size for the tab text"
                },
                "tabFontWeight": {
                  "$ref": "#/$defs/type-fontWeight",
                  "description": "Font weight for the tab text"
                },
                "tabBackgroundColor": {
                  "$ref": "#/$defs/type-color",
                  "description": "The background color of the tab's navigation bar"
                },
                "activeTabColor": {
                  "$ref": "#/$defs/type-color",
                  "description": "The color of the selected tab's text"
                },
                "dividerColor": {
                  "$ref": "#/$defs/type-color",
                  "description": "The color of the tabbar divider color"
                },
                "inactiveTabColor": {
                  "$ref": "#/$defs/type-color",
                  "description": "The color of the un-selected tabs' text"
                },
                "indicatorColor": {
                  "$ref": "#/$defs/type-color",
                  "description": "The color of the selected tab's indicator"
                },
                "activeTabBackgroundColor": {
                  "$ref": "#/$defs/type-color",
                  "description": "The background color of the selected tab"
                },
                "indicatorThickness": {
                  "type": "integer",
                  "description": "The thickness of the selected tab's indicator"
                }
              }
            },
            {
              "$ref": "#/$defs/styleMargin"
            }
          ]
        },
        "selectedIndex": {
          "type": "integer",
          "minimum": 0,
          "description": "Selecting a Tab based on its index order"
        },
        "items": {
          "type": "array",
          "description": "Define each of your Tab here",
          "items": {
            "type": "object",
            "required": [
              "label",
              "widget"
            ],
            "properties": {
              "label": {
                "type": "string",
                "description": "Setting the tab label"
              },
              "icon": {
                "$ref": "#/$defs/HasIcon"
              },
              "widget": {
                "$ref": "#/$defs/Widget",
                "description": "Return an inline widget or specify a custom widget to be rendered as this tab's content"
              },
              "tabItem": {
                "$ref": "#/$defs/Widget",
                "description": "Return an inline widget or specify a custom widget to be rendered as this tab bar item"
              }
            }
          }
        }
      }
    },
    "Maps-payload": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier for this widget"
        },
        "styles": {
          "allOf": [
            {
              "$ref": "#/$defs/baseStyles"
            },
            {
              "type": "object",
              "properties": {
                "width": {
                  "type": "integer"
                },
                "height": {
                  "type": "integer"
                },
                "autoZoom": {
                  "type": "boolean",
                  "description": "Automatically zoom the maps to show all the markers (and optionally the current location). Default True."
                },
                "autoZoomPadding": {
                  "type": "integer"
                },
                "locationEnabled": {
                  "type": "boolean"
                },
                "includeCurrentLocationInAutoZoom": {
                  "type": "boolean"
                },
                "showToolbar": {
                  "type": "boolean",
                  "description": "Show the Map toolbar that contains some convenience controls. You can also turn each individual controls on or off."
                },
                "showMapTypesButton": {
                  "type": "boolean",
                  "description": "Toggle between the different map types. (default true)"
                },
                "showLocationButton": {
                  "type": "boolean",
                  "description": "Show the button that animates to the user's location. (default true)"
                },
                "showZoomButtons": {
                  "type": "boolean",
                  "description": "Applicable on Web only. Show the zoom in/out controls on the map. (default true on Web)"
                },
                "rotateEnabled": {
                  "type": "boolean"
                },
                "scrollEnabled": {
                  "type": "boolean"
                },
                "tiltEnabled": {
                  "type": "boolean"
                },
                "zoomEnabled": {
                  "type": "boolean"
                },
                "toolbarMargin": {
                  "$ref": "#/$defs/Margin-payload",
                  "description": "The margin around the toolbar. (default 10 on all sides)"
                },
                "toolbarAlignment": {
                  "$ref": "#/$defs/type-alignment",
                  "description": "How to align the toolbar within the map. (default bottom right). If both positioning (top/bottom/left/right) and alignment are used, positions will be applied first, then alignment within the available constraint."
                },
                "toolbarTop": {
                  "type": "integer",
                  "description": "Offset the toolbar from the top edge of the map"
                },
                "toolbarBottom": {
                  "type": "integer",
                  "description": "Offset the toolbar from the bottom edge of the map"
                },
                "toolbarLeft": {
                  "type": "integer",
                  "description": "Offset the toolbar from the left edge of the map"
                },
                "toolbarRight": {
                  "type": "integer",
                  "description": "Offset the toolbar from the right edge of the map"
                },
                "mapType": {
                  "type": "string",
                  "enum": [
                    "normal",
                    "satellite",
                    "terrain",
                    "hybrid"
                  ]
                },
                "initialCameraPosition": {
                  "type": "string",
                  "description": "Using the format 'latitude longitude', specify the initial camera position when the map loads."
                },
                "initialCameraZoom": {
                  "type": "integer",
                  "minimum": 0,
                  "description": "The initial zoom value to use when the map first load"
                },
                "markerOverlayMaxWidth": {
                  "type": "integer",
                  "description": "Marker overlay stretches to fill available horizontal space. Use this to cap its width on larger screens. (default 500)"
                },
                "markerOverlayMaxHeight": {
                  "type": "integer",
                  "description": "Set the max height of the marker overlay. (default: 50% of the screen height)"
                },
                "scrollableMarkerOverlay": {
                  "type": "boolean",
                  "description": "If using overlay and there are more than one marker, swiping left/right within the overlay will navigate to next/previous marker"
                },
                "dismissibleMarkerOverlay": {
                  "type": "boolean",
                  "description": "Enabling swiping down to close the overlay."
                },
                "autoSelect": {
                  "type": "boolean",
                  "description": "Automatically select a marker (if not already) when the markers are updated."
                }
              }
            }
          ]
        },
        "onCameraMove": {
          "$ref": "#/$defs/Action-payload",
          "description": "Execute an Action when the map's bound has changed. The bound data is available using `event.data.bounds.<southwest/northeast>.<lat/lng>`."
        },
        "onMapCreated": {
          "$ref": "#/$defs/Action-payload",
          "description": "Execute an Action when the map's initial state has been rendered. Note that this may not mean the location and markers (if any) are available yet."
        },
        "markers": {
          "type": "object",
          "required": [
            "data",
            "name",
            "location"
          ],
          "properties": {
            "data": {
              "type": "string",
              "description": "Bind the marker list to the data e.g. myAPI.body.items"
            },
            "name": {
              "type": "string",
              "description": "Give this a name. This is the bindable data for each marker."
            },
            "location": {
              "type": "string",
              "description": "Specify the coordinates for this marker using the format 'latitude longitude'"
            },
            "marker": {
              "type": "object",
              "properties": {
                "source": {
                  "type": "string",
                  "description": "The marker's image asset. This can come from URL or from local asset."
                }
              }
            },
            "selectedMarker": {
              "type": "object",
              "properties": {
                "source": {
                  "type": "string",
                  "description": "The marker's image asset when selected. This can come from URL or from local asset."
                }
              }
            },
            "overlayWidget": {
              "$ref": "#/$defs/Widget",
              "description": "The widget to render as an overlay over the maps. Use this to convey more detail info for each marker."
            },
            "onMarkerTap": {
              "$ref": "#/$defs/Action-payload",
              "description": "Execute an Action when tapping on the marker"
            },
            "onMarkersUpdated": {
              "$ref": "#/$defs/Action-payload",
              "description": "Execute an Action when the markers have been updated and rendered."
            }
          }
        }
      }
    },
    "Video-payload": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier for this widget"
        },
        "source": {
          "type": "string",
          "description": "The URL source to the media file"
        }
      }
    },
    "Youtube-payload":{
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description": "The unique identifier for this widget"
        },
        "url" : {
          "type": "string",
          "description": "The URL source to the youtube video"
        },
        "aspectRatio" : {
          "type": "double",
          "description" : "Video aspect ratio"
        },
        "autoplay": {
          "type" : "bool",
          "description" : "Automatically start the video when player is loaded. (default False)"
        },
        "videoList" : {
          "type" : "array",
          "description" : "List of videos to be played within a single player."
        },
        "startSeconds": {
          "type" : "double",
          "description" : "specifies the time from which the first video in the list(or single video) should start playing"
        },
        "endSeconds": {
          "type": "double",
          "description": "Ends the video after the certain number of seconds (works with Single video)"
        },
        "showAnnotations" : {
          "type" : "bool",
          "description" : "Showing the annotations of the video"
        },            
        "playbackRate" : {
          "type": "double",
          "description": "For changing the speed at which the video is displayed"
        },
        "showControls": {
          "type" : "bool",
          "description" : "For showing the controls on the video within the player(Like in youtube)"
        },
        "showFullScreenButton": {
          "type" : "bool",
          "description" : "To show the fullscreen button of the video"
        },
        "enableCaptions" : {
          "type": "bool",
          "description" : "To enable any captions in the video(default language of caption is English)"
        },
        "volume": {
          "type": "integer",
          "description" : "Changes the volume. (max = 100, min = 0)"
        }
      }
    },
    "WebView-payload": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier for this widget"
        },
        "url": {
          "type": "string",
          "description": "The URl that will be loaded in the webview"
        },
        "headers": {
          "type": "object",
          "description": "Pass the headers' key/value pairs to your service"
        },
        "cookies": {
          "type": "array",
          "description": "takes cookies in an array of maps"
        },
        "cookieHeader" : {
          "type" : "string",
          "description" : "Creates a cookie by parsing a header value from a 'set-cookie' header according to the rules in RFC 6265"
        },
        "styles": {
          "allOf": [
            {
              "$ref": "#/$defs/baseStyles"
            },
            {
              "properties": {
                "width": {
                  "type": "integer",
                  "description": "By default the width will match its parent's available width, but you can set an explicit width here."
                },
                "height": {
                  "type": "integer",
                  "description": "If no height is specified, the web view will stretch its height to fit its content, in which case a scrollable parent is required to scroll the content. You may override this behavior by explicitly set the web view's height here, or uses 'expanded' to fill the available height."
                }
              }
            }
          ]
        }
      }
    },
    "ChartJs-payload": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "ID to be referenced later"
        },
        "styles": {
          "type": "object",
          "properties": {
            "width": {
              "type": "integer",
              "minimum": 0
            },
            "height": {
              "type": "integer",
              "minimum": 0
            }
          }
        },
        "config": {
          "type": "string",
          "description": "Chartjs config. \nSee this for an example - https://www.chartjs.org/docs/latest/configuration/"
        }
      }
    },
    "InvokeAPI-payload": {
      "type": "object",
      "description": "Calling an API",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Give the API an ID allows you to bind to its result. e.g. ${apiId.body...}"
        },
        "name": {
          "type": "string",
          "description": "Enter the name of your defined API"
        },
        "inputs": {
          "type": "object",
          "description": "Specify the key/value pairs to pass to the API",
          "properties": {},
          "additionalProperties": {
            "type": "string"
          }
        },
        "onResponse": {
          "$ref": "#/$defs/Action-payload",
          "description": "Execute another Action upon API's successful response"
        },
        "onError": {
          "$ref": "#/$defs/Action-payload",
          "description": "Execute an Action when the API completes with error(s)"
        }
      }
    },
    "baseStyles": {
      "type": "object",
      "properties": {
        "expanded": {
          "type": "boolean",
          "description": "If the parent is a Row or Column, this flag will stretch this widget in the appropriate direction. (e.g stretch horizontally for parent of type Row)"
        },
        "visible": {
          "type": "boolean",
          "description": "Toggle a widget visibility on/off. Note that an invisible widget will not occupy UI space, unless the visibilityTransitionDuration is specified."
        },
        "visibilityTransitionDuration": {
          "type": "number",
          "description": "Specify the duration in seconds when a widget animates between visible and not visible state. Note that setting this value will cause the widget to still occupy the UI space even when it is not visible."
        },
        "elevation": {
          "type": "integer",
          "description": "The z-coordinate at which to place this material relative to its parent. A non-zero value will show a shadow, with its size relative to the elevation value.",
          "minimum": 0,
          "maximum": 24
        },
        "elevationShadowColor": {
          "$ref": "#/$defs/type-color",
          "description": "The shadow color for the elevation"
        },
        "elevationBorderRadius": {
          "$ref": "#/$defs/borderRadius",
          "description": "If the widget has a borderRadius, this should be changed to have the same value."
        },
        "alignment": {
          "$ref": "#/$defs/type-alignment",
          "description": "Align this widget relative to its parent"
        },
        "stackPositionTop": {
          "type": "integer",
          "description": "The distance of the child's top edge from the top of the stack. This is applicable only for Stack's children."
        },
        "stackPositionBottom": {
          "type": "integer",
          "description": "The distance that the child's bottom edge from the bottom of the stack. This is applicable only for Stack's children."
        },
        "stackPositionLeft": {
          "type": "integer",
          "description": "The distance that the child's left edge from the left of the stack. This is applicable only for Stack's children."
        },
        "stackPositionRight": {
          "type": "integer",
          "description": "The distance that the child's right edge from the right of the stack. This is applicable only for Stack's children."
        },
        "captureWebPointer": {
          "type": "boolean",
          "description": "Applicable for Web only. When overlaying widgets on top of certain HTML container (e.g. Maps), the mouse click is captured by the HTML container, causing issue interacting with the widget. Use this to capture and maintain the mouse pointer on your widget."
        }
      }
    },
    "stylePadding": {
      "type": "object",
      "properties": {
        "padding": {
          "$ref": "#/$defs/Padding-payload"
        }
      }
    },
    "styleMargin": {
      "type": "object",
      "properties": {
        "margin": {
          "$ref": "#/$defs/Margin-payload"
        }
      }
    },
    "borderRadius": {
      "type": "object",
      "properties": {
        "borderRadius": {
          "oneOf": [
            {
              "title": "string",
              "type": "string"
            },
            {
              "title": "integer",
              "type": "integer"
            }
          ],
          "minimum": 0,
          "description": "Border Radius with CSS-like notation (1 to 4 integers)"
        }
      }
    },
    "boxStyles": {
      "allOf": [
        {
          "$ref": "#/$defs/boxStylesWithoutDimension"
        },
        {
          "$ref": "#/$defs/HasDimension"
        }
      ]
    },
    "boxStylesWithoutDimension": {
      "allOf": [
        {
          "$ref": "#/$defs/styleMargin"
        },
        {
          "$ref": "#/$defs/stylePadding"
        },
        {
          "$ref": "#/$defs/HasBackground"
        },
        {
          "$ref": "#/$defs/HasBorder"
        },
        {
          "$ref": "#/$defs/HasShadow"
        },
        {
          "properties": {
            "clipContent": {
              "type": "boolean",
              "description": "Some widgets (such as Image) may bleed through the container when borderRadius is set. Use this to apply a clipping to ensure this does not happen."
            }
          }
        }
      ]
    },
    "boxLayoutStyles": {
      "allOf": [
        {
          "$ref": "#/$defs/boxStyles"
        },
        {
          "type": "object",
          "properties": {
            "gap": {
              "type": "integer",
              "minimum": 0
            },
            "fontFamily": {
              "type": "string",
              "description": "Set the font family applicable for all widgets inside this container"
            },
            "fontSize": {
              "type": "integer",
              "minimum": 0
            }
          }
        }
      ]
    },
    "fittedBoxLayout": {
      "required": [
        "children"
      ],
      "properties": {
        "children": {
          "$ref": "#/$defs/Widgets"
        },
        "onTap": {
          "$ref": "#/$defs/Action-payload",
          "description": "Call Ensemble's built-in functions"
        },
        "styles": {
          "allOf": [
            {
              "$ref": "#/$defs/baseStyles"
            },
            {
              "$ref": "#/$defs/boxLayoutStyles"
            },
            {
              "properties": {
                "mainAxis": {
                  "type": "string",
                  "description": "Control our children's layout horizontally",
                  "enum": [
                    "start",
                    "center",
                    "end",
                    "spaceBetween",
                    "spaceAround",
                    "spaceEvenly"
                  ]
                },
                "crossAxis": {
                  "type": "string",
                  "description": "Control the vertical alignment of the children",
                  "enum": [
                    "start",
                    "center",
                    "end",
                    "stretch",
                    "baseline"
                  ]
                },
                "childrenFits": {
                  "type": "array",
                  "description": "Specify an array of non-zero integers or 'auto', each corresponding to a child. Setting 'auto' will let the child determines its own size, while setting a non-zero integer will determine the child's size multiple. The 'auto' children will be laid out first and get as much space as they need, then the left-over space will be distributed to the other children based on their size multiples.",
                  "items": {
                    "oneOf": [
                      {
                        "const": "auto",
                        "description": "Allow this selected child to determine its own size. This may give an error if the child doesn't have a dimension."
                      },
                      {
                        "type": "integer",
                        "description": "Default 1. After laying out the 'auto' children, the left-over space will be divided up based on this multiple.",
                        "minimum": 1
                      }
                    ]
                  }
                }
              }
            }
          ]
        }
      }
    },
    "flowStyles": {
      "allOf": [
        {
          "$ref": "#/$defs/baseStyles"
        },
        {
          "type": "object",
          "properties": {
            "mainAxis": {
              "type": "string",
              "description": "Control our children's layout vertically",
              "enum": [
                "start",
                "center",
                "end",
                "spaceBetween",
                "spaceAround",
                "spaceEvenly"
              ]
            },
            "gap": {
              "type": "integer",
              "description": "The gap between the children in the main direction",
              "minimum": 0
            },
            "lineGap": {
              "type": "integer",
              "description": "The gap between the lines if the children start wrapping",
              "minimum": 0
            },
            "maxWidth": {
              "type": "integer",
              "minimum": 0
            },
            "maxHeight": {
              "type": "integer",
              "minimum": 0
            }
          }
        }
      ]
    },
    "columnStyles": {
      "allOf": [
        {
          "$ref": "#/$defs/baseStyles"
        },
        {
          "$ref": "#/$defs/boxLayoutStyles"
        },
        {
          "type": "object",
          "properties": {
            "mainAxis": {
              "type": "string",
              "description": "Control our children's layout vertically",
              "enum": [
                "start",
                "center",
                "end",
                "spaceBetween",
                "spaceAround",
                "spaceEvenly"
              ]
            },
            "crossAxis": {
              "type": "string",
              "description": "Control the horizontal alignment of the children",
              "enum": [
                "start",
                "center",
                "end",
                "stretch",
                "baseline"
              ]
            },
            "mainAxisSize": {
              "type": "string",
              "description": "If 'max', stretch the Column to fill its parent's height. Otherwise (min) the column's height will be its children's combined.",
              "enum": [
                "min",
                "max"
              ]
            },
            "scrollable": {
              "type": "boolean",
              "description": "Set to true so content can scroll vertically as needed"
            },
            "autoFit": {
              "type": "boolean",
              "description": "Explicitly make the column's width as wide as the largest child, but only if our column's parent does not already assign a width. This attribute is useful for sizing children who don't have a width (e.g Divider)"
            }
          }
        }
      ]
    },
    "rowStyles": {
      "allOf": [
        {
          "$ref": "#/$defs/baseStyles"
        },
        {
          "$ref": "#/$defs/boxLayoutStyles"
        },
        {
          "type": "object",
          "properties": {
            "mainAxis": {
              "type": "string",
              "description": "Control our children's layout horizontally",
              "enum": [
                "start",
                "center",
                "end",
                "spaceBetween",
                "spaceAround",
                "spaceEvenly"
              ]
            },
            "crossAxis": {
              "type": "string",
              "description": "Control the vertical alignment of the children",
              "enum": [
                "start",
                "center",
                "end",
                "stretch",
                "baseline"
              ]
            },
            "mainAxisSize": {
              "type": "string",
              "description": "If 'max', stretch the Row to fill its parent's width. Otherwise (min) the Row's width will be its children's combined.",
              "enum": [
                "min",
                "max"
              ]
            },
            "scrollable": {
              "type": "boolean",
              "description": "Set to true so content can scroll horizontally as needed"
            },
            "autoFit": {
              "type": "boolean",
              "description": "Explicitly make the row's height as tall as the largest child, but only if the row's parent does not already assign us a height. This attribute is useful for sizing children who don't have a width (e.g vertical Divider)"
            }
          }
        }
      ]
    },
    "flexStyles": {
      "allOf": [
        {
          "$ref": "#/$defs/baseStyles"
        },
        {
          "$ref": "#/$defs/boxLayoutStyles"
        },
        {
          "type": "object",
          "required": [
            "direction"
          ],
          "properties": {
            "direction": {
              "type": "string",
              "description": "Lay out the children vertically or horizontally",
              "enum": [
                "vertical",
                "horizontal"
              ]
            },
            "mainAxis": {
              "type": "string",
              "description": "Control how to lay out the children, in the direction specified by the 'direction' attribute",
              "enum": [
                "start",
                "center",
                "end",
                "spaceBetween",
                "spaceAround",
                "spaceEvenly"
              ]
            },
            "crossAxis": {
              "type": "string",
              "description": "Control the alignment of the children on the secondary axis (depending on the 'direction' attribute)",
              "enum": [
                "start",
                "center",
                "end",
                "stretch",
                "baseline"
              ]
            },
            "mainAxisSize": {
              "type": "string",
              "description": "If 'max', stretch the Flex to fill its parent's dimension (width or height based on the direction). Otherwise (min) the Flex's dimension will be its children's combined.",
              "enum": [
                "min",
                "max"
              ]
            },
            "scrollable": {
              "type": "boolean",
              "description": "Set to true so content can scroll vertically or horizontally as needed"
            },
            "autoFit": {
              "type": "boolean",
              "description": "Explicitly match the width or height to the largest child's size, but only if the parent does not already assign a width or height. This attribute is useful for sizing children who don't have a width or height (e.g Divider)"
            }
          }
        }
      ]
    },
    "backgroundColor": {
      "type": "object",
      "properties": {
        "backgroundColor": {
          "$ref": "#/$defs/type-color",
          "description": "Background color, starting with '0xFF' for full opacity e.g 0xFFCCCCCC"
        }
      }
    },
    "backgroundGradient": {
      "type": "object",
      "properties": {
        "backgroundGradient": {
          "type": "object",
          "properties": {
            "colors": {
              "type": "array",
              "description": "The list of colors used for the gradient",
              "items": {
                "$ref": "#/$defs/type-color"
              }
            },
            "stops": {
              "type": "array",
              "description": "The list of color stops, each is a number between 0.0 (where the gradient starts) and 1.0 (where the gradient ends). The number of stops should match the number of colors.",
              "items": {
                "type": "number",
                "minimum": 0.0,
                "maximum": 1.0
              }
            },
            "start": {
              "description": "The starting position of the gradient",
              "$ref": "#/$defs/type-alignment"
            },
            "end": {
              "description": "The ending position of the gradient",
              "$ref": "#/$defs/type-alignment"
            }
          }
        }
      }
    },
    "backgroundImage": {
      "type": "object",
      "properties": {
        "backgroundImage": {
          "type": "object",
          "properties": {
            "source": {
              "type": "string",
              "description": "The Image URL to fill the background"
            },
            "fallback": {
              "$ref": "#/$defs/Widget",
              "description": "Return an inline widget or specify a custom widget to be rendered when the backgroundImage failed to load the image"
            },
            "fit": {
              "type": "string",
              "description": "How to fit the image within our width/height or our parent (if dimension is not specified)",
              "oneOf": [
                {
                  "const": "fill",
                  "description": "Stretch our image to fill the dimension, and distorting the aspect ratio if needed"
                },
                {
                  "const": "contain",
                  "description": "Scale the image such that the entire image is contained within our dimension"
                },
                {
                  "const": "cover",
                  "description": "Scale the image to fill our dimension, clipping the image as needed"
                },
                {
                  "const": "fitWidth",
                  "description": "Scale the image to fit the width, and clipping the height if needed"
                },
                {
                  "const": "fitHeight",
                  "description": "Scale the image to fit the height, and clipping the width if needed"
                },
                {
                  "const": "none",
                  "description": "Center-Align the original image size, clipping the content if needed"
                },
                {
                  "const": "scaleDown",
                  "description": "Center-Align the image and only scale down to fit. Image will not be scaled up to bigger dimension."
                }
              ]
            },
            "alignment": {
              "$ref": "#/$defs/type-alignment"
            }
          }
        }
      }
    },
    "inputValidator": {
      "type": "object",
      "properties": {
        "validator": {
          "type": "object",
          "properties": {
            "minLength": {
              "type": "integer",
              "description": "The minimum number of characters",
              "minimum": 0
            },
            "maxLength": {
              "type": "integer",
              "description": "The maximum number of characters",
              "minimum": 0
            },
            "regex": {
              "type": "string",
              "description": "The Regular Expression the input will need to match"
            },
            "regexError": {
              "type": "string",
              "description": "The customized error message to show when the input does not match the provided regex."
            }
          }
        }
      }
    },
    "OldTextStyle": {
      "type": "object",
      "properties": {
        "fontSize": {
          "type": "integer"
        },
        "color": {
          "$ref": "#/$defs/type-color"
        },
        "decoration": {
          "type": "string",
          "enum": [
            "none",
            "lineThrough",
            "underline",
            "overline"
          ]
        }
      }
    },
    "HasDimension": {
      "type": "object",
      "properties": {
        "width": {
          "type": "integer",
          "minimum": 0
        },
        "height": {
          "type": "integer",
          "minimum": 0
        }
      }
    },
    "HasBorder": {
      "allOf": [
        {
          "$ref": "#/$defs/borderRadius"
        },
        {
          "type": "object",
          "properties": {
            "borderColor": {
              "$ref": "#/$defs/type-color",
              "description": "Border color, starting with '0xFF' for full opacity"
            },
            "borderWidth": {
              "type": "integer",
              "minimum": 0,
              "description": "The thickness of the border"
            }
          }
        }
      ]
    },
    "HasShadow": {
      "type": "object",
      "properties": {
        "shadowColor": {
          "oneOf": [
            {
              "title": "string",
              "type": "string"
            },
            {
              "title": "number",
              "type": "number"
            }
          ],
          "description": "Box shadow color starting with '0xFF' for full opacity"
        },
        "shadowOffset": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "shadowRadius": {
          "type": "integer",
          "minimum": 0
        },
        "shadowBlurRadius": {
          "type": "integer",
          "minimum": 0
        },
        "shadowStyle": {
          "type": "string",
          "description": "The blur style to apply on the shadow",
          "oneOf": [
            {
              "const": "normal",
              "description": "Fuzzy inside and outside (default)."
            },
            {
              "const": "solid",
              "description": "Solid inside, fuzzy outside."
            },
            {
              "const": "outer",
              "description": "Nothing inside, fuzzy outside."
            },
            {
              "const": "inner",
              "description": "Fuzzy inside, nothing outside."
            }
          ]
        }
      }
    },
    "HasBackground": {
      "allOf": [
        {
          "$ref": "#/$defs/backgroundColor"
        },
        {
          "$ref": "#/$defs/backgroundImage"
        },
        {
          "$ref": "#/$defs/backgroundGradient"
        }
      ]
    },
    "HasIcon": {
      "type": "object",
      "description": "Specifies the icon to use. You can also use the short-handed syntax 'iconName iconLibrary')",
      "properties": {
        "name": {
          "oneOf": [
            {
              "title": "string",
              "type": "string"
            },
            {
              "title": "integer",
              "type": "integer"
            }
          ],
          "description": "The name of the icon"
        },
        "library": {
          "type": "string",
          "description": "Which icon library to use.",
          "enum": [
            "default",
            "fontAwesome"
          ]
        },
        "color": {
          "$ref": "#/$defs/type-color"
        },
        "size": {
          "type": "integer",
          "minimum": 0
        }
      }
    },
    "HasPullToRefresh": {
      "type": "object",
      "properties": {
        "onPullToRefresh": {
          "description": "Trigger an Action with pull to refresh",
          "$ref": "#/$defs/Action-payload"
        },
        "pullToRefreshOptions": {
          "properties": {
            "indicatorType": {
              "type": "string",
              "description": "Indicate the refresh indicator look-and-feel if onPullToRefresh is specified. Default is 'material'.",
              "enum": [
                "material",
                "cupertino"
              ]
            },
            "indicatorMinDuration": {
              "type": "integer",
              "description": "The minimum duration in milliseconds that the indicator will be shown, regardless if the onPullToRefresh's Action has completed or not."
            },
            "indicatorPadding": {
              "$ref": "#/$defs/Padding-payload",
              "description": "The padding around the refresh indicator"
            }
          }
        }
      }
    },
    "IsTapEnabled": {
      "type": "object",
      "properties": {
        "onTap": {
          "$ref": "#/$defs/Action-payload",
          "description": "Call Ensemble's built-in functions"
        }
      }
    },
    "TextStyle": {
      "type": "object",
      "properties": {
        "fontFamily": {
          "type": "string"
        },
        "fontSize": {
          "type": "integer",
          "minimum": 1,
          "maximum": 1000
        },
        "lineHeightMultiple": {
          "type": "number",
          "description": "A multiple of the fontSize to determine the line height. (e.g. 2.0 means the line height is double the height the font size occupies). Default null. (note that 1.0 is not the default depending on the font)"
        },
        "fontWeight": {
          "$ref": "#/$defs/type-fontWeight"
        },
        "isItalic": {
          "type": "boolean"
        },
        "color": {
          "$ref": "#/$defs/type-color"
        },
        "backgroundColor": {
          "$ref": "#/$defs/type-color"
        },
        "gradient": {
          "type": "object",
          "properties": {
            "colors": {
              "type": "array",
              "description": "The list of colors used for the gradient",
              "items": {
                "$ref": "#/$defs/type-color"
              }
            },
            "stops": {
              "type": "array",
              "description": "The list of color stops, each is a number between 0.0 (where the gradient starts) and 1.0 (where the gradient ends). The number of stops should match the number of colors.",
              "items": {
                "type": "number",
                "minimum": 0.0,
                "maximum": 1.0
              }
            },
            "start": {
              "description": "The starting position of the gradient",
              "$ref": "#/$defs/type-alignment"
            },
            "end": {
              "description": "The ending position of the gradient",
              "$ref": "#/$defs/type-alignment"
            }
          }
        },
        "decoration": {
          "type": "string",
          "enum": [
            "none",
            "lineThrough",
            "underline",
            "overline"
          ]
        },
        "decorationStyle": {
          "type": "string",
          "enum": [
            "solid",
            "double",
            "dotted",
            "dashed",
            "wavy"
          ],
          "description": "The style of the decoration (ignored if decoration=none)"
        },
        "overflow": {
          "type": "string",
          "description": "Set treatment of text longer than available space",
          "enum": [
            "clip",
            "fade",
            "ellipsis",
            "visible"
          ]
        },
        "letterSpacing": {
          "type": "integer"
        },
        "wordSpacing": {
          "type": "integer"
        }
      }
    },
    "type-fontWeight": {
      "type": "string",
      "enum": [
        "light",
        "normal",
        "bold",
        "w100",
        "w200",
        "w300",
        "w400",
        "w500",
        "w600",
        "w700",
        "w800",
        "w900"
      ]
    },
    "type-color": {
      "oneOf": [
        {
          "title": "number",
          "type": "integer"
        },
        {
          "title": "name",
          "type": "string",
          "additionalProperties": true,
          "enum": [
            "transparent",
            "black",
            "blue",
            "white",
            "red",
            "grey",
            "teal",
            "amber",
            "pink",
            "purple",
            "yellow",
            "green",
            "brown",
            "cyan",
            "indigo",
            "lime",
            "orange"
          ]
        },
        {
          "title": "hexadecimal",
          "type": "string",
          "pattern": "^0x"
        }
      ]
    },
    "type-alignment": {
      "type": "string",
      "enum": [
        "topLeft",
        "topCenter",
        "topRight",
        "centerLeft",
        "center",
        "centerRight",
        "bottomLeft",
        "bottomCenter",
        "bottomRight"
      ]
    }
  }
}